
dsd_parkingMeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08006688  08006688  00016688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c30  08006c30  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08006c30  08006c30  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c30  08006c30  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006c38  08006c38  00016c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08006c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed8  200001e8  08006e28  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c0  08006e28  000210c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016341  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002713  00000000  00000000  00036559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000ae66  00000000  00000000  00038c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  00043ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00044738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e8f  00000000  00000000  00045328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e9c  00000000  00000000  0006c1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8143  00000000  00000000  0007f053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00167196  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033a0  00000000  00000000  001671ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006670 	.word	0x08006670

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08006670 	.word	0x08006670

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	2400      	movs	r4, #0
 8000bb0:	9403      	str	r4, [sp, #12]
 8000bb2:	9404      	str	r4, [sp, #16]
 8000bb4:	9405      	str	r4, [sp, #20]
 8000bb6:	9406      	str	r4, [sp, #24]
 8000bb8:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bbe:	f042 0210 	orr.w	r2, r2, #16
 8000bc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc6:	f002 0210 	and.w	r2, r2, #16
 8000bca:	9200      	str	r2, [sp, #0]
 8000bcc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd0:	f042 0202 	orr.w	r2, r2, #2
 8000bd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd8:	f002 0202 	and.w	r2, r2, #2
 8000bdc:	9201      	str	r2, [sp, #4]
 8000bde:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000be2:	f042 0204 	orr.w	r2, r2, #4
 8000be6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WIFI_RESET_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8000bf2:	4e21      	ldr	r6, [pc, #132]	; (8000c78 <MX_GPIO_Init+0xd0>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f240 1101 	movw	r1, #257	; 0x101
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	f000 ff7f 	bl	8001afe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_RESET_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c00:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000c80 <MX_GPIO_Init+0xd8>
 8000c04:	4622      	mov	r2, r4
 8000c06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c0a:	4640      	mov	r0, r8
 8000c0c:	f000 ff77 	bl	8001afe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIFI_RESET_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin;
 8000c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c14:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2501      	movs	r5, #1
 8000c18:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1c:	2702      	movs	r7, #2
 8000c1e:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(WIFI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c20:	a903      	add	r1, sp, #12
 8000c22:	4630      	mov	r0, r6
 8000c24:	f000 fe7e 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_RESET_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = TOF_RESET_Pin|LED_BLUE_Pin;
 8000c28:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c2c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	a903      	add	r1, sp, #12
 8000c36:	4640      	mov	r0, r8
 8000c38:	f000 fe74 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_CS_Pin */
  GPIO_InitStruct.Pin = WIFI_CS_Pin;
 8000c3c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(WIFI_CS_GPIO_Port, &GPIO_InitStruct);
 8000c44:	a903      	add	r1, sp, #12
 8000c46:	4630      	mov	r0, r6
 8000c48:	f000 fe6c 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_INT_Pin */
  GPIO_InitStruct.Pin = WIFI_INT_Pin;
 8000c4c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_GPIO_Init+0xd4>)
 8000c50:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(WIFI_INT_GPIO_Port, &GPIO_InitStruct);
 8000c54:	a903      	add	r1, sp, #12
 8000c56:	4630      	mov	r0, r6
 8000c58:	f000 fe64 	bl	8001924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c5c:	4622      	mov	r2, r4
 8000c5e:	4621      	mov	r1, r4
 8000c60:	2007      	movs	r0, #7
 8000c62:	f000 fe07 	bl	8001874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c66:	2007      	movs	r0, #7
 8000c68:	f000 fe38 	bl	80018dc <HAL_NVIC_EnableIRQ>

}
 8000c6c:	b008      	add	sp, #32
 8000c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48001000 	.word	0x48001000
 8000c7c:	10110000 	.word	0x10110000
 8000c80:	48000800 	.word	0x48000800

08000c84 <current_parking_state>:
PARKING_STATES parking_states, status;
GENERAL_APP_STATE general_states;

PARKING_STATES current_parking_state(float distance_value) {

	switch (parking_states) {
 8000c84:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <current_parking_state+0xe4>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d80d      	bhi.n	8000ca8 <current_parking_state+0x24>
 8000c8c:	e8df f003 	tbb	[pc, r3]
 8000c90:	5b260f02 	.word	0x5b260f02

	case Init_state: {
		status = parking_states;
 8000c94:	4a35      	ldr	r2, [pc, #212]	; (8000d6c <current_parking_state+0xe8>)
 8000c96:	7013      	strb	r3, [r2, #0]
		parking_states = Avaible_state;
 8000c98:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <current_parking_state+0xe4>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
		sensorTOF.sensorTOFValues = 0;
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <current_parking_state+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
		sensorTOF.objectDetected = false;
 8000ca4:	701a      	strb	r2, [r3, #0]
		sensorTOF.numberSamples = 0;
 8000ca6:	605a      	str	r2, [r3, #4]
		break;
	}
	}

	return status;
}
 8000ca8:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <current_parking_state+0xe8>)
 8000caa:	7818      	ldrb	r0, [r3, #0]
 8000cac:	4770      	bx	lr
		parking_states = Avaible_state;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <current_parking_state+0xe4>)
 8000cb2:	7013      	strb	r3, [r2, #0]
		status = Avaible_state;
 8000cb4:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <current_parking_state+0xe8>)
 8000cb6:	7013      	strb	r3, [r2, #0]
		if (distance_value >= thresholdMeterMax
 8000cb8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8000d74 <current_parking_state+0xf0>
 8000cbc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc4:	dbf0      	blt.n	8000ca8 <current_parking_state+0x24>
				&& distance_value <= thresholdMeterMin) {
 8000cc6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8000d78 <current_parking_state+0xf4>
 8000cca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd2:	d8e9      	bhi.n	8000ca8 <current_parking_state+0x24>
			parking_states = Possible_Car_state;
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <current_parking_state+0xe4>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e7e5      	b.n	8000ca8 <current_parking_state+0x24>
		parking_states = Possible_Car_state;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <current_parking_state+0xe4>)
 8000ce0:	7013      	strb	r3, [r2, #0]
		status = Possible_Car_state;
 8000ce2:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <current_parking_state+0xe8>)
 8000ce4:	7013      	strb	r3, [r2, #0]
		sensorTOF.sensorTOFValues += distance_value;
 8000ce6:	4922      	ldr	r1, [pc, #136]	; (8000d70 <current_parking_state+0xec>)
 8000ce8:	edd1 7a02 	vldr	s15, [r1, #8]
 8000cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8000cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cf8:	edc1 7a02 	vstr	s15, [r1, #8]
		sensorTOF.numberSamples++;
 8000cfc:	684a      	ldr	r2, [r1, #4]
 8000cfe:	3201      	adds	r2, #1
 8000d00:	604a      	str	r2, [r1, #4]
		if (sensorTOF.numberSamples >= maxMeasureSamples) {
 8000d02:	2a03      	cmp	r2, #3
 8000d04:	ddd0      	ble.n	8000ca8 <current_parking_state+0x24>
			if (distance_value >= thresholdMeterMax
 8000d06:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8000d74 <current_parking_state+0xf0>
 8000d0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	db0f      	blt.n	8000d34 <current_parking_state+0xb0>
					&& distance_value <= thresholdMeterMin) {
 8000d14:	eddf 7a18 	vldr	s15, [pc, #96]	; 8000d78 <current_parking_state+0xf4>
 8000d18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d20:	d808      	bhi.n	8000d34 <current_parking_state+0xb0>
				sensorTOF.objectDetected = true;
 8000d22:	2201      	movs	r2, #1
 8000d24:	700a      	strb	r2, [r1, #0]
				sensorTOF.numberSamples = 0;
 8000d26:	2200      	movs	r2, #0
 8000d28:	604a      	str	r2, [r1, #4]
				sensorTOF.sensorTOFValues = 0;
 8000d2a:	608a      	str	r2, [r1, #8]
				parking_states = Car_state;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <current_parking_state+0xe4>)
 8000d2e:	2203      	movs	r2, #3
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	e7b9      	b.n	8000ca8 <current_parking_state+0x24>
				parking_states = Avaible_state;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <current_parking_state+0xe4>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
				sensorTOF.objectDetected = false;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <current_parking_state+0xec>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
				sensorTOF.numberSamples = 0;
 8000d40:	605a      	str	r2, [r3, #4]
				sensorTOF.sensorTOFValues = 0;
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	e7b0      	b.n	8000ca8 <current_parking_state+0x24>
		parking_states = Car_state;
 8000d46:	2303      	movs	r3, #3
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <current_parking_state+0xe4>)
 8000d4a:	7013      	strb	r3, [r2, #0]
		status = Car_state;
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <current_parking_state+0xe8>)
 8000d4e:	7013      	strb	r3, [r2, #0]
		if (distance_value > thresholdMeterMin) {
 8000d50:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000d78 <current_parking_state+0xf4>
 8000d54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5c:	dda4      	ble.n	8000ca8 <current_parking_state+0x24>
			parking_states = Possible_Car_state;
 8000d5e:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <current_parking_state+0xe4>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e7a0      	b.n	8000ca8 <current_parking_state+0x24>
 8000d66:	bf00      	nop
 8000d68:	200002fc 	.word	0x200002fc
 8000d6c:	200002fd 	.word	0x200002fd
 8000d70:	200002f0 	.word	0x200002f0
 8000d74:	433e0000 	.word	0x433e0000
 8000d78:	43c80000 	.word	0x43c80000

08000d7c <APP_Initialize>:
 *
 * Se inicializa los estados de cada FSM
 */
void APP_Initialize(void) {

	general_states = INIT_STATE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <APP_Initialize+0x10>)
 8000d80:	7013      	strb	r3, [r2, #0]
	current_state = Init_state;
 8000d82:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <APP_Initialize+0x14>)
 8000d84:	6013      	str	r3, [r2, #0]
	previus_state = Init_state;
 8000d86:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <APP_Initialize+0x18>)
 8000d88:	6013      	str	r3, [r2, #0]
}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000234 	.word	0x20000234
 8000d90:	20000238 	.word	0x20000238
 8000d94:	20000288 	.word	0x20000288

08000d98 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <Error_Handler+0x2>

08000d9c <MX_SPI3_Init>:
{
 8000d9c:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8000d9e:	480f      	ldr	r0, [pc, #60]	; (8000ddc <MX_SPI3_Init+0x40>)
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_SPI3_Init+0x44>)
 8000da2:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000da4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000da8:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000daa:	2300      	movs	r3, #0
 8000dac:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000db2:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db4:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db6:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbc:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dbe:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc0:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dca:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dd0:	f002 fb6f 	bl	80034b2 <HAL_SPI_Init>
 8000dd4:	b900      	cbnz	r0, 8000dd8 <MX_SPI3_Init+0x3c>
}
 8000dd6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000dd8:	f7ff ffde 	bl	8000d98 <Error_Handler>
 8000ddc:	2000028c 	.word	0x2000028c
 8000de0:	40003c00 	.word	0x40003c00

08000de4 <MX_I2C2_Init>:
{
 8000de4:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8000de6:	4811      	ldr	r0, [pc, #68]	; (8000e2c <MX_I2C2_Init+0x48>)
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_I2C2_Init+0x4c>)
 8000dea:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000dec:	f640 6314 	movw	r3, #3604	; 0xe14
 8000df0:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df6:	2201      	movs	r2, #1
 8000df8:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfa:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000dfc:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dfe:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e00:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e02:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e04:	f000 ffd6 	bl	8001db4 <HAL_I2C_Init>
 8000e08:	b950      	cbnz	r0, 8000e20 <MX_I2C2_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_I2C2_Init+0x48>)
 8000e0e:	f001 f9ab 	bl	8002168 <HAL_I2CEx_ConfigAnalogFilter>
 8000e12:	b938      	cbnz	r0, 8000e24 <MX_I2C2_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e14:	2100      	movs	r1, #0
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_I2C2_Init+0x48>)
 8000e18:	f001 f9d4 	bl	80021c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000e1c:	b920      	cbnz	r0, 8000e28 <MX_I2C2_Init+0x44>
}
 8000e1e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e20:	f7ff ffba 	bl	8000d98 <Error_Handler>
    Error_Handler();
 8000e24:	f7ff ffb8 	bl	8000d98 <Error_Handler>
    Error_Handler();
 8000e28:	f7ff ffb6 	bl	8000d98 <Error_Handler>
 8000e2c:	2000023c 	.word	0x2000023c
 8000e30:	40005800 	.word	0x40005800

08000e34 <SystemClock_Config>:
{
 8000e34:	b500      	push	{lr}
 8000e36:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e38:	2240      	movs	r2, #64	; 0x40
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	a828      	add	r0, sp, #160	; 0xa0
 8000e3e:	f002 fd79 	bl	8003934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e42:	2100      	movs	r1, #0
 8000e44:	9122      	str	r1, [sp, #136]	; 0x88
 8000e46:	9123      	str	r1, [sp, #140]	; 0x8c
 8000e48:	9124      	str	r1, [sp, #144]	; 0x90
 8000e4a:	9125      	str	r1, [sp, #148]	; 0x94
 8000e4c:	9126      	str	r1, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e4e:	2288      	movs	r2, #136	; 0x88
 8000e50:	4668      	mov	r0, sp
 8000e52:	f002 fd6f 	bl	8003934 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e56:	2310      	movs	r3, #16
 8000e58:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e5e:	2360      	movs	r3, #96	; 0x60
 8000e60:	932f      	str	r3, [sp, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e62:	a827      	add	r0, sp, #156	; 0x9c
 8000e64:	f001 facc 	bl	8002400 <HAL_RCC_OscConfig>
 8000e68:	b9d0      	cbnz	r0, 8000ea0 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e6e:	2100      	movs	r1, #0
 8000e70:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	9124      	str	r1, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e74:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e76:	9126      	str	r1, [sp, #152]	; 0x98
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e78:	a822      	add	r0, sp, #136	; 0x88
 8000e7a:	f001 fdd9 	bl	8002a30 <HAL_RCC_ClockConfig>
 8000e7e:	b988      	cbnz	r0, 8000ea4 <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e88:	4668      	mov	r0, sp
 8000e8a:	f001 ffdd 	bl	8002e48 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	b958      	cbnz	r0, 8000ea8 <SystemClock_Config+0x74>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e94:	f001 f9ca 	bl	800222c <HAL_PWREx_ControlVoltageScaling>
 8000e98:	b940      	cbnz	r0, 8000eac <SystemClock_Config+0x78>
}
 8000e9a:	b039      	add	sp, #228	; 0xe4
 8000e9c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ea0:	f7ff ff7a 	bl	8000d98 <Error_Handler>
    Error_Handler();
 8000ea4:	f7ff ff78 	bl	8000d98 <Error_Handler>
    Error_Handler();
 8000ea8:	f7ff ff76 	bl	8000d98 <Error_Handler>
    Error_Handler();
 8000eac:	f7ff ff74 	bl	8000d98 <Error_Handler>

08000eb0 <main>:
{
 8000eb0:	b510      	push	{r4, lr}
 8000eb2:	b082      	sub	sp, #8
  HAL_Init();
 8000eb4:	f000 fc96 	bl	80017e4 <HAL_Init>
  SystemClock_Config();
 8000eb8:	f7ff ffbc 	bl	8000e34 <SystemClock_Config>
  MX_GPIO_Init();
 8000ebc:	f7ff fe74 	bl	8000ba8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000ec0:	f7ff ff6c 	bl	8000d9c <MX_SPI3_Init>
  MX_I2C2_Init();
 8000ec4:	f7ff ff8e 	bl	8000de4 <MX_I2C2_Init>
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port,WIFI_RESET_Pin,GPIO_PIN_RESET);
 8000ec8:	4c3b      	ldr	r4, [pc, #236]	; (8000fb8 <main+0x108>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f000 fe14 	bl	8001afe <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f000 fca5 	bl	8001828 <HAL_Delay>
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port,WIFI_RESET_Pin,GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f000 fe0a 	bl	8001afe <HAL_GPIO_WritePin>
   result=getWifiModuleReady();
 8000eea:	f000 f9e7 	bl	80012bc <getWifiModuleReady>
  }while(!result);
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d0fb      	beq.n	8000eea <main+0x3a>
  startWifi();
 8000ef2:	f000 fc25 	bl	8001740 <startWifi>
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port,TOF_RESET_Pin,GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2140      	movs	r1, #64	; 0x40
 8000efa:	4830      	ldr	r0, [pc, #192]	; (8000fbc <main+0x10c>)
 8000efc:	f000 fdff 	bl	8001afe <HAL_GPIO_WritePin>
  startToF();
 8000f00:	f000 f86a 	bl	8000fd8 <startToF>
  HAL_Delay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f000 fc8f 	bl	8001828 <HAL_Delay>
  int distance=0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9301      	str	r3, [sp, #4]
  APP_Initialize();
 8000f0e:	f7ff ff35 	bl	8000d7c <APP_Initialize>
 8000f12:	e005      	b.n	8000f20 <main+0x70>
			general_states = PROCEED_STATE;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <main+0x110>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
			parking_states = Init_state;
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <main+0x114>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
		switch (general_states) {
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <main+0x110>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d8fb      	bhi.n	8000f20 <main+0x70>
 8000f28:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <main+0x80>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f15 	.word	0x08000f15
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f8b 	.word	0x08000f8b
 8000f3c:	08000f93 	.word	0x08000f93
 8000f40:	08000f9b 	.word	0x08000f9b
			general_states = PROCEED_STATE;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <main+0x110>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
			getDistance(&distance);
 8000f4a:	a801      	add	r0, sp, #4
 8000f4c:	f000 f858 	bl	8001000 <getDistance>
			current_state = current_parking_state(distance);
 8000f50:	eddd 7a01 	vldr	s15, [sp, #4]
 8000f54:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8000f58:	f7ff fe94 	bl	8000c84 <current_parking_state>
 8000f5c:	4c1a      	ldr	r4, [pc, #104]	; (8000fc8 <main+0x118>)
 8000f5e:	6020      	str	r0, [r4, #0]
			HAL_GPIO_TogglePin(GPIOC, LED_BLUE_Pin);
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	4815      	ldr	r0, [pc, #84]	; (8000fbc <main+0x10c>)
 8000f66:	f000 fdcf 	bl	8001b08 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000f6a:	2064      	movs	r0, #100	; 0x64
 8000f6c:	f000 fc5c 	bl	8001828 <HAL_Delay>
			startToF();
 8000f70:	f000 f832 	bl	8000fd8 <startToF>
			if (previus_state != current_state) {
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <main+0x11c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	6823      	ldr	r3, [r4, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d0d0      	beq.n	8000f20 <main+0x70>
				previus_state = current_state;
 8000f7e:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <main+0x11c>)
 8000f80:	6013      	str	r3, [r2, #0]
				general_states = REPORT_STATE;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <main+0x110>)
 8000f84:	2204      	movs	r2, #4
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e7ca      	b.n	8000f20 <main+0x70>
			general_states = PROCEED_STATE;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <main+0x110>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
			break;
 8000f90:	e7c6      	b.n	8000f20 <main+0x70>
			general_states = PROCEED_STATE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <main+0x110>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
			break;
 8000f98:	e7c2      	b.n	8000f20 <main+0x70>
			setSensor("LiDar");
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <main+0x120>)
 8000f9c:	f000 fa7c 	bl	8001498 <setSensor>
			setDataInt("parking_State", current_state);
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <main+0x118>)
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <main+0x124>)
 8000fa6:	f000 fad5 	bl	8001554 <setDataInt>
			sendData();
 8000faa:	f000 fb2f 	bl	800160c <sendData>
			general_states = PROCEED_STATE;
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <main+0x110>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
			break;
 8000fb4:	e7b4      	b.n	8000f20 <main+0x70>
 8000fb6:	bf00      	nop
 8000fb8:	48001000 	.word	0x48001000
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	20000234 	.word	0x20000234
 8000fc4:	200002fc 	.word	0x200002fc
 8000fc8:	20000238 	.word	0x20000238
 8000fcc:	20000288 	.word	0x20000288
 8000fd0:	080066d0 	.word	0x080066d0
 8000fd4:	080066d8 	.word	0x080066d8

08000fd8 <startToF>:

    *temperature=T_C0+m*temp;
}


void startToF(){
 8000fd8:	b500      	push	{lr}
 8000fda:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x52;
	 uint8_t turnOn[]={0x00,0x01};
 8000fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe0:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	aa03      	add	r2, sp, #12
 8000fec:	2152      	movs	r1, #82	; 0x52
 8000fee:	4803      	ldr	r0, [pc, #12]	; (8000ffc <startToF+0x24>)
 8000ff0:	f000 ff3e 	bl	8001e70 <HAL_I2C_Master_Transmit>
}
 8000ff4:	b005      	add	sp, #20
 8000ff6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ffa:	bf00      	nop
 8000ffc:	2000023c 	.word	0x2000023c

08001000 <getDistance>:

void getDistance(int *distance){
 8001000:	b570      	push	{r4, r5, r6, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	4604      	mov	r4, r0
	 uint8_t addressWrite=0x52;
	  uint8_t addressRead=0x53;
	  uint8_t resultAddress[]={0x1e};
 8001006:	231e      	movs	r3, #30
 8001008:	f88d 300c 	strb.w	r3, [sp, #12]
	  uint8_t rawData[]={0,0};
 800100c:	2300      	movs	r3, #0
 800100e:	f8ad 3008 	strh.w	r3, [sp, #8]

	  HAL_I2C_Master_Transmit(&hi2c2,addressWrite,resultAddress,1,1);
 8001012:	4e13      	ldr	r6, [pc, #76]	; (8001060 <getDistance+0x60>)
 8001014:	2501      	movs	r5, #1
 8001016:	9500      	str	r5, [sp, #0]
 8001018:	462b      	mov	r3, r5
 800101a:	aa03      	add	r2, sp, #12
 800101c:	2152      	movs	r1, #82	; 0x52
 800101e:	4630      	mov	r0, r6
 8001020:	f000 ff26 	bl	8001e70 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c2,addressRead,rawData,2,1);
 8001024:	9500      	str	r5, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	aa02      	add	r2, sp, #8
 800102a:	2153      	movs	r1, #83	; 0x53
 800102c:	4630      	mov	r0, r6
 800102e:	f000 ffdd 	bl	8001fec <HAL_I2C_Master_Receive>
	  *distance=(rawData[0]<<8)+rawData[1]-20;
 8001032:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001036:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800103a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800103e:	3b14      	subs	r3, #20
 8001040:	6023      	str	r3, [r4, #0]

	  if(*distance<0){
 8001042:	2b00      	cmp	r3, #0
 8001044:	db08      	blt.n	8001058 <getDistance+0x58>
		  *distance=0;
	  }
	  if(*distance>2000){
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800104c:	dd02      	ble.n	8001054 <getDistance+0x54>
		  *distance=2000;
 800104e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001052:	6023      	str	r3, [r4, #0]
	  }
}
 8001054:	b004      	add	sp, #16
 8001056:	bd70      	pop	{r4, r5, r6, pc}
		  *distance=0;
 8001058:	2300      	movs	r3, #0
 800105a:	6023      	str	r3, [r4, #0]
 800105c:	e7f3      	b.n	8001046 <getDistance+0x46>
 800105e:	bf00      	nop
 8001060:	2000023c 	.word	0x2000023c

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_MspInit+0x2c>)
 8001068:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800106a:	f042 0201 	orr.w	r2, r2, #1
 800106e:	661a      	str	r2, [r3, #96]	; 0x60
 8001070:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001072:	f002 0201 	and.w	r2, r2, #1
 8001076:	9200      	str	r2, [sp, #0]
 8001078:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800107c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001080:	659a      	str	r2, [r3, #88]	; 0x58
 8001082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108c:	b002      	add	sp, #8
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001094:	b510      	push	{r4, lr}
 8001096:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	2300      	movs	r3, #0
 800109a:	9303      	str	r3, [sp, #12]
 800109c:	9304      	str	r3, [sp, #16]
 800109e:	9305      	str	r3, [sp, #20]
 80010a0:	9306      	str	r3, [sp, #24]
 80010a2:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 80010a4:	6802      	ldr	r2, [r0, #0]
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_I2C_MspInit+0x64>)
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d001      	beq.n	80010b0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010ac:	b008      	add	sp, #32
 80010ae:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4c12      	ldr	r4, [pc, #72]	; (80010fc <HAL_I2C_MspInit+0x68>)
 80010b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80010ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ca:	2312      	movs	r3, #18
 80010cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010d6:	2304      	movs	r3, #4
 80010d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	a903      	add	r1, sp, #12
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0x6c>)
 80010de:	f000 fc21 	bl	8001924 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80010ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	9b02      	ldr	r3, [sp, #8]
}
 80010f4:	e7da      	b.n	80010ac <HAL_I2C_MspInit+0x18>
 80010f6:	bf00      	nop
 80010f8:	40005800 	.word	0x40005800
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400

08001104 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001104:	b500      	push	{lr}
 8001106:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	2300      	movs	r3, #0
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	9304      	str	r3, [sp, #16]
 800110e:	9305      	str	r3, [sp, #20]
 8001110:	9306      	str	r3, [sp, #24]
 8001112:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 8001114:	6802      	ldr	r2, [r0, #0]
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_SPI_MspInit+0x68>)
 8001118:	429a      	cmp	r2, r3
 800111a:	d002      	beq.n	8001122 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800111c:	b009      	add	sp, #36	; 0x24
 800111e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001122:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001126:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800112c:	659a      	str	r2, [r3, #88]	; 0x58
 800112e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001130:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001134:	9201      	str	r2, [sp, #4]
 8001136:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800113a:	f042 0204 	orr.w	r2, r2, #4
 800113e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800114a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800114e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800115c:	2306      	movs	r3, #6
 800115e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	a903      	add	r1, sp, #12
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <HAL_SPI_MspInit+0x6c>)
 8001164:	f000 fbde 	bl	8001924 <HAL_GPIO_Init>
}
 8001168:	e7d8      	b.n	800111c <HAL_SPI_MspInit+0x18>
 800116a:	bf00      	nop
 800116c:	40003c00 	.word	0x40003c00
 8001170:	48000800 	.word	0x48000800

08001174 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler>

08001176 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler>

08001178 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler>

0800117a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler>

0800117c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler>

0800117e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117e:	4770      	bx	lr

08001180 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001186:	f000 fb3d 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118a:	bd08      	pop	{r3, pc}

0800118c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800118c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800118e:	2002      	movs	r0, #2
 8001190:	f000 fcc4 	bl	8001b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

		flagData=1;
 8001194:	4b01      	ldr	r3, [pc, #4]	; (800119c <EXTI1_IRQHandler+0x10>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]




  /* USER CODE END EXTI1_IRQn 1 */
}
 800119a:	bd08      	pop	{r3, pc}
 800119c:	2000020c 	.word	0x2000020c

080011a0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80011a0:	2001      	movs	r0, #1
 80011a2:	4770      	bx	lr

080011a4 <_kill>:

int _kill(int pid, int sig)
{
 80011a4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80011a6:	f002 fb8d 	bl	80038c4 <__errno>
 80011aa:	2316      	movs	r3, #22
 80011ac:	6003      	str	r3, [r0, #0]
	return -1;
}
 80011ae:	f04f 30ff 	mov.w	r0, #4294967295
 80011b2:	bd08      	pop	{r3, pc}

080011b4 <_exit>:

void _exit (int status)
{
 80011b4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80011b6:	f04f 31ff 	mov.w	r1, #4294967295
 80011ba:	f7ff fff3 	bl	80011a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011be:	e7fe      	b.n	80011be <_exit+0xa>

080011c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c0:	b570      	push	{r4, r5, r6, lr}
 80011c2:	460c      	mov	r4, r1
 80011c4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	2500      	movs	r5, #0
 80011c8:	42b5      	cmp	r5, r6
 80011ca:	da07      	bge.n	80011dc <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 80011cc:	f3af 8000 	nop.w
 80011d0:	4621      	mov	r1, r4
 80011d2:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80011d8:	460c      	mov	r4, r1
 80011da:	e7f5      	b.n	80011c8 <_read+0x8>
	}

return len;
}
 80011dc:	4630      	mov	r0, r6
 80011de:	bd70      	pop	{r4, r5, r6, pc}

080011e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	460c      	mov	r4, r1
 80011e4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	2500      	movs	r5, #0
 80011e8:	42b5      	cmp	r5, r6
 80011ea:	da05      	bge.n	80011f8 <_write+0x18>
	{
		__io_putchar(*ptr++);
 80011ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80011f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f4:	3501      	adds	r5, #1
 80011f6:	e7f7      	b.n	80011e8 <_write+0x8>
	}
	return len;
}
 80011f8:	4630      	mov	r0, r6
 80011fa:	bd70      	pop	{r4, r5, r6, pc}

080011fc <_sbrk>:

caddr_t _sbrk(int incr)
{
 80011fc:	b508      	push	{r3, lr}
 80011fe:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <_sbrk+0x34>)
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	b142      	cbz	r2, 8001218 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <_sbrk+0x34>)
 8001208:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800120a:	4403      	add	r3, r0
 800120c:	466a      	mov	r2, sp
 800120e:	4293      	cmp	r3, r2
 8001210:	d806      	bhi.n	8001220 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <_sbrk+0x34>)
 8001214:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001216:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x34>)
 800121a:	4906      	ldr	r1, [pc, #24]	; (8001234 <_sbrk+0x38>)
 800121c:	6011      	str	r1, [r2, #0]
 800121e:	e7f2      	b.n	8001206 <_sbrk+0xa>
		errno = ENOMEM;
 8001220:	f002 fb50 	bl	80038c4 <__errno>
 8001224:	230c      	movs	r3, #12
 8001226:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	e7f3      	b.n	8001216 <_sbrk+0x1a>
 800122e:	bf00      	nop
 8001230:	20000204 	.word	0x20000204
 8001234:	200010c0 	.word	0x200010c0

08001238 <_close>:

int _close(int file)
{
	return -1;
}
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	4770      	bx	lr

0800123e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800123e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001242:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001244:	2000      	movs	r0, #0
 8001246:	4770      	bx	lr

08001248 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001248:	2001      	movs	r0, #1
 800124a:	4770      	bx	lr

0800124c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800124c:	2000      	movs	r0, #0
 800124e:	4770      	bx	lr

08001250 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	490f      	ldr	r1, [pc, #60]	; (8001290 <SystemInit+0x40>)
 8001252:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001256:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <SystemInit+0x44>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001268:	2000      	movs	r0, #0
 800126a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001272:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001276:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001284:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001286:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800128c:	608b      	str	r3, [r1, #8]
#endif
}
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	40021000 	.word	0x40021000

08001298 <checkWifiEvent>:


int checkWifiEvent(uint8_t * input, uint8_t *event, int size){

	int i=0;
	for(i=0;i<size;i++){
 8001298:	2300      	movs	r3, #0
 800129a:	4293      	cmp	r3, r2
 800129c:	da0c      	bge.n	80012b8 <checkWifiEvent+0x20>
int checkWifiEvent(uint8_t * input, uint8_t *event, int size){
 800129e:	b430      	push	{r4, r5}
    if(input[i]!=event[i]){
 80012a0:	5cc5      	ldrb	r5, [r0, r3]
 80012a2:	5ccc      	ldrb	r4, [r1, r3]
 80012a4:	42a5      	cmp	r5, r4
 80012a6:	d105      	bne.n	80012b4 <checkWifiEvent+0x1c>
	for(i=0;i<size;i++){
 80012a8:	3301      	adds	r3, #1
 80012aa:	4293      	cmp	r3, r2
 80012ac:	dbf8      	blt.n	80012a0 <checkWifiEvent+0x8>
    	return 0;
    }


	}
	return 1;
 80012ae:	2001      	movs	r0, #1

}
 80012b0:	bc30      	pop	{r4, r5}
 80012b2:	4770      	bx	lr
    	return 0;
 80012b4:	2000      	movs	r0, #0
 80012b6:	e7fb      	b.n	80012b0 <checkWifiEvent+0x18>
	return 1;
 80012b8:	2001      	movs	r0, #1
}
 80012ba:	4770      	bx	lr

080012bc <getWifiModuleReady>:


int getWifiModuleReady(){
 80012bc:	b510      	push	{r4, lr}
 80012be:	b082      	sub	sp, #8

  while(!flagData);
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <getWifiModuleReady+0x74>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0fb      	beq.n	80012c0 <getWifiModuleReady+0x4>
  flagData=0;
 80012c8:	2400      	movs	r4, #0
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <getWifiModuleReady+0x74>)
 80012cc:	601c      	str	r4, [r3, #0]
  memset(buffer,0,sizeof(buffer));
 80012ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d2:	4621      	mov	r1, r4
 80012d4:	4817      	ldr	r0, [pc, #92]	; (8001334 <getWifiModuleReady+0x78>)
 80012d6:	f002 fb2d 	bl	8003934 <memset>
  HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_RESET);
 80012da:	4622      	mov	r2, r4
 80012dc:	2101      	movs	r1, #1
 80012de:	4816      	ldr	r0, [pc, #88]	; (8001338 <getWifiModuleReady+0x7c>)
 80012e0:	f000 fc0d 	bl	8001afe <HAL_GPIO_WritePin>
  do{

	  HAL_SPI_TransmitReceive(&hspi3,dummy,buffer+myIndex,2,1);
 80012e4:	4c12      	ldr	r4, [pc, #72]	; (8001330 <getWifiModuleReady+0x74>)
 80012e6:	6862      	ldr	r2, [r4, #4]
 80012e8:	2301      	movs	r3, #1
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2302      	movs	r3, #2
 80012ee:	4911      	ldr	r1, [pc, #68]	; (8001334 <getWifiModuleReady+0x78>)
 80012f0:	440a      	add	r2, r1
 80012f2:	4912      	ldr	r1, [pc, #72]	; (800133c <getWifiModuleReady+0x80>)
 80012f4:	4812      	ldr	r0, [pc, #72]	; (8001340 <getWifiModuleReady+0x84>)
 80012f6:	f002 f94b 	bl	8003590 <HAL_SPI_TransmitReceive>
	  myIndex+=2;
 80012fa:	6863      	ldr	r3, [r4, #4]
 80012fc:	3302      	adds	r3, #2
 80012fe:	6063      	str	r3, [r4, #4]

  }while(HAL_GPIO_ReadPin(WIFI_INT_GPIO_Port,WIFI_INT_Pin)==1);
 8001300:	2102      	movs	r1, #2
 8001302:	480d      	ldr	r0, [pc, #52]	; (8001338 <getWifiModuleReady+0x7c>)
 8001304:	f000 fbf4 	bl	8001af0 <HAL_GPIO_ReadPin>
 8001308:	2801      	cmp	r0, #1
 800130a:	d0eb      	beq.n	80012e4 <getWifiModuleReady+0x28>
  HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	4611      	mov	r1, r2
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <getWifiModuleReady+0x7c>)
 8001312:	f000 fbf4 	bl	8001afe <HAL_GPIO_WritePin>

  if(checkWifiEvent(buffer,ready,sizeof(ready))){
 8001316:	2206      	movs	r2, #6
 8001318:	490a      	ldr	r1, [pc, #40]	; (8001344 <getWifiModuleReady+0x88>)
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <getWifiModuleReady+0x78>)
 800131c:	f7ff ffbc 	bl	8001298 <checkWifiEvent>
 8001320:	b918      	cbnz	r0, 800132a <getWifiModuleReady+0x6e>
	  return 1;
  }
  myIndex=0;
 8001322:	2200      	movs	r2, #0
 8001324:	6062      	str	r2, [r4, #4]
  return 0;

}
 8001326:	b002      	add	sp, #8
 8001328:	bd10      	pop	{r4, pc}
	  return 1;
 800132a:	2001      	movs	r0, #1
 800132c:	e7fb      	b.n	8001326 <getWifiModuleReady+0x6a>
 800132e:	bf00      	nop
 8001330:	2000020c 	.word	0x2000020c
 8001334:	20000cc4 	.word	0x20000cc4
 8001338:	48001000 	.word	0x48001000
 800133c:	20000004 	.word	0x20000004
 8001340:	2000028c 	.word	0x2000028c
 8001344:	20000008 	.word	0x20000008

08001348 <littleToBig>:


void littleToBig(uint8_t *input, uint8_t *output, int size){

	int temp,i;
	for(i=0;i<size;i+=2){
 8001348:	2300      	movs	r3, #0
 800134a:	4293      	cmp	r3, r2
 800134c:	da0a      	bge.n	8001364 <littleToBig+0x1c>
void littleToBig(uint8_t *input, uint8_t *output, int size){
 800134e:	b430      	push	{r4, r5}
		output[i]=input[i+1];
 8001350:	1c5c      	adds	r4, r3, #1
 8001352:	5d05      	ldrb	r5, [r0, r4]
 8001354:	54cd      	strb	r5, [r1, r3]
		output[i+1]=input[i];
 8001356:	5cc5      	ldrb	r5, [r0, r3]
 8001358:	550d      	strb	r5, [r1, r4]
	for(i=0;i<size;i+=2){
 800135a:	3302      	adds	r3, #2
 800135c:	4293      	cmp	r3, r2
 800135e:	dbf7      	blt.n	8001350 <littleToBig+0x8>

	}


}
 8001360:	bc30      	pop	{r4, r5}
 8001362:	4770      	bx	lr
 8001364:	4770      	bx	lr

08001366 <bigToLittle>:

void bigToLittle(uint8_t *input, uint8_t *output, int size){

	int temp,i;
	for(i=0;i<size;i+=2){
 8001366:	2300      	movs	r3, #0
 8001368:	4293      	cmp	r3, r2
 800136a:	da0a      	bge.n	8001382 <bigToLittle+0x1c>
void bigToLittle(uint8_t *input, uint8_t *output, int size){
 800136c:	b430      	push	{r4, r5}
		output[i]=input[i+1];
 800136e:	1c5c      	adds	r4, r3, #1
 8001370:	5d05      	ldrb	r5, [r0, r4]
 8001372:	54cd      	strb	r5, [r1, r3]
		output[i+1]=input[i];
 8001374:	5cc5      	ldrb	r5, [r0, r3]
 8001376:	550d      	strb	r5, [r1, r4]
	for(i=0;i<size;i+=2){
 8001378:	3302      	adds	r3, #2
 800137a:	4293      	cmp	r3, r2
 800137c:	dbf7      	blt.n	800136e <bigToLittle+0x8>

	}


}
 800137e:	bc30      	pop	{r4, r5}
 8001380:	4770      	bx	lr
 8001382:	4770      	bx	lr

08001384 <sendCommand>:
void sendCommand(uint8_t *command,int size){
 8001384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	4607      	mov	r7, r0
 800138c:	460d      	mov	r5, r1
	while(!flagData);
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <sendCommand+0xf8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0fb      	beq.n	800138e <sendCommand+0xa>
	flagData=0;
 8001396:	4e39      	ldr	r6, [pc, #228]	; (800147c <sendCommand+0xf8>)
 8001398:	2400      	movs	r4, #0
 800139a:	6034      	str	r4, [r6, #0]
    myIndex=0;
 800139c:	6074      	str	r4, [r6, #4]
	memset(buffer,0,sizeof(buffer));
 800139e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013a2:	4621      	mov	r1, r4
 80013a4:	4836      	ldr	r0, [pc, #216]	; (8001480 <sendCommand+0xfc>)
 80013a6:	f002 fac5 	bl	8003934 <memset>
	memset(commandbuffer,0x0a,sizeof(commandbuffer));
 80013aa:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8001488 <sendCommand+0x104>
 80013ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013b2:	210a      	movs	r1, #10
 80013b4:	4640      	mov	r0, r8
 80013b6:	f002 fabd 	bl	8003934 <memset>
	bigToLittle(command,commandbuffer,size);
 80013ba:	462a      	mov	r2, r5
 80013bc:	4641      	mov	r1, r8
 80013be:	4638      	mov	r0, r7
 80013c0:	f7ff ffd1 	bl	8001366 <bigToLittle>
	myIndex=0;
 80013c4:	6074      	str	r4, [r6, #4]
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_RESET);
 80013c6:	4622      	mov	r2, r4
 80013c8:	2101      	movs	r1, #1
 80013ca:	482e      	ldr	r0, [pc, #184]	; (8001484 <sendCommand+0x100>)
 80013cc:	f000 fb97 	bl	8001afe <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3,commandbuffer+myIndex,buffer+myIndex,2,1);
 80013d0:	4c2a      	ldr	r4, [pc, #168]	; (800147c <sendCommand+0xf8>)
 80013d2:	6860      	ldr	r0, [r4, #4]
 80013d4:	2301      	movs	r3, #1
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2302      	movs	r3, #2
 80013da:	4a29      	ldr	r2, [pc, #164]	; (8001480 <sendCommand+0xfc>)
 80013dc:	4402      	add	r2, r0
 80013de:	492a      	ldr	r1, [pc, #168]	; (8001488 <sendCommand+0x104>)
 80013e0:	4401      	add	r1, r0
 80013e2:	482a      	ldr	r0, [pc, #168]	; (800148c <sendCommand+0x108>)
 80013e4:	f002 f8d4 	bl	8003590 <HAL_SPI_TransmitReceive>
	myIndex+=2;
 80013e8:	6863      	ldr	r3, [r4, #4]
 80013ea:	3302      	adds	r3, #2
 80013ec:	6063      	str	r3, [r4, #4]
	}while(myIndex<size);
 80013ee:	42ab      	cmp	r3, r5
 80013f0:	dbee      	blt.n	80013d0 <sendCommand+0x4c>
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	4611      	mov	r1, r2
 80013f6:	4823      	ldr	r0, [pc, #140]	; (8001484 <sendCommand+0x100>)
 80013f8:	f000 fb81 	bl	8001afe <HAL_GPIO_WritePin>
	while(!flagData);
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <sendCommand+0xf8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0fb      	beq.n	80013fc <sendCommand+0x78>
	flagData=0;
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <sendCommand+0xf8>)
 8001406:	2400      	movs	r4, #0
 8001408:	601c      	str	r4, [r3, #0]
	myIndex=0;
 800140a:	605c      	str	r4, [r3, #4]
	memset(buffer,0,sizeof(buffer));
 800140c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001410:	4621      	mov	r1, r4
 8001412:	481b      	ldr	r0, [pc, #108]	; (8001480 <sendCommand+0xfc>)
 8001414:	f002 fa8e 	bl	8003934 <memset>
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_RESET);
 8001418:	4622      	mov	r2, r4
 800141a:	2101      	movs	r1, #1
 800141c:	4819      	ldr	r0, [pc, #100]	; (8001484 <sendCommand+0x100>)
 800141e:	f000 fb6e 	bl	8001afe <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3,dummy,buffer+myIndex,2,1);
 8001422:	4c16      	ldr	r4, [pc, #88]	; (800147c <sendCommand+0xf8>)
 8001424:	6862      	ldr	r2, [r4, #4]
 8001426:	2301      	movs	r3, #1
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2302      	movs	r3, #2
 800142c:	4914      	ldr	r1, [pc, #80]	; (8001480 <sendCommand+0xfc>)
 800142e:	440a      	add	r2, r1
 8001430:	4917      	ldr	r1, [pc, #92]	; (8001490 <sendCommand+0x10c>)
 8001432:	4816      	ldr	r0, [pc, #88]	; (800148c <sendCommand+0x108>)
 8001434:	f002 f8ac 	bl	8003590 <HAL_SPI_TransmitReceive>
	myIndex+=2;
 8001438:	6863      	ldr	r3, [r4, #4]
 800143a:	3302      	adds	r3, #2
 800143c:	6063      	str	r3, [r4, #4]
	}while(HAL_GPIO_ReadPin(WIFI_INT_GPIO_Port,WIFI_INT_Pin)==1);
 800143e:	2102      	movs	r1, #2
 8001440:	4810      	ldr	r0, [pc, #64]	; (8001484 <sendCommand+0x100>)
 8001442:	f000 fb55 	bl	8001af0 <HAL_GPIO_ReadPin>
 8001446:	2801      	cmp	r0, #1
 8001448:	d0eb      	beq.n	8001422 <sendCommand+0x9e>
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	4611      	mov	r1, r2
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <sendCommand+0x100>)
 8001450:	f000 fb55 	bl	8001afe <HAL_GPIO_WritePin>
	memset(bufferBig,0,sizeof(bufferBig));
 8001454:	4c0f      	ldr	r4, [pc, #60]	; (8001494 <sendCommand+0x110>)
 8001456:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800145a:	462a      	mov	r2, r5
 800145c:	2100      	movs	r1, #0
 800145e:	4620      	mov	r0, r4
 8001460:	f002 fa68 	bl	8003934 <memset>
	littleToBig(buffer,bufferBig,sizeof(buffer));
 8001464:	462a      	mov	r2, r5
 8001466:	4621      	mov	r1, r4
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <sendCommand+0xfc>)
 800146a:	f7ff ff6d 	bl	8001348 <littleToBig>
	HAL_Delay(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f000 f9da 	bl	8001828 <HAL_Delay>
}
 8001474:	b002      	add	sp, #8
 8001476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800147a:	bf00      	nop
 800147c:	2000020c 	.word	0x2000020c
 8001480:	20000cc4 	.word	0x20000cc4
 8001484:	48001000 	.word	0x48001000
 8001488:	200006e8 	.word	0x200006e8
 800148c:	2000028c 	.word	0x2000028c
 8001490:	20000004 	.word	0x20000004
 8001494:	20000300 	.word	0x20000300

08001498 <setSensor>:

void setSensor(uint8_t *name){
 8001498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149a:	4605      	mov	r5, r0
	uint8_t value[50];
	if(indexsensor!=0){
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <setSensor+0xa8>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	b37b      	cbz	r3, 8001502 <setSensor+0x6a>
	strcat(payloadsensors,"} ] },{ \"sensor\":");
 80014a2:	4c28      	ldr	r4, [pc, #160]	; (8001544 <setSensor+0xac>)
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7fe fe93 	bl	80001d0 <strlen>
 80014aa:	4684      	mov	ip, r0
 80014ac:	1907      	adds	r7, r0, r4
 80014ae:	4e26      	ldr	r6, [pc, #152]	; (8001548 <setSensor+0xb0>)
 80014b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014b2:	f84c 0004 	str.w	r0, [ip, r4]
 80014b6:	6079      	str	r1, [r7, #4]
 80014b8:	60ba      	str	r2, [r7, #8]
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	8833      	ldrh	r3, [r6, #0]
 80014be:	823b      	strh	r3, [r7, #16]
	strcat(payloadsensors,"\"");
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7fe fe85 	bl	80001d0 <strlen>
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <setSensor+0xb4>)
 80014c8:	881e      	ldrh	r6, [r3, #0]
 80014ca:	5226      	strh	r6, [r4, r0]
	strcat(payloadsensors,name);
 80014cc:	4629      	mov	r1, r5
 80014ce:	4620      	mov	r0, r4
 80014d0:	f002 fec2 	bl	8004258 <strcat>
	strcat(payloadsensors,"\"");
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7fe fe7b 	bl	80001d0 <strlen>
 80014da:	5226      	strh	r6, [r4, r0]
	strcat(payloadsensors,", \"data\": [ {");
 80014dc:	4620      	mov	r0, r4
 80014de:	f7fe fe77 	bl	80001d0 <strlen>
 80014e2:	4605      	mov	r5, r0
 80014e4:	1906      	adds	r6, r0, r4
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <setSensor+0xb8>)
 80014e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014ea:	5128      	str	r0, [r5, r4]
 80014ec:	6071      	str	r1, [r6, #4]
 80014ee:	60b2      	str	r2, [r6, #8]
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	81b3      	strh	r3, [r6, #12]
	strcpy(payloadsensors,"\"");
	strcat(payloadsensors,name);
	strcat(payloadsensors,"\"");
	strcat(payloadsensors,", \"data\": [ {");
	}
	indexsensor++;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <setSensor+0xa8>)
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	3201      	adds	r2, #1
 80014fa:	609a      	str	r2, [r3, #8]
	indexdata=0;
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]

}
 8001500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(payloadsensors,0,sizeof(payloadsensors));
 8001502:	4c10      	ldr	r4, [pc, #64]	; (8001544 <setSensor+0xac>)
 8001504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001508:	2100      	movs	r1, #0
 800150a:	4620      	mov	r0, r4
 800150c:	f002 fa12 	bl	8003934 <memset>
	strcpy(payloadsensors,"\"");
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <setSensor+0xb4>)
 8001512:	881e      	ldrh	r6, [r3, #0]
 8001514:	8026      	strh	r6, [r4, #0]
	strcat(payloadsensors,name);
 8001516:	4629      	mov	r1, r5
 8001518:	4620      	mov	r0, r4
 800151a:	f002 fe9d 	bl	8004258 <strcat>
	strcat(payloadsensors,"\"");
 800151e:	4620      	mov	r0, r4
 8001520:	f7fe fe56 	bl	80001d0 <strlen>
 8001524:	5226      	strh	r6, [r4, r0]
	strcat(payloadsensors,", \"data\": [ {");
 8001526:	4620      	mov	r0, r4
 8001528:	f7fe fe52 	bl	80001d0 <strlen>
 800152c:	4605      	mov	r5, r0
 800152e:	1906      	adds	r6, r0, r4
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <setSensor+0xb8>)
 8001532:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001534:	5128      	str	r0, [r5, r4]
 8001536:	6071      	str	r1, [r6, #4]
 8001538:	60b2      	str	r2, [r6, #8]
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	81b3      	strh	r3, [r6, #12]
 800153e:	e7d9      	b.n	80014f4 <setSensor+0x5c>
 8001540:	2000020c 	.word	0x2000020c
 8001544:	200008dc 	.word	0x200008dc
 8001548:	080066e8 	.word	0x080066e8
 800154c:	080066fc 	.word	0x080066fc
 8001550:	08006700 	.word	0x08006700

08001554 <setDataInt>:

void setDataInt(uint8_t *payload, int data){
 8001554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001556:	b085      	sub	sp, #20
 8001558:	4606      	mov	r6, r0
 800155a:	460d      	mov	r5, r1
	uint8_t value[10];
	if(indexdata!=0){
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <setDataInt+0xa4>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	b353      	cbz	r3, 80015b8 <setDataInt+0x64>
		sprintf(value,",");
 8001562:	232c      	movs	r3, #44	; 0x2c
 8001564:	f8ad 3004 	strh.w	r3, [sp, #4]
		strcat(payloadsensors,value);
 8001568:	4c24      	ldr	r4, [pc, #144]	; (80015fc <setDataInt+0xa8>)
 800156a:	a901      	add	r1, sp, #4
 800156c:	4620      	mov	r0, r4
 800156e:	f002 fe73 	bl	8004258 <strcat>
		strcat(payloadsensors,"\"");
 8001572:	4620      	mov	r0, r4
 8001574:	f7fe fe2c 	bl	80001d0 <strlen>
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <setDataInt+0xac>)
 800157a:	881f      	ldrh	r7, [r3, #0]
 800157c:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,payload);
 800157e:	4631      	mov	r1, r6
 8001580:	4620      	mov	r0, r4
 8001582:	f002 fe69 	bl	8004258 <strcat>
		strcat(payloadsensors,"\"");
 8001586:	4620      	mov	r0, r4
 8001588:	f7fe fe22 	bl	80001d0 <strlen>
 800158c:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,":");
 800158e:	4620      	mov	r0, r4
 8001590:	f7fe fe1e 	bl	80001d0 <strlen>
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <setDataInt+0xb0>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	5223      	strh	r3, [r4, r0]
		sprintf(value,"\"%d\"",data);
 800159a:	462a      	mov	r2, r5
 800159c:	491a      	ldr	r1, [pc, #104]	; (8001608 <setDataInt+0xb4>)
 800159e:	a801      	add	r0, sp, #4
 80015a0:	f002 fe3a 	bl	8004218 <siprintf>
		strcat(payloadsensors,value);
 80015a4:	a901      	add	r1, sp, #4
 80015a6:	4620      	mov	r0, r4
 80015a8:	f002 fe56 	bl	8004258 <strcat>
		strcat(payloadsensors,":");
		sprintf(value,"\"%d\"",data);
		strcat(payloadsensors,value);

	}
	indexdata++;
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <setDataInt+0xa4>)
 80015ae:	68d3      	ldr	r3, [r2, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60d3      	str	r3, [r2, #12]


}
 80015b4:	b005      	add	sp, #20
 80015b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(payloadsensors,"\"");
 80015b8:	4c10      	ldr	r4, [pc, #64]	; (80015fc <setDataInt+0xa8>)
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7fe fe08 	bl	80001d0 <strlen>
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <setDataInt+0xac>)
 80015c2:	881f      	ldrh	r7, [r3, #0]
 80015c4:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,payload);
 80015c6:	4631      	mov	r1, r6
 80015c8:	4620      	mov	r0, r4
 80015ca:	f002 fe45 	bl	8004258 <strcat>
		strcat(payloadsensors,"\"");
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7fe fdfe 	bl	80001d0 <strlen>
 80015d4:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,":");
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7fe fdfa 	bl	80001d0 <strlen>
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <setDataInt+0xb0>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	5223      	strh	r3, [r4, r0]
		sprintf(value,"\"%d\"",data);
 80015e2:	462a      	mov	r2, r5
 80015e4:	4908      	ldr	r1, [pc, #32]	; (8001608 <setDataInt+0xb4>)
 80015e6:	a801      	add	r0, sp, #4
 80015e8:	f002 fe16 	bl	8004218 <siprintf>
		strcat(payloadsensors,value);
 80015ec:	a901      	add	r1, sp, #4
 80015ee:	4620      	mov	r0, r4
 80015f0:	f002 fe32 	bl	8004258 <strcat>
 80015f4:	e7da      	b.n	80015ac <setDataInt+0x58>
 80015f6:	bf00      	nop
 80015f8:	2000020c 	.word	0x2000020c
 80015fc:	200008dc 	.word	0x200008dc
 8001600:	080066fc 	.word	0x080066fc
 8001604:	080067b8 	.word	0x080067b8
 8001608:	08006710 	.word	0x08006710

0800160c <sendData>:
	indexdata++;


}

void sendData(){
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	f2ad 7de4 	subw	sp, sp, #2020	; 0x7e4
	 sendCommand((uint8_t*)STARTTCPcommand, strlen(STARTTCPcommand));
 8001612:	2106      	movs	r1, #6
 8001614:	4841      	ldr	r0, [pc, #260]	; (800171c <sendData+0x110>)
 8001616:	f7ff feb5 	bl	8001384 <sendCommand>


	 int payloadsize=strlen(POSTmid)+strlen(payloadsensors)+strlen(POSTclose)-4;
 800161a:	4841      	ldr	r0, [pc, #260]	; (8001720 <sendData+0x114>)
 800161c:	f7fe fdd8 	bl	80001d0 <strlen>
 8001620:	f100 0450 	add.w	r4, r0, #80	; 0x50
	  uint8_t DATAcommand[1000];
	  uint8_t DATAsend[1000];
	  memset(DATAcommand,0,sizeof(DATAcommand));
 8001624:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001628:	462a      	mov	r2, r5
 800162a:	2100      	movs	r1, #0
 800162c:	a8fe      	add	r0, sp, #1016	; 0x3f8
 800162e:	f002 f981 	bl	8003934 <memset>
	  memset(DATAsend,0,sizeof(DATAsend));
 8001632:	462a      	mov	r2, r5
 8001634:	2100      	movs	r1, #0
 8001636:	a804      	add	r0, sp, #16
 8001638:	f002 f97c 	bl	8003934 <memset>
	  strcpy(DATAcommand,POSTinit);
 800163c:	2262      	movs	r2, #98	; 0x62
 800163e:	4939      	ldr	r1, [pc, #228]	; (8001724 <sendData+0x118>)
 8001640:	a8fe      	add	r0, sp, #1016	; 0x3f8
 8001642:	f002 f969 	bl	8003918 <memcpy>
	  uint8_t data[10];
	  memset(data,0,sizeof(data));
 8001646:	2300      	movs	r3, #0
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	f8ad 300c 	strh.w	r3, [sp, #12]
	  sprintf(data,"%d",payloadsize);
 8001650:	4622      	mov	r2, r4
 8001652:	4935      	ldr	r1, [pc, #212]	; (8001728 <sendData+0x11c>)
 8001654:	a801      	add	r0, sp, #4
 8001656:	f002 fddf 	bl	8004218 <siprintf>
	  strcat(DATAcommand,data);
 800165a:	a901      	add	r1, sp, #4
 800165c:	a8fe      	add	r0, sp, #1016	; 0x3f8
 800165e:	f002 fdfb 	bl	8004258 <strcat>
	  strcat(DATAcommand,POSTmid);
 8001662:	a8fe      	add	r0, sp, #1016	; 0x3f8
 8001664:	f7fe fdb4 	bl	80001d0 <strlen>
 8001668:	4d30      	ldr	r5, [pc, #192]	; (800172c <sendData+0x120>)
 800166a:	abfe      	add	r3, sp, #1016	; 0x3f8
 800166c:	181c      	adds	r4, r3, r0
 800166e:	f105 0720 	add.w	r7, r5, #32
 8001672:	462e      	mov	r6, r5
 8001674:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001676:	6020      	str	r0, [r4, #0]
 8001678:	6061      	str	r1, [r4, #4]
 800167a:	60a2      	str	r2, [r4, #8]
 800167c:	60e3      	str	r3, [r4, #12]
 800167e:	4635      	mov	r5, r6
 8001680:	3410      	adds	r4, #16
 8001682:	42be      	cmp	r6, r7
 8001684:	d1f5      	bne.n	8001672 <sendData+0x66>
 8001686:	cd03      	ldmia	r5!, {r0, r1}
 8001688:	6020      	str	r0, [r4, #0]
 800168a:	6061      	str	r1, [r4, #4]
 800168c:	882b      	ldrh	r3, [r5, #0]
 800168e:	8123      	strh	r3, [r4, #8]
	  strcat(DATAcommand,payloadsensors);
 8001690:	4923      	ldr	r1, [pc, #140]	; (8001720 <sendData+0x114>)
 8001692:	a8fe      	add	r0, sp, #1016	; 0x3f8
 8001694:	f002 fde0 	bl	8004258 <strcat>
	  strcat(DATAcommand,POSTclose);
 8001698:	a8fe      	add	r0, sp, #1016	; 0x3f8
 800169a:	f7fe fd99 	bl	80001d0 <strlen>
 800169e:	4d24      	ldr	r5, [pc, #144]	; (8001730 <sendData+0x124>)
 80016a0:	abfe      	add	r3, sp, #1016	; 0x3f8
 80016a2:	181c      	adds	r4, r3, r0
 80016a4:	f105 0720 	add.w	r7, r5, #32
 80016a8:	462e      	mov	r6, r5
 80016aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016ac:	6020      	str	r0, [r4, #0]
 80016ae:	6061      	str	r1, [r4, #4]
 80016b0:	60a2      	str	r2, [r4, #8]
 80016b2:	60e3      	str	r3, [r4, #12]
 80016b4:	4635      	mov	r5, r6
 80016b6:	3410      	adds	r4, #16
 80016b8:	42be      	cmp	r6, r7
 80016ba:	d1f5      	bne.n	80016a8 <sendData+0x9c>
 80016bc:	cd07      	ldmia	r5!, {r0, r1, r2}
 80016be:	6020      	str	r0, [r4, #0]
 80016c0:	6061      	str	r1, [r4, #4]
 80016c2:	60a2      	str	r2, [r4, #8]
	  strcpy(DATAsend,TCPSENDcommand);
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <sendData+0x128>)
 80016c6:	9304      	str	r3, [sp, #16]
	  memset(data,0,sizeof(data));
 80016c8:	2400      	movs	r4, #0
 80016ca:	9401      	str	r4, [sp, #4]
 80016cc:	9402      	str	r4, [sp, #8]
 80016ce:	f8ad 400c 	strh.w	r4, [sp, #12]
	  sprintf(data,"%d",strlen(DATAcommand)-1);
 80016d2:	a8fe      	add	r0, sp, #1016	; 0x3f8
 80016d4:	f7fe fd7c 	bl	80001d0 <strlen>
 80016d8:	1e42      	subs	r2, r0, #1
 80016da:	4913      	ldr	r1, [pc, #76]	; (8001728 <sendData+0x11c>)
 80016dc:	a801      	add	r0, sp, #4
 80016de:	f002 fd9b 	bl	8004218 <siprintf>
	  strcat(DATAsend,data);
 80016e2:	a901      	add	r1, sp, #4
 80016e4:	a804      	add	r0, sp, #16
 80016e6:	f002 fdb7 	bl	8004258 <strcat>
	  strcat(DATAsend,DATAcommand);
 80016ea:	a9fe      	add	r1, sp, #1016	; 0x3f8
 80016ec:	a804      	add	r0, sp, #16
 80016ee:	f002 fdb3 	bl	8004258 <strcat>
	  sendCommand(DATAsend,strlen(DATAsend));
 80016f2:	a804      	add	r0, sp, #16
 80016f4:	f7fe fd6c 	bl	80001d0 <strlen>
 80016f8:	4601      	mov	r1, r0
 80016fa:	a804      	add	r0, sp, #16
 80016fc:	f7ff fe42 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*)CLOSETCPcommand, strlen(CLOSETCPcommand));
 8001700:	2106      	movs	r1, #6
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <sendData+0x12c>)
 8001704:	f7ff fe3e 	bl	8001384 <sendCommand>
	  HAL_Delay(TIME_INTERVAL);
 8001708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800170c:	f000 f88c 	bl	8001828 <HAL_Delay>
	  indexdata=0;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <sendData+0x130>)
 8001712:	60dc      	str	r4, [r3, #12]
	  indexsensor=0;
 8001714:	609c      	str	r4, [r3, #8]
}
 8001716:	f20d 7de4 	addw	sp, sp, #2020	; 0x7e4
 800171a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171c:	08006720 	.word	0x08006720
 8001720:	200008dc 	.word	0x200008dc
 8001724:	08006728 	.word	0x08006728
 8001728:	0800678c 	.word	0x0800678c
 800172c:	08006790 	.word	0x08006790
 8001730:	080067bc 	.word	0x080067bc
 8001734:	003d3353 	.word	0x003d3353
 8001738:	080067e8 	.word	0x080067e8
 800173c:	2000020c 	.word	0x2000020c

08001740 <startWifi>:

void startWifi(){
 8001740:	b508      	push	{r3, lr}
	  //let's set the wifi settings
	  sendCommand((uint8_t*) SSIDcommand,strlen(SSIDcommand));
 8001742:	2110      	movs	r1, #16
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <startWifi+0x3c>)
 8001746:	f7ff fe1d 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*) PSWcommand,strlen(PSWcommand));
 800174a:	210d      	movs	r1, #13
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <startWifi+0x40>)
 800174e:	f7ff fe19 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*) SECcommad,strlen(SECcommad));
 8001752:	2106      	movs	r1, #6
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <startWifi+0x44>)
 8001756:	f7ff fe15 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*) CONNECTcommand,strlen(CONNECTcommand));
 800175a:	2104      	movs	r1, #4
 800175c:	480a      	ldr	r0, [pc, #40]	; (8001788 <startWifi+0x48>)
 800175e:	f7ff fe11 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*)TCPcommand,strlen(TCPcommand));
 8001762:	2106      	movs	r1, #6
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <startWifi+0x4c>)
 8001766:	f7ff fe0d 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*)IPcommand, strlen(IPcommand));
 800176a:	2111      	movs	r1, #17
 800176c:	4808      	ldr	r0, [pc, #32]	; (8001790 <startWifi+0x50>)
 800176e:	f7ff fe09 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*)PORTcommand, strlen(PORTcommand));
 8001772:	210a      	movs	r1, #10
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <startWifi+0x54>)
 8001776:	f7ff fe05 	bl	8001384 <sendCommand>
}
 800177a:	bd08      	pop	{r3, pc}
 800177c:	080067f0 	.word	0x080067f0
 8001780:	08006804 	.word	0x08006804
 8001784:	08006814 	.word	0x08006814
 8001788:	0800681c 	.word	0x0800681c
 800178c:	08006824 	.word	0x08006824
 8001790:	0800682c 	.word	0x0800682c
 8001794:	08006840 	.word	0x08006840

08001798 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_InitTick+0x44>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b90b      	cbnz	r3, 80017a2 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800179e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80017a0:	4770      	bx	lr
{
 80017a2:	b510      	push	{r4, lr}
 80017a4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ae:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <HAL_InitTick+0x48>)
 80017b0:	6810      	ldr	r0, [r2, #0]
 80017b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80017b6:	f000 f89f 	bl	80018f8 <HAL_SYSTICK_Config>
 80017ba:	b968      	cbnz	r0, 80017d8 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017bc:	2c0f      	cmp	r4, #15
 80017be:	d901      	bls.n	80017c4 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
 80017c2:	e00a      	b.n	80017da <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	4621      	mov	r1, r4
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f852 	bl	8001874 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <HAL_InitTick+0x44>)
 80017d2:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017d4:	2000      	movs	r0, #0
 80017d6:	e000      	b.n	80017da <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80017d8:	2001      	movs	r0, #1
}
 80017da:	bd10      	pop	{r4, pc}
 80017dc:	20000010 	.word	0x20000010
 80017e0:	20000000 	.word	0x20000000

080017e4 <HAL_Init>:
{
 80017e4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e6:	2003      	movs	r0, #3
 80017e8:	f000 f832 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff ffd3 	bl	8001798 <HAL_InitTick>
 80017f2:	b110      	cbz	r0, 80017fa <HAL_Init+0x16>
    status = HAL_ERROR;
 80017f4:	2401      	movs	r4, #1
}
 80017f6:	4620      	mov	r0, r4
 80017f8:	bd10      	pop	{r4, pc}
 80017fa:	4604      	mov	r4, r0
    HAL_MspInit();
 80017fc:	f7ff fc32 	bl	8001064 <HAL_MspInit>
 8001800:	e7f9      	b.n	80017f6 <HAL_Init+0x12>
	...

08001804 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_IncTick+0x10>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4a03      	ldr	r2, [pc, #12]	; (8001818 <HAL_IncTick+0x14>)
 800180a:	6811      	ldr	r1, [r2, #0]
 800180c:	440b      	add	r3, r1
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000010 	.word	0x20000010
 8001818:	200010ac 	.word	0x200010ac

0800181c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800181c:	4b01      	ldr	r3, [pc, #4]	; (8001824 <HAL_GetTick+0x8>)
 800181e:	6818      	ldr	r0, [r3, #0]
}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	200010ac 	.word	0x200010ac

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b538      	push	{r3, r4, r5, lr}
 800182a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff fff6 	bl	800181c <HAL_GetTick>
 8001830:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001836:	d002      	beq.n	800183e <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_Delay+0x24>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183e:	f7ff ffed 	bl	800181c <HAL_GetTick>
 8001842:	1b40      	subs	r0, r0, r5
 8001844:	42a0      	cmp	r0, r4
 8001846:	d3fa      	bcc.n	800183e <HAL_Delay+0x16>
  {
  }
}
 8001848:	bd38      	pop	{r3, r4, r5, pc}
 800184a:	bf00      	nop
 800184c:	20000010 	.word	0x20000010

08001850 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001852:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001854:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001858:	041b      	lsls	r3, r3, #16
 800185a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	0200      	lsls	r0, r0, #8
 800185e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001862:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800186c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_NVIC_SetPriority+0x60>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187e:	f1c3 0407 	rsb	r4, r3, #7
 8001882:	2c04      	cmp	r4, #4
 8001884:	bf28      	it	cs
 8001886:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001888:	1d1d      	adds	r5, r3, #4
 800188a:	2d06      	cmp	r5, #6
 800188c:	d918      	bls.n	80018c0 <HAL_NVIC_SetPriority+0x4c>
 800188e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 35ff 	mov.w	r5, #4294967295
 8001894:	fa05 f404 	lsl.w	r4, r5, r4
 8001898:	ea21 0104 	bic.w	r1, r1, r4
 800189c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189e:	fa05 f303 	lsl.w	r3, r5, r3
 80018a2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80018a8:	2800      	cmp	r0, #0
 80018aa:	db0b      	blt.n	80018c4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	0109      	lsls	r1, r1, #4
 80018ae:	b2c9      	uxtb	r1, r1
 80018b0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018b4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018b8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018bc:	bc30      	pop	{r4, r5}
 80018be:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c0:	2300      	movs	r3, #0
 80018c2:	e7e5      	b.n	8001890 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	f000 000f 	and.w	r0, r0, #15
 80018c8:	0109      	lsls	r1, r1, #4
 80018ca:	b2c9      	uxtb	r1, r1
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <HAL_NVIC_SetPriority+0x64>)
 80018ce:	5419      	strb	r1, [r3, r0]
 80018d0:	e7f4      	b.n	80018bc <HAL_NVIC_SetPriority+0x48>
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00
 80018d8:	e000ed14 	.word	0xe000ed14

080018dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80018dc:	2800      	cmp	r0, #0
 80018de:	db07      	blt.n	80018f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e0:	f000 021f 	and.w	r2, r0, #31
 80018e4:	0940      	lsrs	r0, r0, #5
 80018e6:	2301      	movs	r3, #1
 80018e8:	4093      	lsls	r3, r2
 80018ea:	4a02      	ldr	r2, [pc, #8]	; (80018f4 <HAL_NVIC_EnableIRQ+0x18>)
 80018ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	3801      	subs	r0, #1
 80018fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018fe:	d20a      	bcs.n	8001916 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_SYSTICK_Config+0x24>)
 8001902:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_SYSTICK_Config+0x28>)
 8001906:	21f0      	movs	r1, #240	; 0xf0
 8001908:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	2000      	movs	r0, #0
 800190e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001926:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001928:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	e03f      	b.n	80019ac <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800192c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800192e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001932:	f3c5 04c0 	ubfx	r4, r5, #3, #1
 8001936:	409c      	lsls	r4, r3
 8001938:	4334      	orrs	r4, r6
        GPIOx->ASCR = temp;
 800193a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800193c:	e05f      	b.n	80019fe <HAL_GPIO_Init+0xda>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800193e:	2406      	movs	r4, #6
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x20>
 8001942:	2400      	movs	r4, #0
 8001944:	40b4      	lsls	r4, r6
 8001946:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001948:	3502      	adds	r5, #2
 800194a:	4e65      	ldr	r6, [pc, #404]	; (8001ae0 <HAL_GPIO_Init+0x1bc>)
 800194c:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001950:	4c64      	ldr	r4, [pc, #400]	; (8001ae4 <HAL_GPIO_Init+0x1c0>)
 8001952:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001954:	43d4      	mvns	r4, r2
 8001956:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195a:	684f      	ldr	r7, [r1, #4]
 800195c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001960:	d001      	beq.n	8001966 <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 8001962:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001966:	4d5f      	ldr	r5, [pc, #380]	; (8001ae4 <HAL_GPIO_Init+0x1c0>)
 8001968:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 800196a:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800196c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001970:	684f      	ldr	r7, [r1, #4]
 8001972:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001976:	d001      	beq.n	800197c <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8001978:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800197c:	4d59      	ldr	r5, [pc, #356]	; (8001ae4 <HAL_GPIO_Init+0x1c0>)
 800197e:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001980:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001982:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001986:	684f      	ldr	r7, [r1, #4]
 8001988:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800198c:	d001      	beq.n	8001992 <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 800198e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001992:	4d54      	ldr	r5, [pc, #336]	; (8001ae4 <HAL_GPIO_Init+0x1c0>)
 8001994:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001996:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001998:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800199a:	684e      	ldr	r6, [r1, #4]
 800199c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80019a0:	d001      	beq.n	80019a6 <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 80019a2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80019a6:	4a4f      	ldr	r2, [pc, #316]	; (8001ae4 <HAL_GPIO_Init+0x1c0>)
 80019a8:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80019aa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ac:	680a      	ldr	r2, [r1, #0]
 80019ae:	fa32 f403 	lsrs.w	r4, r2, r3
 80019b2:	f000 8092 	beq.w	8001ada <HAL_GPIO_Init+0x1b6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b6:	2401      	movs	r4, #1
 80019b8:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80019ba:	4022      	ands	r2, r4
 80019bc:	d0f5      	beq.n	80019aa <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019be:	684d      	ldr	r5, [r1, #4]
 80019c0:	1e6e      	subs	r6, r5, #1
 80019c2:	2e01      	cmp	r6, #1
 80019c4:	d903      	bls.n	80019ce <HAL_GPIO_Init+0xaa>
 80019c6:	2d11      	cmp	r5, #17
 80019c8:	d001      	beq.n	80019ce <HAL_GPIO_Init+0xaa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ca:	2d12      	cmp	r5, #18
 80019cc:	d112      	bne.n	80019f4 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->OSPEEDR;
 80019ce:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019d0:	005f      	lsls	r7, r3, #1
 80019d2:	2503      	movs	r5, #3
 80019d4:	40bd      	lsls	r5, r7
 80019d6:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019da:	68cd      	ldr	r5, [r1, #12]
 80019dc:	40bd      	lsls	r5, r7
 80019de:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80019e0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80019e2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019e4:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019e8:	684d      	ldr	r5, [r1, #4]
 80019ea:	f3c5 1500 	ubfx	r5, r5, #4, #1
 80019ee:	409d      	lsls	r5, r3
 80019f0:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80019f2:	6045      	str	r5, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019f4:	684d      	ldr	r5, [r1, #4]
 80019f6:	f005 0603 	and.w	r6, r5, #3
 80019fa:	2e03      	cmp	r6, #3
 80019fc:	d096      	beq.n	800192c <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 80019fe:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a00:	005e      	lsls	r6, r3, #1
 8001a02:	2503      	movs	r5, #3
 8001a04:	40b5      	lsls	r5, r6
 8001a06:	43ec      	mvns	r4, r5
 8001a08:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a0c:	688d      	ldr	r5, [r1, #8]
 8001a0e:	40b5      	lsls	r5, r6
 8001a10:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001a12:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a14:	684d      	ldr	r5, [r1, #4]
 8001a16:	2d02      	cmp	r5, #2
 8001a18:	d001      	beq.n	8001a1e <HAL_GPIO_Init+0xfa>
 8001a1a:	2d12      	cmp	r5, #18
 8001a1c:	d113      	bne.n	8001a46 <HAL_GPIO_Init+0x122>
        temp = GPIOx->AFR[position >> 3u];
 8001a1e:	08df      	lsrs	r7, r3, #3
 8001a20:	3708      	adds	r7, #8
 8001a22:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a26:	f003 0507 	and.w	r5, r3, #7
 8001a2a:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8001a2e:	250f      	movs	r5, #15
 8001a30:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a34:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a38:	690d      	ldr	r5, [r1, #16]
 8001a3a:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a3e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001a42:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8001a46:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a48:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a4a:	684c      	ldr	r4, [r1, #4]
 8001a4c:	f004 0403 	and.w	r4, r4, #3
 8001a50:	40b4      	lsls	r4, r6
 8001a52:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001a54:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a56:	684c      	ldr	r4, [r1, #4]
 8001a58:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001a5c:	d0a5      	beq.n	80019aa <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	4c22      	ldr	r4, [pc, #136]	; (8001ae8 <HAL_GPIO_Init+0x1c4>)
 8001a60:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001a62:	f045 0501 	orr.w	r5, r5, #1
 8001a66:	6625      	str	r5, [r4, #96]	; 0x60
 8001a68:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8001a6a:	f004 0401 	and.w	r4, r4, #1
 8001a6e:	9401      	str	r4, [sp, #4]
 8001a70:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a72:	089d      	lsrs	r5, r3, #2
 8001a74:	1cae      	adds	r6, r5, #2
 8001a76:	4c1a      	ldr	r4, [pc, #104]	; (8001ae0 <HAL_GPIO_Init+0x1bc>)
 8001a78:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a7c:	f003 0403 	and.w	r4, r3, #3
 8001a80:	00a6      	lsls	r6, r4, #2
 8001a82:	240f      	movs	r4, #15
 8001a84:	40b4      	lsls	r4, r6
 8001a86:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a8a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001a8e:	f43f af58 	beq.w	8001942 <HAL_GPIO_Init+0x1e>
 8001a92:	4c16      	ldr	r4, [pc, #88]	; (8001aec <HAL_GPIO_Init+0x1c8>)
 8001a94:	42a0      	cmp	r0, r4
 8001a96:	d016      	beq.n	8001ac6 <HAL_GPIO_Init+0x1a2>
 8001a98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001a9c:	42a0      	cmp	r0, r4
 8001a9e:	d014      	beq.n	8001aca <HAL_GPIO_Init+0x1a6>
 8001aa0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001aa4:	42a0      	cmp	r0, r4
 8001aa6:	d012      	beq.n	8001ace <HAL_GPIO_Init+0x1aa>
 8001aa8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001aac:	42a0      	cmp	r0, r4
 8001aae:	d010      	beq.n	8001ad2 <HAL_GPIO_Init+0x1ae>
 8001ab0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ab4:	42a0      	cmp	r0, r4
 8001ab6:	d00e      	beq.n	8001ad6 <HAL_GPIO_Init+0x1b2>
 8001ab8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001abc:	42a0      	cmp	r0, r4
 8001abe:	f43f af3e 	beq.w	800193e <HAL_GPIO_Init+0x1a>
 8001ac2:	2407      	movs	r4, #7
 8001ac4:	e73e      	b.n	8001944 <HAL_GPIO_Init+0x20>
 8001ac6:	2401      	movs	r4, #1
 8001ac8:	e73c      	b.n	8001944 <HAL_GPIO_Init+0x20>
 8001aca:	2402      	movs	r4, #2
 8001acc:	e73a      	b.n	8001944 <HAL_GPIO_Init+0x20>
 8001ace:	2403      	movs	r4, #3
 8001ad0:	e738      	b.n	8001944 <HAL_GPIO_Init+0x20>
 8001ad2:	2404      	movs	r4, #4
 8001ad4:	e736      	b.n	8001944 <HAL_GPIO_Init+0x20>
 8001ad6:	2405      	movs	r4, #5
 8001ad8:	e734      	b.n	8001944 <HAL_GPIO_Init+0x20>
  }
}
 8001ada:	b003      	add	sp, #12
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40010400 	.word	0x40010400
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	48000400 	.word	0x48000400

08001af0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001af0:	6903      	ldr	r3, [r0, #16]
 8001af2:	4219      	tst	r1, r3
 8001af4:	d001      	beq.n	8001afa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001af6:	2001      	movs	r0, #1
 8001af8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001afa:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001afc:	4770      	bx	lr

08001afe <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001afe:	b10a      	cbz	r2, 8001b04 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b00:	6181      	str	r1, [r0, #24]
 8001b02:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b04:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b08:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b0a:	ea01 0203 	and.w	r2, r1, r3
 8001b0e:	ea21 0103 	bic.w	r1, r1, r3
 8001b12:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b16:	6181      	str	r1, [r0, #24]
}
 8001b18:	4770      	bx	lr

08001b1a <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_GPIO_EXTI_IRQHandler>:
{
 8001b1c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4203      	tst	r3, r0
 8001b24:	d100      	bne.n	8001b28 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8001b26:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b28:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001b2a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b2c:	f7ff fff5 	bl	8001b1a <HAL_GPIO_EXTI_Callback>
}
 8001b30:	e7f9      	b.n	8001b26 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001b32:	bf00      	nop
 8001b34:	40010400 	.word	0x40010400

08001b38 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b38:	6803      	ldr	r3, [r0, #0]
 8001b3a:	699a      	ldr	r2, [r3, #24]
 8001b3c:	f012 0f02 	tst.w	r2, #2
 8001b40:	d001      	beq.n	8001b46 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b42:	2200      	movs	r2, #0
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b46:	6803      	ldr	r3, [r0, #0]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	f012 0f01 	tst.w	r2, #1
 8001b4e:	d103      	bne.n	8001b58 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	619a      	str	r2, [r3, #24]
  }
}
 8001b58:	4770      	bx	lr

08001b5a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b5a:	b470      	push	{r4, r5, r6}
 8001b5c:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b5e:	6805      	ldr	r5, [r0, #0]
 8001b60:	6868      	ldr	r0, [r5, #4]
 8001b62:	0d74      	lsrs	r4, r6, #21
 8001b64:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001b68:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001b6c:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001b70:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001b74:	f044 0403 	orr.w	r4, r4, #3
 8001b78:	ea20 0004 	bic.w	r0, r0, r4
 8001b7c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001b80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b84:	4319      	orrs	r1, r3
 8001b86:	4331      	orrs	r1, r6
 8001b88:	4301      	orrs	r1, r0
 8001b8a:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b8c:	bc70      	pop	{r4, r5, r6}
 8001b8e:	4770      	bx	lr

08001b90 <I2C_IsAcknowledgeFailed>:
{
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b92:	4605      	mov	r5, r0
 8001b94:	460e      	mov	r6, r1
 8001b96:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b98:	6803      	ldr	r3, [r0, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f013 0f10 	tst.w	r3, #16
 8001ba0:	d101      	bne.n	8001ba6 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8001ba2:	2000      	movs	r0, #0
}
 8001ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ba6:	682b      	ldr	r3, [r5, #0]
 8001ba8:	699c      	ldr	r4, [r3, #24]
 8001baa:	f014 0f20 	tst.w	r4, #32
 8001bae:	d117      	bne.n	8001be0 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8001bb0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001bb4:	d0f7      	beq.n	8001ba6 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7ff fe31 	bl	800181c <HAL_GetTick>
 8001bba:	1bc0      	subs	r0, r0, r7
 8001bbc:	42b0      	cmp	r0, r6
 8001bbe:	d801      	bhi.n	8001bc4 <I2C_IsAcknowledgeFailed+0x34>
 8001bc0:	2e00      	cmp	r6, #0
 8001bc2:	d1f0      	bne.n	8001ba6 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001bc6:	f043 0320 	orr.w	r3, r3, #32
 8001bca:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001bd8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
 8001bde:	e7e1      	b.n	8001ba4 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001be0:	2210      	movs	r2, #16
 8001be2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	2420      	movs	r4, #32
 8001be8:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001bea:	4628      	mov	r0, r5
 8001bec:	f7ff ffa4 	bl	8001b38 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001bf0:	682a      	ldr	r2, [r5, #0]
 8001bf2:	6853      	ldr	r3, [r2, #4]
 8001bf4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001bf8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001bfc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c06:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c0e:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001c18:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	e7c1      	b.n	8001ba4 <I2C_IsAcknowledgeFailed+0x14>

08001c20 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	4604      	mov	r4, r0
 8001c24:	460d      	mov	r5, r1
 8001c26:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f013 0f02 	tst.w	r3, #2
 8001c30:	d11d      	bne.n	8001c6e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c32:	4632      	mov	r2, r6
 8001c34:	4629      	mov	r1, r5
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff ffaa 	bl	8001b90 <I2C_IsAcknowledgeFailed>
 8001c3c:	b9c8      	cbnz	r0, 8001c72 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001c3e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c42:	d0f1      	beq.n	8001c28 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c44:	f7ff fdea 	bl	800181c <HAL_GetTick>
 8001c48:	1b80      	subs	r0, r0, r6
 8001c4a:	42a8      	cmp	r0, r5
 8001c4c:	d801      	bhi.n	8001c52 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001c4e:	2d00      	cmp	r5, #0
 8001c50:	d1ea      	bne.n	8001c28 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c54:	f043 0320 	orr.w	r3, r3, #32
 8001c58:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001c66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	e000      	b.n	8001c70 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001c6e:	2000      	movs	r0, #0
}
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001c72:	2001      	movs	r0, #1
 8001c74:	e7fc      	b.n	8001c70 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08001c76 <I2C_WaitOnFlagUntilTimeout>:
{
 8001c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7a:	4606      	mov	r6, r0
 8001c7c:	4688      	mov	r8, r1
 8001c7e:	4617      	mov	r7, r2
 8001c80:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c82:	6834      	ldr	r4, [r6, #0]
 8001c84:	69a4      	ldr	r4, [r4, #24]
 8001c86:	ea38 0304 	bics.w	r3, r8, r4
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2401      	moveq	r4, #1
 8001c8e:	2400      	movne	r4, #0
 8001c90:	42bc      	cmp	r4, r7
 8001c92:	d118      	bne.n	8001cc6 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001c94:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c98:	d0f3      	beq.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c9a:	f7ff fdbf 	bl	800181c <HAL_GetTick>
 8001c9e:	9b06      	ldr	r3, [sp, #24]
 8001ca0:	1ac0      	subs	r0, r0, r3
 8001ca2:	42a8      	cmp	r0, r5
 8001ca4:	d801      	bhi.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x34>
 8001ca6:	2d00      	cmp	r5, #0
 8001ca8:	d1eb      	bne.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001caa:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001cbe:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	e000      	b.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8001cc6:	2000      	movs	r0, #0
}
 8001cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	4605      	mov	r5, r0
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f013 0f20 	tst.w	r3, #32
 8001cdc:	d11a      	bne.n	8001d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cde:	4632      	mov	r2, r6
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	f7ff ff54 	bl	8001b90 <I2C_IsAcknowledgeFailed>
 8001ce8:	b9b0      	cbnz	r0, 8001d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cea:	f7ff fd97 	bl	800181c <HAL_GetTick>
 8001cee:	1b80      	subs	r0, r0, r6
 8001cf0:	42a0      	cmp	r0, r4
 8001cf2:	d801      	bhi.n	8001cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001cf4:	2c00      	cmp	r4, #0
 8001cf6:	d1ed      	bne.n	8001cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001cfa:	f043 0320 	orr.w	r3, r3, #32
 8001cfe:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	2320      	movs	r3, #32
 8001d02:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d0c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
}
 8001d12:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001d14:	2000      	movs	r0, #0
 8001d16:	e7fc      	b.n	8001d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001d18:	2001      	movs	r0, #1
 8001d1a:	e7fa      	b.n	8001d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08001d1c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001d1c:	b570      	push	{r4, r5, r6, lr}
 8001d1e:	4604      	mov	r4, r0
 8001d20:	460d      	mov	r5, r1
 8001d22:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f013 0f04 	tst.w	r3, #4
 8001d2c:	d13e      	bne.n	8001dac <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d2e:	4632      	mov	r2, r6
 8001d30:	4629      	mov	r1, r5
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff ff2c 	bl	8001b90 <I2C_IsAcknowledgeFailed>
 8001d38:	4601      	mov	r1, r0
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d138      	bne.n	8001db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	f012 0f20 	tst.w	r2, #32
 8001d46:	d113      	bne.n	8001d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d48:	f7ff fd68 	bl	800181c <HAL_GetTick>
 8001d4c:	1b80      	subs	r0, r0, r6
 8001d4e:	42a8      	cmp	r0, r5
 8001d50:	d801      	bhi.n	8001d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8001d52:	2d00      	cmp	r5, #0
 8001d54:	d1e6      	bne.n	8001d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	2320      	movs	r3, #32
 8001d60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001d64:	2300      	movs	r3, #0
 8001d66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001d6a:	2101      	movs	r1, #1
}
 8001d6c:	4608      	mov	r0, r1
 8001d6e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	f012 0f04 	tst.w	r2, #4
 8001d76:	d002      	beq.n	8001d7e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001d78:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001d7a:	2a00      	cmp	r2, #0
 8001d7c:	d1f6      	bne.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7e:	2220      	movs	r2, #32
 8001d80:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001d82:	6821      	ldr	r1, [r4, #0]
 8001d84:	684b      	ldr	r3, [r1, #4]
 8001d86:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001d8a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001d8e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d9c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001da4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001da8:	2101      	movs	r1, #1
 8001daa:	e7df      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8001dac:	2100      	movs	r1, #0
 8001dae:	e7dd      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8001db0:	2101      	movs	r1, #1
 8001db2:	e7db      	b.n	8001d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08001db4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001db4:	2800      	cmp	r0, #0
 8001db6:	d059      	beq.n	8001e6c <HAL_I2C_Init+0xb8>
{
 8001db8:	b510      	push	{r4, lr}
 8001dba:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d043      	beq.n	8001e4c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc4:	2324      	movs	r3, #36	; 0x24
 8001dc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	6813      	ldr	r3, [r2, #0]
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dd4:	6863      	ldr	r3, [r4, #4]
 8001dd6:	6822      	ldr	r2, [r4, #0]
 8001dd8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001ddc:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dde:	6822      	ldr	r2, [r4, #0]
 8001de0:	6893      	ldr	r3, [r2, #8]
 8001de2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001de6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de8:	68e3      	ldr	r3, [r4, #12]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d033      	beq.n	8001e56 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dee:	68a3      	ldr	r3, [r4, #8]
 8001df0:	6822      	ldr	r2, [r4, #0]
 8001df2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001df6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001df8:	68e3      	ldr	r3, [r4, #12]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d031      	beq.n	8001e62 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dfe:	6822      	ldr	r2, [r4, #0]
 8001e00:	6853      	ldr	r3, [r2, #4]
 8001e02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	68d3      	ldr	r3, [r2, #12]
 8001e10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e14:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e16:	6923      	ldr	r3, [r4, #16]
 8001e18:	6962      	ldr	r2, [r4, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	69a1      	ldr	r1, [r4, #24]
 8001e1e:	6822      	ldr	r2, [r4, #0]
 8001e20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e24:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e26:	69e3      	ldr	r3, [r4, #28]
 8001e28:	6a21      	ldr	r1, [r4, #32]
 8001e2a:	6822      	ldr	r2, [r4, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001e30:	6822      	ldr	r2, [r4, #0]
 8001e32:	6813      	ldr	r3, [r2, #0]
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e44:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e46:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001e4a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001e4c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001e50:	f7ff f920 	bl	8001094 <HAL_I2C_MspInit>
 8001e54:	e7b6      	b.n	8001dc4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e56:	68a3      	ldr	r3, [r4, #8]
 8001e58:	6822      	ldr	r2, [r4, #0]
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5e:	6093      	str	r3, [r2, #8]
 8001e60:	e7ca      	b.n	8001df8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	e7c8      	b.n	8001dfe <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001e6c:	2001      	movs	r0, #1
}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_I2C_Master_Transmit>:
{
 8001e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	460f      	mov	r7, r1
 8001e78:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001e7e:	b2c9      	uxtb	r1, r1
 8001e80:	2920      	cmp	r1, #32
 8001e82:	f040 80a3 	bne.w	8001fcc <HAL_I2C_Master_Transmit+0x15c>
 8001e86:	4604      	mov	r4, r0
 8001e88:	4690      	mov	r8, r2
 8001e8a:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8001e8c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	f000 809f 	beq.w	8001fd4 <HAL_I2C_Master_Transmit+0x164>
 8001e96:	f04f 0a01 	mov.w	sl, #1
 8001e9a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001e9e:	f7ff fcbd 	bl	800181c <HAL_GetTick>
 8001ea2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ea4:	9000      	str	r0, [sp, #0]
 8001ea6:	2319      	movs	r3, #25
 8001ea8:	4652      	mov	r2, sl
 8001eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff fee1 	bl	8001c76 <I2C_WaitOnFlagUntilTimeout>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	f040 808f 	bne.w	8001fd8 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eba:	2321      	movs	r3, #33	; 0x21
 8001ebc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ec0:	2310      	movs	r3, #16
 8001ec2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001eca:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ece:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ed2:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ed4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2bff      	cmp	r3, #255	; 0xff
 8001eda:	d90a      	bls.n	8001ef2 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001edc:	22ff      	movs	r2, #255	; 0xff
 8001ede:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ee0:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <HAL_I2C_Master_Transmit+0x178>)
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ee8:	4639      	mov	r1, r7
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff fe35 	bl	8001b5a <I2C_TransferConfig>
 8001ef0:	e018      	b.n	8001f24 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8001ef2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	; (8001fe8 <HAL_I2C_Master_Transmit+0x178>)
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	4639      	mov	r1, r7
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7ff fe28 	bl	8001b5a <I2C_TransferConfig>
 8001f0a:	e00b      	b.n	8001f24 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8001f0c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f0e:	b292      	uxth	r2, r2
 8001f10:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f12:	2300      	movs	r3, #0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	4639      	mov	r1, r7
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff fe1b 	bl	8001b5a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d033      	beq.n	8001f94 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2c:	462a      	mov	r2, r5
 8001f2e:	4631      	mov	r1, r6
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff fe75 	bl	8001c20 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d150      	bne.n	8001fdc <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f44:	3301      	adds	r3, #1
 8001f46:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001f48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f5c:	b292      	uxth	r2, r2
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	d0e0      	beq.n	8001f24 <HAL_I2C_Master_Transmit+0xb4>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1de      	bne.n	8001f24 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f66:	9500      	str	r5, [sp, #0]
 8001f68:	4633      	mov	r3, r6
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f7ff fe81 	bl	8001c76 <I2C_WaitOnFlagUntilTimeout>
 8001f74:	bba0      	cbnz	r0, 8001fe0 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2bff      	cmp	r3, #255	; 0xff
 8001f7c:	d9c6      	bls.n	8001f0c <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f7e:	22ff      	movs	r2, #255	; 0xff
 8001f80:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f82:	2300      	movs	r3, #0
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f8a:	4639      	mov	r1, r7
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff fde4 	bl	8001b5a <I2C_TransferConfig>
 8001f92:	e7c7      	b.n	8001f24 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f94:	462a      	mov	r2, r5
 8001f96:	4631      	mov	r1, r6
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff fe97 	bl	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f9e:	bb08      	cbnz	r0, 8001fe4 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001fa6:	6821      	ldr	r1, [r4, #0]
 8001fa8:	684b      	ldr	r3, [r1, #4]
 8001faa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001fae:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001fb2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001fc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001fca:	e000      	b.n	8001fce <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8001fcc:	2002      	movs	r0, #2
}
 8001fce:	b002      	add	sp, #8
 8001fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	e7fa      	b.n	8001fce <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8001fd8:	2001      	movs	r0, #1
 8001fda:	e7f8      	b.n	8001fce <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
 8001fde:	e7f6      	b.n	8001fce <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	e7f4      	b.n	8001fce <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	e7f2      	b.n	8001fce <HAL_I2C_Master_Transmit+0x15e>
 8001fe8:	80002000 	.word	0x80002000

08001fec <HAL_I2C_Master_Receive>:
{
 8001fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	460f      	mov	r7, r1
 8001ff4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001ffa:	b2c9      	uxtb	r1, r1
 8001ffc:	2920      	cmp	r1, #32
 8001ffe:	f040 80a2 	bne.w	8002146 <HAL_I2C_Master_Receive+0x15a>
 8002002:	4604      	mov	r4, r0
 8002004:	4690      	mov	r8, r2
 8002006:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002008:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800200c:	2b01      	cmp	r3, #1
 800200e:	f000 809e 	beq.w	800214e <HAL_I2C_Master_Receive+0x162>
 8002012:	f04f 0a01 	mov.w	sl, #1
 8002016:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800201a:	f7ff fbff 	bl	800181c <HAL_GetTick>
 800201e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002020:	9000      	str	r0, [sp, #0]
 8002022:	2319      	movs	r3, #25
 8002024:	4652      	mov	r2, sl
 8002026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff fe23 	bl	8001c76 <I2C_WaitOnFlagUntilTimeout>
 8002030:	2800      	cmp	r0, #0
 8002032:	f040 808e 	bne.w	8002152 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002036:	2322      	movs	r3, #34	; 0x22
 8002038:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800203c:	2310      	movs	r3, #16
 800203e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002042:	2300      	movs	r3, #0
 8002044:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002046:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800204a:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800204e:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002050:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002052:	b29b      	uxth	r3, r3
 8002054:	2bff      	cmp	r3, #255	; 0xff
 8002056:	d90a      	bls.n	800206e <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800205c:	4b41      	ldr	r3, [pc, #260]	; (8002164 <HAL_I2C_Master_Receive+0x178>)
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002064:	4639      	mov	r1, r7
 8002066:	4620      	mov	r0, r4
 8002068:	f7ff fd77 	bl	8001b5a <I2C_TransferConfig>
 800206c:	e018      	b.n	80020a0 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800206e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002070:	b292      	uxth	r2, r2
 8002072:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002074:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_I2C_Master_Receive+0x178>)
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	4639      	mov	r1, r7
 8002080:	4620      	mov	r0, r4
 8002082:	f7ff fd6a 	bl	8001b5a <I2C_TransferConfig>
 8002086:	e00b      	b.n	80020a0 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8002088:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800208a:	b292      	uxth	r2, r2
 800208c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800208e:	2300      	movs	r3, #0
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	4639      	mov	r1, r7
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff fd5d 	bl	8001b5a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d032      	beq.n	800210e <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a8:	462a      	mov	r2, r5
 80020aa:	4631      	mov	r1, r6
 80020ac:	4620      	mov	r0, r4
 80020ae:	f7ff fe35 	bl	8001d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d14f      	bne.n	8002156 <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020bc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80020be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020c0:	3301      	adds	r3, #1
 80020c2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80020c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80020c6:	3a01      	subs	r2, #1
 80020c8:	b292      	uxth	r2, r2
 80020ca:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80020cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0e0      	beq.n	80020a0 <HAL_I2C_Master_Receive+0xb4>
 80020de:	2a00      	cmp	r2, #0
 80020e0:	d1de      	bne.n	80020a0 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020e2:	9500      	str	r5, [sp, #0]
 80020e4:	4633      	mov	r3, r6
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	4620      	mov	r0, r4
 80020ea:	f7ff fdc4 	bl	8001c76 <I2C_WaitOnFlagUntilTimeout>
 80020ee:	bba0      	cbnz	r0, 800215a <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2bff      	cmp	r3, #255	; 0xff
 80020f6:	d9c7      	bls.n	8002088 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f8:	22ff      	movs	r2, #255	; 0xff
 80020fa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020fc:	2300      	movs	r3, #0
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002104:	4639      	mov	r1, r7
 8002106:	4620      	mov	r0, r4
 8002108:	f7ff fd27 	bl	8001b5a <I2C_TransferConfig>
 800210c:	e7c8      	b.n	80020a0 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210e:	462a      	mov	r2, r5
 8002110:	4631      	mov	r1, r6
 8002112:	4620      	mov	r0, r4
 8002114:	f7ff fdda 	bl	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002118:	bb08      	cbnz	r0, 800215e <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	2220      	movs	r2, #32
 800211e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002120:	6821      	ldr	r1, [r4, #0]
 8002122:	684b      	ldr	r3, [r1, #4]
 8002124:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002128:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800212c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002136:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800213a:	2300      	movs	r3, #0
 800213c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002140:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002144:	e000      	b.n	8002148 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 8002146:	2002      	movs	r0, #2
}
 8002148:	b002      	add	sp, #8
 800214a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800214e:	2002      	movs	r0, #2
 8002150:	e7fa      	b.n	8002148 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8002152:	2001      	movs	r0, #1
 8002154:	e7f8      	b.n	8002148 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 8002156:	2001      	movs	r0, #1
 8002158:	e7f6      	b.n	8002148 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 800215a:	2001      	movs	r0, #1
 800215c:	e7f4      	b.n	8002148 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800215e:	2001      	movs	r0, #1
 8002160:	e7f2      	b.n	8002148 <HAL_I2C_Master_Receive+0x15c>
 8002162:	bf00      	nop
 8002164:	80002400 	.word	0x80002400

08002168 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002168:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b20      	cmp	r3, #32
 8002170:	d124      	bne.n	80021bc <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002176:	2b01      	cmp	r3, #1
 8002178:	d022      	beq.n	80021c0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800217a:	2301      	movs	r3, #1
 800217c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002180:	2324      	movs	r3, #36	; 0x24
 8002182:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002186:	6802      	ldr	r2, [r0, #0]
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002190:	6802      	ldr	r2, [r0, #0]
 8002192:	6813      	ldr	r3, [r2, #0]
 8002194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002198:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800219a:	6802      	ldr	r2, [r0, #0]
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	4319      	orrs	r1, r3
 80021a0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021a2:	6802      	ldr	r2, [r0, #0]
 80021a4:	6813      	ldr	r3, [r2, #0]
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	2320      	movs	r3, #32
 80021ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b2:	2300      	movs	r3, #0
 80021b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80021b8:	4618      	mov	r0, r3
 80021ba:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80021bc:	2002      	movs	r0, #2
 80021be:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80021c0:	2002      	movs	r0, #2
  }
}
 80021c2:	4770      	bx	lr

080021c4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d122      	bne.n	8002214 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d020      	beq.n	8002218 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80021d6:	2301      	movs	r3, #1
 80021d8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021dc:	2324      	movs	r3, #36	; 0x24
 80021de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021e2:	6802      	ldr	r2, [r0, #0]
 80021e4:	6813      	ldr	r3, [r2, #0]
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021ec:	6802      	ldr	r2, [r0, #0]
 80021ee:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021f4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021f8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021fa:	6802      	ldr	r2, [r0, #0]
 80021fc:	6813      	ldr	r3, [r2, #0]
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002204:	2320      	movs	r3, #32
 8002206:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220a:	2300      	movs	r3, #0
 800220c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002210:	4618      	mov	r0, r3
 8002212:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002214:	2002      	movs	r0, #2
 8002216:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002218:	2002      	movs	r0, #2
  }
}
 800221a:	4770      	bx	lr

0800221c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <HAL_PWREx_GetVoltageRange+0xc>)
 800221e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002220:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40007000 	.word	0x40007000

0800222c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800222c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002230:	d00f      	beq.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800223a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223e:	d034      	beq.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002240:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002242:	6813      	ldr	r3, [r2, #0]
 8002244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002248:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800224e:	2000      	movs	r0, #0
 8002250:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800225a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800225e:	d020      	beq.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002260:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	2332      	movs	r3, #50	; 0x32
 8002274:	fb03 f302 	mul.w	r3, r3, r2
 8002278:	4a0f      	ldr	r2, [pc, #60]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0c9b      	lsrs	r3, r3, #18
 8002280:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002282:	e000      	b.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8002284:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002288:	6952      	ldr	r2, [r2, #20]
 800228a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800228e:	d001      	beq.n	8002294 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f7      	bne.n	8002284 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800229c:	d103      	bne.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800229e:	2000      	movs	r0, #0
 80022a0:	4770      	bx	lr
 80022a2:	2000      	movs	r0, #0
 80022a4:	4770      	bx	lr
        return HAL_TIMEOUT;
 80022a6:	2003      	movs	r0, #3
 80022a8:	4770      	bx	lr
  return HAL_OK;
 80022aa:	2000      	movs	r0, #0
}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40007000 	.word	0x40007000
 80022b4:	20000000 	.word	0x20000000
 80022b8:	431bde83 	.word	0x431bde83

080022bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022bc:	b530      	push	{r4, r5, lr}
 80022be:	b083      	sub	sp, #12
 80022c0:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022ca:	d00b      	beq.n	80022e4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022cc:	f7ff ffa6 	bl	800221c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80022d4:	d017      	beq.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022d6:	2c80      	cmp	r4, #128	; 0x80
 80022d8:	d81f      	bhi.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022da:	d02d      	beq.n	8002338 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022dc:	2c70      	cmp	r4, #112	; 0x70
 80022de:	d02d      	beq.n	800233c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022e0:	2100      	movs	r1, #0
 80022e2:	e01b      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80022e4:	4d17      	ldr	r5, [pc, #92]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80022e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	65ab      	str	r3, [r5, #88]	; 0x58
 80022ee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80022f8:	f7ff ff90 	bl	800221c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80022fc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002302:	65ab      	str	r3, [r5, #88]	; 0x58
 8002304:	e7e4      	b.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002306:	2c80      	cmp	r4, #128	; 0x80
 8002308:	d903      	bls.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 800230a:	2ca0      	cmp	r4, #160	; 0xa0
 800230c:	d903      	bls.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800230e:	2102      	movs	r1, #2
 8002310:	e004      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002312:	2100      	movs	r1, #0
 8002314:	e002      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002316:	2101      	movs	r1, #1
 8002318:	e000      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800231a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800231c:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800231e:	6813      	ldr	r3, [r2, #0]
 8002320:	f023 0307 	bic.w	r3, r3, #7
 8002324:	430b      	orrs	r3, r1
 8002326:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002328:	6813      	ldr	r3, [r2, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	428b      	cmp	r3, r1
 8002330:	d106      	bne.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002332:	2000      	movs	r0, #0
}
 8002334:	b003      	add	sp, #12
 8002336:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002338:	2102      	movs	r1, #2
 800233a:	e7ef      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800233c:	2101      	movs	r1, #1
 800233e:	e7ed      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8002340:	2001      	movs	r0, #1
 8002342:	e7f7      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8002344:	40021000 	.word	0x40021000
 8002348:	40022000 	.word	0x40022000

0800234c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234c:	4a28      	ldr	r2, [pc, #160]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800234e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002350:	68d2      	ldr	r2, [r2, #12]
 8002352:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002356:	f013 030c 	ands.w	r3, r3, #12
 800235a:	d00a      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x26>
 800235c:	2b0c      	cmp	r3, #12
 800235e:	d006      	beq.n	800236e <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002360:	2b04      	cmp	r3, #4
 8002362:	d01f      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002364:	2b08      	cmp	r3, #8
 8002366:	d020      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002368:	2000      	movs	r0, #0
 800236a:	4602      	mov	r2, r0
 800236c:	e010      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800236e:	2a01      	cmp	r2, #1
 8002370:	d1f6      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002372:	4a1f      	ldr	r2, [pc, #124]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	f012 0f08 	tst.w	r2, #8
 800237a:	d10c      	bne.n	8002396 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800237c:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800237e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8002382:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8002386:	491b      	ldr	r1, [pc, #108]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002388:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800238c:	b143      	cbz	r3, 80023a0 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800238e:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002390:	2b0c      	cmp	r3, #12
 8002392:	d00d      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x64>
}
 8002394:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002396:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800239e:	e7f2      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 80023a0:	4610      	mov	r0, r2
 80023a2:	e7f5      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 80023a4:	4814      	ldr	r0, [pc, #80]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023a6:	2200      	movs	r2, #0
 80023a8:	e7f2      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 80023aa:	4814      	ldr	r0, [pc, #80]	; (80023fc <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023ac:	2200      	movs	r2, #0
 80023ae:	e7ef      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d016      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x9e>
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d100      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 80023c0:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023c4:	68d8      	ldr	r0, [r3, #12]
 80023c6:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80023ca:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023cc:	68d9      	ldr	r1, [r3, #12]
 80023ce:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80023d2:	fb02 f201 	mul.w	r2, r2, r1
 80023d6:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023da:	68d8      	ldr	r0, [r3, #12]
 80023dc:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80023e0:	3001      	adds	r0, #1
 80023e2:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 80023e4:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80023e8:	e7d4      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80023ea:	4a03      	ldr	r2, [pc, #12]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xac>)
 80023ec:	e7e9      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x76>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	08006688 	.word	0x08006688
 80023f8:	00f42400 	.word	0x00f42400
 80023fc:	007a1200 	.word	0x007a1200

08002400 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002400:	2800      	cmp	r0, #0
 8002402:	f000 82ff 	beq.w	8002a04 <HAL_RCC_OscConfig+0x604>
{
 8002406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002408:	b083      	sub	sp, #12
 800240a:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240c:	4bae      	ldr	r3, [pc, #696]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 800240e:	689d      	ldr	r5, [r3, #8]
 8002410:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002414:	68de      	ldr	r6, [r3, #12]
 8002416:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800241a:	6803      	ldr	r3, [r0, #0]
 800241c:	f013 0f10 	tst.w	r3, #16
 8002420:	d05a      	beq.n	80024d8 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002422:	b1e5      	cbz	r5, 800245e <HAL_RCC_OscConfig+0x5e>
 8002424:	2d0c      	cmp	r5, #12
 8002426:	d018      	beq.n	800245a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002428:	69a3      	ldr	r3, [r4, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80bb 	beq.w	80025a6 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8002430:	4aa5      	ldr	r2, [pc, #660]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 8002432:	6813      	ldr	r3, [r2, #0]
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800243a:	f7ff f9ef 	bl	800181c <HAL_GetTick>
 800243e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002440:	4ba1      	ldr	r3, [pc, #644]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f013 0f02 	tst.w	r3, #2
 8002448:	f040 809a 	bne.w	8002580 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800244c:	f7ff f9e6 	bl	800181c <HAL_GetTick>
 8002450:	1bc0      	subs	r0, r0, r7
 8002452:	2802      	cmp	r0, #2
 8002454:	d9f4      	bls.n	8002440 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8002456:	2003      	movs	r0, #3
 8002458:	e2df      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800245a:	2e01      	cmp	r6, #1
 800245c:	d1e4      	bne.n	8002428 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800245e:	4b9a      	ldr	r3, [pc, #616]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f013 0f02 	tst.w	r3, #2
 8002466:	d003      	beq.n	8002470 <HAL_RCC_OscConfig+0x70>
 8002468:	69a3      	ldr	r3, [r4, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 82cc 	beq.w	8002a08 <HAL_RCC_OscConfig+0x608>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002470:	6a20      	ldr	r0, [r4, #32]
 8002472:	4b95      	ldr	r3, [pc, #596]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f013 0f08 	tst.w	r3, #8
 800247a:	d05b      	beq.n	8002534 <HAL_RCC_OscConfig+0x134>
 800247c:	4b92      	ldr	r3, [pc, #584]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002484:	4298      	cmp	r0, r3
 8002486:	d85c      	bhi.n	8002542 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002488:	4b8f      	ldr	r3, [pc, #572]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	f042 0208 	orr.w	r2, r2, #8
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002498:	6a21      	ldr	r1, [r4, #32]
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80024a4:	69e1      	ldr	r1, [r4, #28]
 80024a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024aa:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ac:	2d00      	cmp	r5, #0
 80024ae:	d060      	beq.n	8002572 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b0:	f7ff ff4c 	bl	800234c <HAL_RCC_GetSysClockFreq>
 80024b4:	4b84      	ldr	r3, [pc, #528]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024bc:	4a83      	ldr	r2, [pc, #524]	; (80026cc <HAL_RCC_OscConfig+0x2cc>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	40d8      	lsrs	r0, r3
 80024c6:	4b82      	ldr	r3, [pc, #520]	; (80026d0 <HAL_RCC_OscConfig+0x2d0>)
 80024c8:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80024ca:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_RCC_OscConfig+0x2d4>)
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	f7ff f963 	bl	8001798 <HAL_InitTick>
        if(status != HAL_OK)
 80024d2:	2800      	cmp	r0, #0
 80024d4:	f040 82a1 	bne.w	8002a1a <HAL_RCC_OscConfig+0x61a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	f013 0f01 	tst.w	r3, #1
 80024de:	f000 8081 	beq.w	80025e4 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024e2:	2d08      	cmp	r5, #8
 80024e4:	d075      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
 80024e6:	2d0c      	cmp	r5, #12
 80024e8:	d071      	beq.n	80025ce <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ea:	6863      	ldr	r3, [r4, #4]
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	f000 8097 	beq.w	8002622 <HAL_RCC_OscConfig+0x222>
 80024f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f8:	f000 8099 	beq.w	800262e <HAL_RCC_OscConfig+0x22e>
 80024fc:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800250c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250e:	6863      	ldr	r3, [r4, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8099 	beq.w	8002648 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8002516:	f7ff f981 	bl	800181c <HAL_GetTick>
 800251a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002524:	d15e      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002526:	f7ff f979 	bl	800181c <HAL_GetTick>
 800252a:	1bc0      	subs	r0, r0, r7
 800252c:	2864      	cmp	r0, #100	; 0x64
 800252e:	d9f5      	bls.n	800251c <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8002530:	2003      	movs	r0, #3
 8002532:	e272      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002534:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 8002536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002540:	e7a0      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002542:	f7ff febb 	bl	80022bc <RCC_SetFlashLatencyFromMSIRange>
 8002546:	2800      	cmp	r0, #0
 8002548:	f040 8260 	bne.w	8002a0c <HAL_RCC_OscConfig+0x60c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800254c:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	f042 0208 	orr.w	r2, r2, #8
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800255c:	6a21      	ldr	r1, [r4, #32]
 800255e:	430a      	orrs	r2, r1
 8002560:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002568:	69e1      	ldr	r1, [r4, #28]
 800256a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	e79e      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002572:	6a20      	ldr	r0, [r4, #32]
 8002574:	f7ff fea2 	bl	80022bc <RCC_SetFlashLatencyFromMSIRange>
 8002578:	2800      	cmp	r0, #0
 800257a:	d099      	beq.n	80024b0 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 800257c:	2001      	movs	r0, #1
 800257e:	e24c      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002580:	4b51      	ldr	r3, [pc, #324]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	f042 0208 	orr.w	r2, r2, #8
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002590:	6a21      	ldr	r1, [r4, #32]
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800259c:	69e1      	ldr	r1, [r4, #28]
 800259e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	e798      	b.n	80024d8 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80025a6:	4a48      	ldr	r2, [pc, #288]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 80025a8:	6813      	ldr	r3, [r2, #0]
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80025b0:	f7ff f934 	bl	800181c <HAL_GetTick>
 80025b4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b6:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f013 0f02 	tst.w	r3, #2
 80025be:	d08b      	beq.n	80024d8 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c0:	f7ff f92c 	bl	800181c <HAL_GetTick>
 80025c4:	1bc0      	subs	r0, r0, r7
 80025c6:	2802      	cmp	r0, #2
 80025c8:	d9f5      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80025ca:	2003      	movs	r0, #3
 80025cc:	e225      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025ce:	2e03      	cmp	r6, #3
 80025d0:	d18b      	bne.n	80024ea <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d2:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025da:	d003      	beq.n	80025e4 <HAL_RCC_OscConfig+0x1e4>
 80025dc:	6863      	ldr	r3, [r4, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8216 	beq.w	8002a10 <HAL_RCC_OscConfig+0x610>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	f013 0f02 	tst.w	r3, #2
 80025ea:	d04f      	beq.n	800268c <HAL_RCC_OscConfig+0x28c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ec:	2d04      	cmp	r5, #4
 80025ee:	d03c      	beq.n	800266a <HAL_RCC_OscConfig+0x26a>
 80025f0:	2d0c      	cmp	r5, #12
 80025f2:	d038      	beq.n	8002666 <HAL_RCC_OscConfig+0x266>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f4:	68e3      	ldr	r3, [r4, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d077      	beq.n	80026ea <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 80025fa:	4a33      	ldr	r2, [pc, #204]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 80025fc:	6813      	ldr	r3, [r2, #0]
 80025fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002602:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002604:	f7ff f90a 	bl	800181c <HAL_GetTick>
 8002608:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800260a:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002612:	d161      	bne.n	80026d8 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002614:	f7ff f902 	bl	800181c <HAL_GetTick>
 8002618:	1b80      	subs	r0, r0, r6
 800261a:	2802      	cmp	r0, #2
 800261c:	d9f5      	bls.n	800260a <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800261e:	2003      	movs	r0, #3
 8002620:	e1fb      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002622:	4a29      	ldr	r2, [pc, #164]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 8002624:	6813      	ldr	r3, [r2, #0]
 8002626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e76f      	b.n	800250e <HAL_RCC_OscConfig+0x10e>
 800262e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002632:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e762      	b.n	800250e <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8002648:	f7ff f8e8 	bl	800181c <HAL_GetTick>
 800264c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002656:	d0c5      	beq.n	80025e4 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7ff f8e0 	bl	800181c <HAL_GetTick>
 800265c:	1bc0      	subs	r0, r0, r7
 800265e:	2864      	cmp	r0, #100	; 0x64
 8002660:	d9f5      	bls.n	800264e <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8002662:	2003      	movs	r0, #3
 8002664:	e1d9      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002666:	2e02      	cmp	r6, #2
 8002668:	d1c4      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002672:	d003      	beq.n	800267c <HAL_RCC_OscConfig+0x27c>
 8002674:	68e3      	ldr	r3, [r4, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 81cc 	beq.w	8002a14 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 800267e:	6853      	ldr	r3, [r2, #4]
 8002680:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002684:	6921      	ldr	r1, [r4, #16]
 8002686:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800268a:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	f013 0f08 	tst.w	r3, #8
 8002692:	d055      	beq.n	8002740 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002694:	6963      	ldr	r3, [r4, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03b      	beq.n	8002712 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 800269c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80026a8:	f7ff f8b8 	bl	800181c <HAL_GetTick>
 80026ac:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_OscConfig+0x2c8>)
 80026b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b4:	f013 0f02 	tst.w	r3, #2
 80026b8:	d142      	bne.n	8002740 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ba:	f7ff f8af 	bl	800181c <HAL_GetTick>
 80026be:	1b80      	subs	r0, r0, r6
 80026c0:	2802      	cmp	r0, #2
 80026c2:	d9f4      	bls.n	80026ae <HAL_RCC_OscConfig+0x2ae>
          return HAL_TIMEOUT;
 80026c4:	2003      	movs	r0, #3
 80026c6:	e1a8      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	080066b8 	.word	0x080066b8
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000014 	.word	0x20000014
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4ab8      	ldr	r2, [pc, #736]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 80026da:	6853      	ldr	r3, [r2, #4]
 80026dc:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80026e0:	6921      	ldr	r1, [r4, #16]
 80026e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80026e6:	6053      	str	r3, [r2, #4]
 80026e8:	e7d0      	b.n	800268c <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_HSI_DISABLE();
 80026ea:	4ab4      	ldr	r2, [pc, #720]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026f4:	f7ff f892 	bl	800181c <HAL_GetTick>
 80026f8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026fa:	4bb0      	ldr	r3, [pc, #704]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002702:	d0c3      	beq.n	800268c <HAL_RCC_OscConfig+0x28c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002704:	f7ff f88a 	bl	800181c <HAL_GetTick>
 8002708:	1b80      	subs	r0, r0, r6
 800270a:	2802      	cmp	r0, #2
 800270c:	d9f5      	bls.n	80026fa <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800270e:	2003      	movs	r0, #3
 8002710:	e183      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_LSI_DISABLE();
 8002712:	4aaa      	ldr	r2, [pc, #680]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 8002714:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002720:	f7ff f87c 	bl	800181c <HAL_GetTick>
 8002724:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002726:	4ba5      	ldr	r3, [pc, #660]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 8002728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272c:	f013 0f02 	tst.w	r3, #2
 8002730:	d006      	beq.n	8002740 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002732:	f7ff f873 	bl	800181c <HAL_GetTick>
 8002736:	1b80      	subs	r0, r0, r6
 8002738:	2802      	cmp	r0, #2
 800273a:	d9f4      	bls.n	8002726 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800273c:	2003      	movs	r0, #3
 800273e:	e16c      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	f013 0f04 	tst.w	r3, #4
 8002746:	d07a      	beq.n	800283e <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002748:	4b9c      	ldr	r3, [pc, #624]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002750:	d136      	bne.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b9a      	ldr	r3, [pc, #616]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 8002754:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002756:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800275a:	659a      	str	r2, [r3, #88]	; 0x58
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002766:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002768:	4b95      	ldr	r3, [pc, #596]	; (80029c0 <HAL_RCC_OscConfig+0x5c0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002770:	d028      	beq.n	80027c4 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002772:	68a3      	ldr	r3, [r4, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d039      	beq.n	80027ec <HAL_RCC_OscConfig+0x3ec>
 8002778:	2b05      	cmp	r3, #5
 800277a:	d03f      	beq.n	80027fc <HAL_RCC_OscConfig+0x3fc>
 800277c:	4b8f      	ldr	r3, [pc, #572]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 800277e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800278a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800278e:	f022 0204 	bic.w	r2, r2, #4
 8002792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002796:	68a3      	ldr	r3, [r4, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d03d      	beq.n	8002818 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800279c:	f7ff f83e 	bl	800181c <HAL_GetTick>
 80027a0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a2:	4b86      	ldr	r3, [pc, #536]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	f013 0f02 	tst.w	r3, #2
 80027ac:	d146      	bne.n	800283c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7ff f835 	bl	800181c <HAL_GetTick>
 80027b2:	1bc0      	subs	r0, r0, r7
 80027b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80027b8:	4298      	cmp	r0, r3
 80027ba:	d9f2      	bls.n	80027a2 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80027bc:	2003      	movs	r0, #3
 80027be:	e12c      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
    FlagStatus       pwrclkchanged = RESET;
 80027c0:	2600      	movs	r6, #0
 80027c2:	e7d1      	b.n	8002768 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027c4:	4a7e      	ldr	r2, [pc, #504]	; (80029c0 <HAL_RCC_OscConfig+0x5c0>)
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80027ce:	f7ff f825 	bl	800181c <HAL_GetTick>
 80027d2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d4:	4b7a      	ldr	r3, [pc, #488]	; (80029c0 <HAL_RCC_OscConfig+0x5c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027dc:	d1c9      	bne.n	8002772 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027de:	f7ff f81d 	bl	800181c <HAL_GetTick>
 80027e2:	1bc0      	subs	r0, r0, r7
 80027e4:	2802      	cmp	r0, #2
 80027e6:	d9f5      	bls.n	80027d4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 80027e8:	2003      	movs	r0, #3
 80027ea:	e116      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	4a73      	ldr	r2, [pc, #460]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 80027ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027fa:	e7cc      	b.n	8002796 <HAL_RCC_OscConfig+0x396>
 80027fc:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 80027fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002802:	f042 0204 	orr.w	r2, r2, #4
 8002806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800280a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002816:	e7be      	b.n	8002796 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002818:	f7ff f800 	bl	800181c <HAL_GetTick>
 800281c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f013 0f02 	tst.w	r3, #2
 8002828:	d008      	beq.n	800283c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe fff7 	bl	800181c <HAL_GetTick>
 800282e:	1bc0      	subs	r0, r0, r7
 8002830:	f241 3388 	movw	r3, #5000	; 0x1388
 8002834:	4298      	cmp	r0, r3
 8002836:	d9f2      	bls.n	800281e <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8002838:	2003      	movs	r0, #3
 800283a:	e0ee      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
    if(pwrclkchanged == SET)
 800283c:	bb6e      	cbnz	r6, 800289a <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800283e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80e9 	beq.w	8002a18 <HAL_RCC_OscConfig+0x618>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002846:	2b02      	cmp	r3, #2
 8002848:	d02d      	beq.n	80028a6 <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800284a:	2d0c      	cmp	r5, #12
 800284c:	f000 80eb 	beq.w	8002a26 <HAL_RCC_OscConfig+0x626>
        __HAL_RCC_PLL_DISABLE();
 8002850:	4b5a      	ldr	r3, [pc, #360]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002858:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8002860:	d104      	bne.n	800286c <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002862:	4a56      	ldr	r2, [pc, #344]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 8002864:	68d3      	ldr	r3, [r2, #12]
 8002866:	f023 0303 	bic.w	r3, r3, #3
 800286a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800286c:	4a53      	ldr	r2, [pc, #332]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 800286e:	68d3      	ldr	r3, [r2, #12]
 8002870:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002878:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800287a:	f7fe ffcf 	bl	800181c <HAL_GetTick>
 800287e:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002880:	4b4e      	ldr	r3, [pc, #312]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002888:	f000 80ba 	beq.w	8002a00 <HAL_RCC_OscConfig+0x600>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe ffc6 	bl	800181c <HAL_GetTick>
 8002890:	1b00      	subs	r0, r0, r4
 8002892:	2802      	cmp	r0, #2
 8002894:	d9f4      	bls.n	8002880 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 8002896:	2003      	movs	r0, #3
 8002898:	e0bf      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800289a:	4a48      	ldr	r2, [pc, #288]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 800289c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6593      	str	r3, [r2, #88]	; 0x58
 80028a4:	e7cb      	b.n	800283e <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 80028a6:	4b45      	ldr	r3, [pc, #276]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 80028a8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	f003 0103 	and.w	r1, r3, #3
 80028ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028b0:	4291      	cmp	r1, r2
 80028b2:	d00f      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4d4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b4:	2d0c      	cmp	r5, #12
 80028b6:	f000 80b2 	beq.w	8002a1e <HAL_RCC_OscConfig+0x61e>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028ba:	4b40      	ldr	r3, [pc, #256]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80028c2:	f040 80ae 	bne.w	8002a22 <HAL_RCC_OscConfig+0x622>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80028ce:	d02d      	beq.n	800292c <HAL_RCC_OscConfig+0x52c>
            return HAL_ERROR;
 80028d0:	2001      	movs	r0, #1
 80028d2:	e0a2      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80028da:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028dc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80028e0:	d1e8      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028e8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80028ec:	d1e2      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ee:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80028f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028f4:	3a07      	subs	r2, #7
 80028f6:	bf18      	it	ne
 80028f8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028fa:	4291      	cmp	r1, r2
 80028fc:	d1da      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028fe:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002902:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002904:	0852      	lsrs	r2, r2, #1
 8002906:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002908:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800290c:	d1d2      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800290e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002912:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002914:	0852      	lsrs	r2, r2, #1
 8002916:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002918:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800291c:	d1ca      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002926:	d051      	beq.n	80029cc <HAL_RCC_OscConfig+0x5cc>
  return HAL_OK;
 8002928:	2000      	movs	r0, #0
 800292a:	e076      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
            __HAL_RCC_PLL_DISABLE();
 800292c:	4a23      	ldr	r2, [pc, #140]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 800292e:	6813      	ldr	r3, [r2, #0]
 8002930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002934:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002936:	f7fe ff71 	bl	800181c <HAL_GetTick>
 800293a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293c:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002944:	d006      	beq.n	8002954 <HAL_RCC_OscConfig+0x554>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7fe ff69 	bl	800181c <HAL_GetTick>
 800294a:	1b40      	subs	r0, r0, r5
 800294c:	2802      	cmp	r0, #2
 800294e:	d9f5      	bls.n	800293c <HAL_RCC_OscConfig+0x53c>
                return HAL_TIMEOUT;
 8002950:	2003      	movs	r0, #3
 8002952:	e062      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 8002956:	68d3      	ldr	r3, [r2, #12]
 8002958:	491a      	ldr	r1, [pc, #104]	; (80029c4 <HAL_RCC_OscConfig+0x5c4>)
 800295a:	4019      	ands	r1, r3
 800295c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800295e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002960:	3801      	subs	r0, #1
 8002962:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002966:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002968:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800296c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800296e:	0840      	lsrs	r0, r0, #1
 8002970:	3801      	subs	r0, #1
 8002972:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002976:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002978:	0840      	lsrs	r0, r0, #1
 800297a:	3801      	subs	r0, #1
 800297c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002980:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002982:	0900      	lsrs	r0, r0, #4
 8002984:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8002988:	430b      	orrs	r3, r1
 800298a:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800298c:	6813      	ldr	r3, [r2, #0]
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002992:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002994:	68d3      	ldr	r3, [r2, #12]
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299a:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800299c:	f7fe ff3e 	bl	800181c <HAL_GetTick>
 80029a0:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x5bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029aa:	d10d      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5c8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe ff36 	bl	800181c <HAL_GetTick>
 80029b0:	1b00      	subs	r0, r0, r4
 80029b2:	2802      	cmp	r0, #2
 80029b4:	d9f5      	bls.n	80029a2 <HAL_RCC_OscConfig+0x5a2>
                return HAL_TIMEOUT;
 80029b6:	2003      	movs	r0, #3
 80029b8:	e02f      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
 80029c4:	f99d808c 	.word	0xf99d808c
  return HAL_OK;
 80029c8:	2000      	movs	r0, #0
 80029ca:	e026      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
          __HAL_RCC_PLL_ENABLE();
 80029cc:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <HAL_RCC_OscConfig+0x62c>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029d4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029dc:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80029de:	f7fe ff1d 	bl	800181c <HAL_GetTick>
 80029e2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_RCC_OscConfig+0x62c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029ec:	d106      	bne.n	80029fc <HAL_RCC_OscConfig+0x5fc>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe ff15 	bl	800181c <HAL_GetTick>
 80029f2:	1b03      	subs	r3, r0, r4
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d9f5      	bls.n	80029e4 <HAL_RCC_OscConfig+0x5e4>
              return HAL_TIMEOUT;
 80029f8:	2003      	movs	r0, #3
 80029fa:	e00e      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 80029fc:	2000      	movs	r0, #0
 80029fe:	e00c      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
 8002a00:	2000      	movs	r0, #0
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
    return HAL_ERROR;
 8002a04:	2001      	movs	r0, #1
}
 8002a06:	4770      	bx	lr
        return HAL_ERROR;
 8002a08:	2001      	movs	r0, #1
 8002a0a:	e006      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
            return HAL_ERROR;
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	e004      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8002a10:	2001      	movs	r0, #1
 8002a12:	e002      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8002a14:	2001      	movs	r0, #1
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8002a18:	2000      	movs	r0, #0
}
 8002a1a:	b003      	add	sp, #12
 8002a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
 8002a20:	e7fb      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
            return HAL_ERROR;
 8002a22:	2001      	movs	r0, #1
 8002a24:	e7f9      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8002a26:	2001      	movs	r0, #1
 8002a28:	e7f7      	b.n	8002a1a <HAL_RCC_OscConfig+0x61a>
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002a30:	2800      	cmp	r0, #0
 8002a32:	f000 8098 	beq.w	8002b66 <HAL_RCC_ClockConfig+0x136>
{
 8002a36:	b570      	push	{r4, r5, r6, lr}
 8002a38:	460c      	mov	r4, r1
 8002a3a:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b4e      	ldr	r3, [pc, #312]	; (8002b78 <HAL_RCC_ClockConfig+0x148>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d20b      	bcs.n	8002a60 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a48:	4a4b      	ldr	r2, [pc, #300]	; (8002b78 <HAL_RCC_ClockConfig+0x148>)
 8002a4a:	6813      	ldr	r3, [r2, #0]
 8002a4c:	f023 0307 	bic.w	r3, r3, #7
 8002a50:	430b      	orrs	r3, r1
 8002a52:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a54:	6813      	ldr	r3, [r2, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	428b      	cmp	r3, r1
 8002a5c:	f040 8085 	bne.w	8002b6a <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	f013 0f01 	tst.w	r3, #1
 8002a66:	d039      	beq.n	8002adc <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a68:	686b      	ldr	r3, [r5, #4]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d026      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a72:	bb63      	cbnz	r3, 8002ace <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a74:	4a41      	ldr	r2, [pc, #260]	; (8002b7c <HAL_RCC_ClockConfig+0x14c>)
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	f012 0f02 	tst.w	r2, #2
 8002a7c:	d106      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8002a7e:	2001      	movs	r0, #1
 8002a80:	e070      	b.n	8002b64 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	4a3e      	ldr	r2, [pc, #248]	; (8002b7c <HAL_RCC_ClockConfig+0x14c>)
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002a8a:	d070      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a8c:	493b      	ldr	r1, [pc, #236]	; (8002b7c <HAL_RCC_ClockConfig+0x14c>)
 8002a8e:	688a      	ldr	r2, [r1, #8]
 8002a90:	f022 0203 	bic.w	r2, r2, #3
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002a98:	f7fe fec0 	bl	800181c <HAL_GetTick>
 8002a9c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <HAL_RCC_ClockConfig+0x14c>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	686a      	ldr	r2, [r5, #4]
 8002aa8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002aac:	d016      	beq.n	8002adc <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aae:	f7fe feb5 	bl	800181c <HAL_GetTick>
 8002ab2:	1b80      	subs	r0, r0, r6
 8002ab4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ab8:	4298      	cmp	r0, r3
 8002aba:	d9f0      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8002abc:	2003      	movs	r0, #3
 8002abe:	e051      	b.n	8002b64 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac0:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <HAL_RCC_ClockConfig+0x14c>)
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002ac8:	d1e0      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8002aca:	2001      	movs	r0, #1
 8002acc:	e04a      	b.n	8002b64 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ace:	4a2b      	ldr	r2, [pc, #172]	; (8002b7c <HAL_RCC_ClockConfig+0x14c>)
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002ad6:	d1d9      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8002ad8:	2001      	movs	r0, #1
 8002ada:	e043      	b.n	8002b64 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	682b      	ldr	r3, [r5, #0]
 8002ade:	f013 0f02 	tst.w	r3, #2
 8002ae2:	d006      	beq.n	8002af2 <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <HAL_RCC_ClockConfig+0x14c>)
 8002ae6:	6893      	ldr	r3, [r2, #8]
 8002ae8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aec:	68a9      	ldr	r1, [r5, #8]
 8002aee:	430b      	orrs	r3, r1
 8002af0:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af2:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <HAL_RCC_ClockConfig+0x148>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	42a3      	cmp	r3, r4
 8002afc:	d90a      	bls.n	8002b14 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <HAL_RCC_ClockConfig+0x148>)
 8002b00:	6813      	ldr	r3, [r2, #0]
 8002b02:	f023 0307 	bic.w	r3, r3, #7
 8002b06:	4323      	orrs	r3, r4
 8002b08:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	6813      	ldr	r3, [r2, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	d12e      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	682b      	ldr	r3, [r5, #0]
 8002b16:	f013 0f04 	tst.w	r3, #4
 8002b1a:	d006      	beq.n	8002b2a <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_RCC_ClockConfig+0x14c>)
 8002b1e:	6893      	ldr	r3, [r2, #8]
 8002b20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b24:	68e9      	ldr	r1, [r5, #12]
 8002b26:	430b      	orrs	r3, r1
 8002b28:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	682b      	ldr	r3, [r5, #0]
 8002b2c:	f013 0f08 	tst.w	r3, #8
 8002b30:	d007      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_RCC_ClockConfig+0x14c>)
 8002b34:	6893      	ldr	r3, [r2, #8]
 8002b36:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002b3a:	6929      	ldr	r1, [r5, #16]
 8002b3c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b40:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b42:	f7ff fc03 	bl	800234c <HAL_RCC_GetSysClockFreq>
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_RCC_ClockConfig+0x14c>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_RCC_ClockConfig+0x150>)
 8002b50:	5cd3      	ldrb	r3, [r2, r3]
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	40d8      	lsrs	r0, r3
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_RCC_ClockConfig+0x154>)
 8002b5a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <HAL_RCC_ClockConfig+0x158>)
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	f7fe fe1a 	bl	8001798 <HAL_InitTick>
}
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002b66:	2001      	movs	r0, #1
}
 8002b68:	4770      	bx	lr
      return HAL_ERROR;
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	e7fa      	b.n	8002b64 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
 8002b70:	e7f8      	b.n	8002b64 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 8002b72:	2001      	movs	r0, #1
 8002b74:	e7f6      	b.n	8002b64 <HAL_RCC_ClockConfig+0x134>
 8002b76:	bf00      	nop
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	080066b8 	.word	0x080066b8
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000014 	.word	0x20000014

08002b8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	4604      	mov	r4, r0
 8002b90:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b92:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f013 0f03 	tst.w	r3, #3
 8002b9a:	d018      	beq.n	8002bce <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b9c:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	6802      	ldr	r2, [r0, #0]
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d002      	beq.n	8002bb0 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002baa:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8002bac:	4628      	mov	r0, r5
 8002bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002bb0:	2a00      	cmp	r2, #0
 8002bb2:	f000 809e 	beq.w	8002cf2 <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bb6:	4b50      	ldr	r3, [pc, #320]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	6842      	ldr	r2, [r0, #4]
       ||
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d001      	beq.n	8002bca <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 8002bc6:	2501      	movs	r5, #1
 8002bc8:	e7f0      	b.n	8002bac <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2500      	movs	r5, #0
 8002bcc:	e009      	b.n	8002be2 <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 8002bce:	6803      	ldr	r3, [r0, #0]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d057      	beq.n	8002c84 <RCCEx_PLLSAI1_Config+0xf8>
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d05c      	beq.n	8002c92 <RCCEx_PLLSAI1_Config+0x106>
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d042      	beq.n	8002c62 <RCCEx_PLLSAI1_Config+0xd6>
 8002bdc:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8002bde:	2d00      	cmp	r5, #0
 8002be0:	d1e4      	bne.n	8002bac <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8002be2:	4a45      	ldr	r2, [pc, #276]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002be4:	6813      	ldr	r3, [r2, #0]
 8002be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002bec:	f7fe fe16 	bl	800181c <HAL_GetTick>
 8002bf0:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bf2:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002bfa:	d005      	beq.n	8002c08 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bfc:	f7fe fe0e 	bl	800181c <HAL_GetTick>
 8002c00:	1b83      	subs	r3, r0, r6
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d9f5      	bls.n	8002bf2 <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 8002c06:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8002c08:	2d00      	cmp	r5, #0
 8002c0a:	d1cf      	bne.n	8002bac <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8002c0c:	2f00      	cmp	r7, #0
 8002c0e:	d14e      	bne.n	8002cae <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c10:	4939      	ldr	r1, [pc, #228]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c12:	690b      	ldr	r3, [r1, #16]
 8002c14:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c1c:	68a0      	ldr	r0, [r4, #8]
 8002c1e:	68e2      	ldr	r2, [r4, #12]
 8002c20:	0912      	lsrs	r2, r2, #4
 8002c22:	0452      	lsls	r2, r2, #17
 8002c24:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c2c:	4a32      	ldr	r2, [pc, #200]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c2e:	6813      	ldr	r3, [r2, #0]
 8002c30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c34:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002c36:	f7fe fdf1 	bl	800181c <HAL_GetTick>
 8002c3a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c3c:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002c44:	d105      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c46:	f7fe fde9 	bl	800181c <HAL_GetTick>
 8002c4a:	1b83      	subs	r3, r0, r6
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d9f5      	bls.n	8002c3c <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8002c50:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	d1aa      	bne.n	8002bac <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c56:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c58:	6913      	ldr	r3, [r2, #16]
 8002c5a:	69a1      	ldr	r1, [r4, #24]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6113      	str	r3, [r2, #16]
 8002c60:	e7a4      	b.n	8002bac <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c62:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	f012 0f02 	tst.w	r2, #2
 8002c6a:	d01e      	beq.n	8002caa <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c6c:	4822      	ldr	r0, [pc, #136]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c6e:	68c2      	ldr	r2, [r0, #12]
 8002c70:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002c74:	6861      	ldr	r1, [r4, #4]
 8002c76:	3901      	subs	r1, #1
 8002c78:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60c3      	str	r3, [r0, #12]
 8002c80:	2500      	movs	r5, #0
 8002c82:	e7ac      	b.n	8002bde <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c84:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002c8c:	d1ee      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 8002c8e:	2501      	movs	r5, #1
 8002c90:	e7a5      	b.n	8002bde <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c92:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002c9a:	d1e7      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002ca4:	d1e2      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 8002ca6:	2501      	movs	r5, #1
 8002ca8:	e799      	b.n	8002bde <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 8002caa:	2501      	movs	r5, #1
 8002cac:	e797      	b.n	8002bde <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cae:	2f01      	cmp	r7, #1
 8002cb0:	d00f      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb2:	4811      	ldr	r0, [pc, #68]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002cb4:	6902      	ldr	r2, [r0, #16]
 8002cb6:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002cba:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002cbe:	68a1      	ldr	r1, [r4, #8]
 8002cc0:	6963      	ldr	r3, [r4, #20]
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	065b      	lsls	r3, r3, #25
 8002cc8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	6103      	str	r3, [r0, #16]
 8002cd0:	e7ac      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cd2:	4809      	ldr	r0, [pc, #36]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x16c>)
 8002cd4:	6902      	ldr	r2, [r0, #16]
 8002cd6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002cda:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002cde:	68a1      	ldr	r1, [r4, #8]
 8002ce0:	6923      	ldr	r3, [r4, #16]
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	055b      	lsls	r3, r3, #21
 8002ce8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002cec:	4313      	orrs	r3, r2
 8002cee:	6103      	str	r3, [r0, #16]
 8002cf0:	e79c      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 8002cf2:	2501      	movs	r5, #1
 8002cf4:	e75a      	b.n	8002bac <RCCEx_PLLSAI1_Config+0x20>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000

08002cfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	4604      	mov	r4, r0
 8002d00:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d02:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f013 0f03 	tst.w	r3, #3
 8002d0a:	d018      	beq.n	8002d3e <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d0c:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	6802      	ldr	r2, [r0, #0]
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d002      	beq.n	8002d20 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d1a:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002d20:	2a00      	cmp	r2, #0
 8002d22:	f000 808c 	beq.w	8002e3e <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	6842      	ldr	r2, [r0, #4]
       ||
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d001      	beq.n	8002d3a <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 8002d36:	2501      	movs	r5, #1
 8002d38:	e7f0      	b.n	8002d1c <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2500      	movs	r5, #0
 8002d3c:	e009      	b.n	8002d52 <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 8002d3e:	6803      	ldr	r3, [r0, #0]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d057      	beq.n	8002df4 <RCCEx_PLLSAI2_Config+0xf8>
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d05c      	beq.n	8002e02 <RCCEx_PLLSAI2_Config+0x106>
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d042      	beq.n	8002dd2 <RCCEx_PLLSAI2_Config+0xd6>
 8002d4c:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8002d4e:	2d00      	cmp	r5, #0
 8002d50:	d1e4      	bne.n	8002d1c <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d52:	4a3c      	ldr	r2, [pc, #240]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002d54:	6813      	ldr	r3, [r2, #0]
 8002d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fd5e 	bl	800181c <HAL_GetTick>
 8002d60:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d62:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002d6a:	d005      	beq.n	8002d78 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d6c:	f7fe fd56 	bl	800181c <HAL_GetTick>
 8002d70:	1b83      	subs	r3, r0, r6
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d9f5      	bls.n	8002d62 <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 8002d76:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8002d78:	2d00      	cmp	r5, #0
 8002d7a:	d1cf      	bne.n	8002d1c <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8002d7c:	2f00      	cmp	r7, #0
 8002d7e:	d14e      	bne.n	8002e1e <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d80:	4930      	ldr	r1, [pc, #192]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002d82:	694b      	ldr	r3, [r1, #20]
 8002d84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	68a0      	ldr	r0, [r4, #8]
 8002d8e:	68e2      	ldr	r2, [r4, #12]
 8002d90:	0912      	lsrs	r2, r2, #4
 8002d92:	0452      	lsls	r2, r2, #17
 8002d94:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d9c:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002d9e:	6813      	ldr	r3, [r2, #0]
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002da6:	f7fe fd39 	bl	800181c <HAL_GetTick>
 8002daa:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002db4:	d105      	bne.n	8002dc2 <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002db6:	f7fe fd31 	bl	800181c <HAL_GetTick>
 8002dba:	1b83      	subs	r3, r0, r6
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d9f5      	bls.n	8002dac <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 8002dc0:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8002dc2:	2d00      	cmp	r5, #0
 8002dc4:	d1aa      	bne.n	8002d1c <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dc6:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002dc8:	6953      	ldr	r3, [r2, #20]
 8002dca:	6961      	ldr	r1, [r4, #20]
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	6153      	str	r3, [r2, #20]
 8002dd0:	e7a4      	b.n	8002d1c <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	f012 0f02 	tst.w	r2, #2
 8002dda:	d01e      	beq.n	8002e1a <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ddc:	4819      	ldr	r0, [pc, #100]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002dde:	68c2      	ldr	r2, [r0, #12]
 8002de0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002de4:	6861      	ldr	r1, [r4, #4]
 8002de6:	3901      	subs	r1, #1
 8002de8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60c3      	str	r3, [r0, #12]
 8002df0:	2500      	movs	r5, #0
 8002df2:	e7ac      	b.n	8002d4e <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002df4:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002dfc:	d1ee      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 8002dfe:	2501      	movs	r5, #1
 8002e00:	e7a5      	b.n	8002d4e <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e02:	4a10      	ldr	r2, [pc, #64]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002e0a:	d1e7      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002e14:	d1e2      	bne.n	8002ddc <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 8002e16:	2501      	movs	r5, #1
 8002e18:	e799      	b.n	8002d4e <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 8002e1a:	2501      	movs	r5, #1
 8002e1c:	e797      	b.n	8002d4e <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e1e:	4809      	ldr	r0, [pc, #36]	; (8002e44 <RCCEx_PLLSAI2_Config+0x148>)
 8002e20:	6942      	ldr	r2, [r0, #20]
 8002e22:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002e26:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002e2a:	68a1      	ldr	r1, [r4, #8]
 8002e2c:	6923      	ldr	r3, [r4, #16]
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	3b01      	subs	r3, #1
 8002e32:	065b      	lsls	r3, r3, #25
 8002e34:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	6143      	str	r3, [r0, #20]
 8002e3c:	e7ae      	b.n	8002d9c <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 8002e3e:	2501      	movs	r5, #1
 8002e40:	e76c      	b.n	8002d1c <RCCEx_PLLSAI2_Config+0x20>
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000

08002e48 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e50:	6803      	ldr	r3, [r0, #0]
 8002e52:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e56:	d033      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e58:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002e5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e5e:	d01f      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002e60:	d80c      	bhi.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002e62:	b323      	cbz	r3, 8002eae <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e68:	d105      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	3020      	adds	r0, #32
 8002e6e:	f7ff ff45 	bl	8002cfc <RCCEx_PLLSAI2_Config>
 8002e72:	4606      	mov	r6, r0
      break;
 8002e74:	e020      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e76:	2701      	movs	r7, #1
 8002e78:	463e      	mov	r6, r7
 8002e7a:	e023      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e80:	d10b      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e82:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e84:	4a62      	ldr	r2, [pc, #392]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e8e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002e90:	430b      	orrs	r3, r1
 8002e92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e96:	2700      	movs	r7, #0
 8002e98:	e014      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e9a:	2701      	movs	r7, #1
 8002e9c:	463e      	mov	r6, r7
 8002e9e:	e011      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea0:	4a5b      	ldr	r2, [pc, #364]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002ea2:	68d3      	ldr	r3, [r2, #12]
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eaa:	2600      	movs	r6, #0
 8002eac:	e7ea      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	3004      	adds	r0, #4
 8002eb2:	f7ff fe6b 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002eb6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002eb8:	2e00      	cmp	r6, #0
 8002eba:	d0e3      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002ebc:	4637      	mov	r7, r6
 8002ebe:	e001      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ec0:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ec2:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002eca:	d021      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002ecc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ed2:	d079      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002ed4:	d80e      	bhi.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d07c      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002eda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ede:	d106      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xa6>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	f104 0020 	add.w	r0, r4, #32
 8002ee6:	f7ff ff09 	bl	8002cfc <RCCEx_PLLSAI2_Config>
 8002eea:	4606      	mov	r6, r0
      break;
 8002eec:	e005      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002eee:	2701      	movs	r7, #1
 8002ef0:	463e      	mov	r6, r7
 8002ef2:	e00d      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8002ef4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ef8:	d163      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    if(ret == HAL_OK)
 8002efa:	2e00      	cmp	r6, #0
 8002efc:	d170      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002efe:	4a44      	ldr	r2, [pc, #272]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f04:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002f08:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f16:	f000 8084 	beq.w	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002f22:	d15f      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f38:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f3c:	4a35      	ldr	r2, [pc, #212]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f3e:	6813      	ldr	r3, [r2, #0]
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f46:	f7fe fc69 	bl	800181c <HAL_GetTick>
 8002f4a:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f4c:	4b31      	ldr	r3, [pc, #196]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f54:	d105      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fe fc61 	bl	800181c <HAL_GetTick>
 8002f5a:	1b40      	subs	r0, r0, r5
 8002f5c:	2802      	cmp	r0, #2
 8002f5e:	d9f5      	bls.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x104>
        ret = HAL_TIMEOUT;
 8002f60:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8002f62:	2e00      	cmp	r6, #0
 8002f64:	d158      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f66:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f6c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002f70:	d016      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f72:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d012      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x158>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f7a:	4a25      	ldr	r2, [pc, #148]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f7c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f84:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002f88:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002f8c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f90:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002f94:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002f98:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fa0:	f013 0f01 	tst.w	r3, #1
 8002fa4:	d121      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      if(ret == HAL_OK)
 8002fa6:	2e00      	cmp	r6, #0
 8002fa8:	f040 8139 	bne.w	800321e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fac:	4a18      	ldr	r2, [pc, #96]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002fae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc0:	e02b      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002fc2:	2701      	movs	r7, #1
 8002fc4:	463e      	mov	r6, r7
 8002fc6:	e7a3      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fc8:	4a11      	ldr	r2, [pc, #68]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002fca:	68d3      	ldr	r3, [r2, #12]
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd0:	60d3      	str	r3, [r2, #12]
      break;
 8002fd2:	e792      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xb2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	1d20      	adds	r0, r4, #4
 8002fd8:	f7ff fdd8 	bl	8002b8c <RCCEx_PLLSAI1_Config>
 8002fdc:	4606      	mov	r6, r0
      break;
 8002fde:	e78c      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8002fe0:	4637      	mov	r7, r6
 8002fe2:	e795      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    FlagStatus       pwrclkchanged = RESET;
 8002fe4:	f04f 0800 	mov.w	r8, #0
 8002fe8:	e7a8      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
        tickstart = HAL_GetTick();
 8002fea:	f7fe fc17 	bl	800181c <HAL_GetTick>
 8002fee:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f013 0f02 	tst.w	r3, #2
 8002ffa:	d1d4      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe fc0e 	bl	800181c <HAL_GetTick>
 8003000:	1b40      	subs	r0, r0, r5
 8003002:	f241 3388 	movw	r3, #5000	; 0x1388
 8003006:	4298      	cmp	r0, r3
 8003008:	d9f2      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
            ret = HAL_TIMEOUT;
 800300a:	2603      	movs	r6, #3
 800300c:	e7cb      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40007000 	.word	0x40007000
      status = ret;
 8003018:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 800301a:	f1b8 0f00 	cmp.w	r8, #0
 800301e:	f040 8100 	bne.w	8003222 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	f013 0f01 	tst.w	r3, #1
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800302a:	4a9d      	ldr	r2, [pc, #628]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800302c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003030:	f023 0303 	bic.w	r3, r3, #3
 8003034:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003036:	430b      	orrs	r3, r1
 8003038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	f013 0f02 	tst.w	r3, #2
 8003042:	d008      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003044:	4a96      	ldr	r2, [pc, #600]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003046:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800304a:	f023 030c 	bic.w	r3, r3, #12
 800304e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003050:	430b      	orrs	r3, r1
 8003052:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	f013 0f04 	tst.w	r3, #4
 800305c:	d008      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800305e:	4a90      	ldr	r2, [pc, #576]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003060:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003064:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003068:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800306a:	430b      	orrs	r3, r1
 800306c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	f013 0f08 	tst.w	r3, #8
 8003076:	d008      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003078:	4a89      	ldr	r2, [pc, #548]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800307a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800307e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003082:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003084:	430b      	orrs	r3, r1
 8003086:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	f013 0f10 	tst.w	r3, #16
 8003090:	d008      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003092:	4a83      	ldr	r2, [pc, #524]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003094:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800309e:	430b      	orrs	r3, r1
 80030a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	f013 0f20 	tst.w	r3, #32
 80030aa:	d008      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030ac:	4a7c      	ldr	r2, [pc, #496]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80030b8:	430b      	orrs	r3, r1
 80030ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80030c4:	d008      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030c6:	4a76      	ldr	r2, [pc, #472]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030cc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80030d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80030d2:	430b      	orrs	r3, r1
 80030d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030de:	d008      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030e0:	4a6f      	ldr	r2, [pc, #444]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030e6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80030ea:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80030ec:	430b      	orrs	r3, r1
 80030ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030f8:	d008      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030fa:	4a69      	ldr	r2, [pc, #420]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003100:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003104:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003106:	430b      	orrs	r3, r1
 8003108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003112:	d008      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003114:	4a62      	ldr	r2, [pc, #392]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003116:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800311a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800311e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003120:	430b      	orrs	r3, r1
 8003122:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	f413 7f80 	tst.w	r3, #256	; 0x100
 800312c:	d008      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800312e:	4a5c      	ldr	r2, [pc, #368]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003130:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003134:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003138:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800313a:	430b      	orrs	r3, r1
 800313c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003146:	d00f      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x320>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003148:	4a55      	ldr	r2, [pc, #340]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800314a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800314e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003152:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003154:	430b      	orrs	r3, r1
 8003156:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800315a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800315c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003160:	d065      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003162:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003166:	d067      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800316e:	d00f      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003170:	4a4b      	ldr	r2, [pc, #300]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003172:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003176:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800317a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800317c:	430b      	orrs	r3, r1
 800317e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003182:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003188:	d05e      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x400>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800318a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800318e:	d060      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003196:	d00f      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003198:	4a41      	ldr	r2, [pc, #260]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800319a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800319e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80031a2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80031a4:	430b      	orrs	r3, r1
 80031a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031aa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80031ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b0:	d057      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b6:	d059      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x424>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80031be:	d00f      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031c0:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80031c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80031c6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80031ca:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80031cc:	430b      	orrs	r3, r1
 80031ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80031d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d8:	d050      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x434>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031de:	d055      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x444>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80031e6:	d008      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031e8:	4a2d      	ldr	r2, [pc, #180]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80031ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80031ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031f2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80031f4:	430b      	orrs	r3, r1
 80031f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003200:	d009      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003202:	4a27      	ldr	r2, [pc, #156]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003204:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800320c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003210:	430b      	orrs	r3, r1
 8003212:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003216:	4638      	mov	r0, r7
 8003218:	b002      	add	sp, #8
 800321a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 800321e:	4637      	mov	r7, r6
 8003220:	e6fb      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003224:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322a:	6593      	str	r3, [r2, #88]	; 0x58
 800322c:	e6f9      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800322e:	68d3      	ldr	r3, [r2, #12]
 8003230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003234:	60d3      	str	r3, [r2, #12]
 8003236:	e797      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x320>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003238:	2101      	movs	r1, #1
 800323a:	1d20      	adds	r0, r4, #4
 800323c:	f7ff fca6 	bl	8002b8c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003240:	2800      	cmp	r0, #0
 8003242:	d091      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x320>
          status = ret;
 8003244:	4607      	mov	r7, r0
 8003246:	e78f      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x320>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003248:	68d3      	ldr	r3, [r2, #12]
 800324a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800324e:	60d3      	str	r3, [r2, #12]
 8003250:	e79e      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x348>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003252:	2101      	movs	r1, #1
 8003254:	1d20      	adds	r0, r4, #4
 8003256:	f7ff fc99 	bl	8002b8c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800325a:	2800      	cmp	r0, #0
 800325c:	d098      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x348>
        status = ret;
 800325e:	4607      	mov	r7, r0
 8003260:	e796      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x348>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003262:	68d3      	ldr	r3, [r2, #12]
 8003264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003268:	60d3      	str	r3, [r2, #12]
 800326a:	e7a5      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800326c:	2101      	movs	r1, #1
 800326e:	1d20      	adds	r0, r4, #4
 8003270:	f7ff fc8c 	bl	8002b8c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003274:	2800      	cmp	r0, #0
 8003276:	d09f      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        status = ret;
 8003278:	4607      	mov	r7, r0
 800327a:	e79d      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800327c:	2102      	movs	r1, #2
 800327e:	1d20      	adds	r0, r4, #4
 8003280:	f7ff fc84 	bl	8002b8c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003284:	2800      	cmp	r0, #0
 8003286:	d0ab      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
        status = ret;
 8003288:	4607      	mov	r7, r0
 800328a:	e7a9      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800328c:	2102      	movs	r1, #2
 800328e:	f104 0020 	add.w	r0, r4, #32
 8003292:	f7ff fd33 	bl	8002cfc <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8003296:	2800      	cmp	r0, #0
 8003298:	d0a2      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
        status = ret;
 800329a:	4607      	mov	r7, r0
 800329c:	e7a0      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000

080032a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	4605      	mov	r5, r0
 80032ac:	4688      	mov	r8, r1
 80032ae:	4617      	mov	r7, r2
 80032b0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032b2:	f7fe fab3 	bl	800181c <HAL_GetTick>
 80032b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032b8:	1a1b      	subs	r3, r3, r0
 80032ba:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80032be:	f7fe faad 	bl	800181c <HAL_GetTick>
 80032c2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032c4:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80032cc:	fb09 f303 	mul.w	r3, r9, r3
 80032d0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d2:	682b      	ldr	r3, [r5, #0]
 80032d4:	689c      	ldr	r4, [r3, #8]
 80032d6:	ea38 0304 	bics.w	r3, r8, r4
 80032da:	bf0c      	ite	eq
 80032dc:	2401      	moveq	r4, #1
 80032de:	2400      	movne	r4, #0
 80032e0:	42bc      	cmp	r4, r7
 80032e2:	d040      	beq.n	8003366 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80032e8:	d0f3      	beq.n	80032d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032ea:	f7fe fa97 	bl	800181c <HAL_GetTick>
 80032ee:	eba0 000a 	sub.w	r0, r0, sl
 80032f2:	4548      	cmp	r0, r9
 80032f4:	d20a      	bcs.n	800330c <SPI_WaitFlagStateUntilTimeout+0x68>
 80032f6:	f1b9 0f00 	cmp.w	r9, #0
 80032fa:	d007      	beq.n	800330c <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032fc:	9a01      	ldr	r2, [sp, #4]
 80032fe:	b102      	cbz	r2, 8003302 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8003300:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003302:	9b01      	ldr	r3, [sp, #4]
 8003304:	3b01      	subs	r3, #1
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	4691      	mov	r9, r2
 800330a:	e7e2      	b.n	80032d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800330c:	682a      	ldr	r2, [r5, #0]
 800330e:	6853      	ldr	r3, [r2, #4]
 8003310:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003314:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003316:	686b      	ldr	r3, [r5, #4]
 8003318:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331c:	d00b      	beq.n	8003336 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800331e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003324:	d014      	beq.n	8003350 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8003326:	2301      	movs	r3, #1
 8003328:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800332c:	2300      	movs	r3, #0
 800332e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003332:	2003      	movs	r0, #3
 8003334:	e018      	b.n	8003368 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003336:	68ab      	ldr	r3, [r5, #8]
 8003338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333c:	d002      	beq.n	8003344 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800333e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003342:	d1ec      	bne.n	800331e <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8003344:	682a      	ldr	r2, [r5, #0]
 8003346:	6813      	ldr	r3, [r2, #0]
 8003348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e7e6      	b.n	800331e <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8003350:	682a      	ldr	r2, [r5, #0]
 8003352:	6813      	ldr	r3, [r2, #0]
 8003354:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	682a      	ldr	r2, [r5, #0]
 800335c:	6813      	ldr	r3, [r2, #0]
 800335e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	e7df      	b.n	8003326 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8003366:	2000      	movs	r0, #0
}
 8003368:	b002      	add	sp, #8
 800336a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800336e:	bf00      	nop
 8003370:	20000000 	.word	0x20000000

08003374 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	4607      	mov	r7, r0
 800337c:	460d      	mov	r5, r1
 800337e:	4616      	mov	r6, r2
 8003380:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003382:	f7fe fa4b 	bl	800181c <HAL_GetTick>
 8003386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003388:	1a1b      	subs	r3, r3, r0
 800338a:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 800338e:	f7fe fa45 	bl	800181c <HAL_GetTick>
 8003392:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003394:	4b2d      	ldr	r3, [pc, #180]	; (800344c <SPI_WaitFifoStateUntilTimeout+0xd8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800339c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80033a0:	0d1b      	lsrs	r3, r3, #20
 80033a2:	fb09 f303 	mul.w	r3, r9, r3
 80033a6:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80033a8:	e002      	b.n	80033b0 <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80033aa:	f1b8 3fff 	cmp.w	r8, #4294967295
 80033ae:	d10b      	bne.n	80033c8 <SPI_WaitFifoStateUntilTimeout+0x54>
  while ((hspi->Instance->SR & Fifo) != State)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689c      	ldr	r4, [r3, #8]
 80033b4:	402c      	ands	r4, r5
 80033b6:	42b4      	cmp	r4, r6
 80033b8:	d044      	beq.n	8003444 <SPI_WaitFifoStateUntilTimeout+0xd0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033ba:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 80033be:	d1f4      	bne.n	80033aa <SPI_WaitFifoStateUntilTimeout+0x36>
 80033c0:	2e00      	cmp	r6, #0
 80033c2:	d1f2      	bne.n	80033aa <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80033c4:	7b1b      	ldrb	r3, [r3, #12]
 80033c6:	e7f0      	b.n	80033aa <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033c8:	f7fe fa28 	bl	800181c <HAL_GetTick>
 80033cc:	eba0 000a 	sub.w	r0, r0, sl
 80033d0:	4548      	cmp	r0, r9
 80033d2:	d20a      	bcs.n	80033ea <SPI_WaitFifoStateUntilTimeout+0x76>
 80033d4:	f1b9 0f00 	cmp.w	r9, #0
 80033d8:	d007      	beq.n	80033ea <SPI_WaitFifoStateUntilTimeout+0x76>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033da:	9a01      	ldr	r2, [sp, #4]
 80033dc:	b102      	cbz	r2, 80033e0 <SPI_WaitFifoStateUntilTimeout+0x6c>
 80033de:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 80033e0:	9b01      	ldr	r3, [sp, #4]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	4691      	mov	r9, r2
 80033e8:	e7e2      	b.n	80033b0 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	6853      	ldr	r3, [r2, #4]
 80033ee:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80033f2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033fa:	d00b      	beq.n	8003414 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003402:	d014      	beq.n	800342e <SPI_WaitFifoStateUntilTimeout+0xba>
        hspi->State = HAL_SPI_STATE_READY;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800340a:	2300      	movs	r3, #0
 800340c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003410:	2003      	movs	r0, #3
 8003412:	e018      	b.n	8003446 <SPI_WaitFifoStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341a:	d002      	beq.n	8003422 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800341c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003420:	d1ec      	bne.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x88>
          __HAL_SPI_DISABLE(hspi);
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	6813      	ldr	r3, [r2, #0]
 8003426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e7e6      	b.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x88>
          SPI_RESET_CRC(hspi);
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	6813      	ldr	r3, [r2, #0]
 8003432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	6813      	ldr	r3, [r2, #0]
 800343c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e7df      	b.n	8003404 <SPI_WaitFifoStateUntilTimeout+0x90>
    }
  }

  return HAL_OK;
 8003444:	2000      	movs	r0, #0
}
 8003446:	b002      	add	sp, #8
 8003448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800344c:	20000000 	.word	0x20000000

08003450 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	4604      	mov	r4, r0
 8003456:	460d      	mov	r5, r1
 8003458:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800345a:	9200      	str	r2, [sp, #0]
 800345c:	460b      	mov	r3, r1
 800345e:	2200      	movs	r2, #0
 8003460:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003464:	f7ff ff86 	bl	8003374 <SPI_WaitFifoStateUntilTimeout>
 8003468:	b9b0      	cbnz	r0, 8003498 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800346a:	9600      	str	r6, [sp, #0]
 800346c:	462b      	mov	r3, r5
 800346e:	2200      	movs	r2, #0
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	4620      	mov	r0, r4
 8003474:	f7ff ff16 	bl	80032a4 <SPI_WaitFlagStateUntilTimeout>
 8003478:	b9a8      	cbnz	r0, 80034a6 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800347a:	9600      	str	r6, [sp, #0]
 800347c:	462b      	mov	r3, r5
 800347e:	2200      	movs	r2, #0
 8003480:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003484:	4620      	mov	r0, r4
 8003486:	f7ff ff75 	bl	8003374 <SPI_WaitFifoStateUntilTimeout>
 800348a:	b150      	cbz	r0, 80034a2 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800348c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800348e:	f043 0320 	orr.w	r3, r3, #32
 8003492:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003494:	2003      	movs	r0, #3
 8003496:	e004      	b.n	80034a2 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003498:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800349a:	f043 0320 	orr.w	r3, r3, #32
 800349e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80034a0:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80034a2:	b002      	add	sp, #8
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80034a8:	f043 0320 	orr.w	r3, r3, #32
 80034ac:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80034ae:	2003      	movs	r0, #3
 80034b0:	e7f7      	b.n	80034a2 <SPI_EndRxTxTransaction+0x52>

080034b2 <HAL_SPI_Init>:
  if (hspi == NULL)
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d06a      	beq.n	800358c <HAL_SPI_Init+0xda>
{
 80034b6:	b510      	push	{r4, lr}
 80034b8:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034bc:	b933      	cbnz	r3, 80034cc <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034be:	6843      	ldr	r3, [r0, #4]
 80034c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034c4:	d005      	beq.n	80034d2 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61c3      	str	r3, [r0, #28]
 80034ca:	e002      	b.n	80034d2 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034cc:	2300      	movs	r3, #0
 80034ce:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034d0:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80034d6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d04d      	beq.n	800357a <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 80034de:	2302      	movs	r3, #2
 80034e0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80034e4:	6822      	ldr	r2, [r4, #0]
 80034e6:	6813      	ldr	r3, [r2, #0]
 80034e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ec:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ee:	68e3      	ldr	r3, [r4, #12]
 80034f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034f4:	d947      	bls.n	8003586 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034f6:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034fc:	d004      	beq.n	8003508 <HAL_SPI_Init+0x56>
 80034fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003502:	d001      	beq.n	8003508 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003508:	6863      	ldr	r3, [r4, #4]
 800350a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800350e:	68a1      	ldr	r1, [r4, #8]
 8003510:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003514:	430b      	orrs	r3, r1
 8003516:	6921      	ldr	r1, [r4, #16]
 8003518:	f001 0102 	and.w	r1, r1, #2
 800351c:	430b      	orrs	r3, r1
 800351e:	6961      	ldr	r1, [r4, #20]
 8003520:	f001 0101 	and.w	r1, r1, #1
 8003524:	430b      	orrs	r3, r1
 8003526:	69a1      	ldr	r1, [r4, #24]
 8003528:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800352c:	430b      	orrs	r3, r1
 800352e:	69e1      	ldr	r1, [r4, #28]
 8003530:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003534:	430b      	orrs	r3, r1
 8003536:	6a21      	ldr	r1, [r4, #32]
 8003538:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800353c:	430b      	orrs	r3, r1
 800353e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003540:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	430b      	orrs	r3, r1
 8003548:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800354a:	8b63      	ldrh	r3, [r4, #26]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003552:	f001 0110 	and.w	r1, r1, #16
 8003556:	430b      	orrs	r3, r1
 8003558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800355a:	f001 0108 	and.w	r1, r1, #8
 800355e:	430b      	orrs	r3, r1
 8003560:	68e1      	ldr	r1, [r4, #12]
 8003562:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003566:	430b      	orrs	r3, r1
 8003568:	6821      	ldr	r1, [r4, #0]
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800356e:	2000      	movs	r0, #0
 8003570:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003572:	2301      	movs	r3, #1
 8003574:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003578:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800357a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800357e:	4620      	mov	r0, r4
 8003580:	f7fd fdc0 	bl	8001104 <HAL_SPI_MspInit>
 8003584:	e7ab      	b.n	80034de <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003586:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800358a:	e7b5      	b.n	80034f8 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 800358c:	2001      	movs	r0, #1
}
 800358e:	4770      	bx	lr

08003590 <HAL_SPI_TransmitReceive>:
{
 8003590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003594:	461f      	mov	r7, r3
 8003596:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003598:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800359c:	2b01      	cmp	r3, #1
 800359e:	f000 8164 	beq.w	800386a <HAL_SPI_TransmitReceive+0x2da>
 80035a2:	4604      	mov	r4, r0
 80035a4:	4688      	mov	r8, r1
 80035a6:	4691      	mov	r9, r2
 80035a8:	2301      	movs	r3, #1
 80035aa:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80035ae:	f7fe f935 	bl	800181c <HAL_GetTick>
 80035b2:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80035b4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80035b8:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80035ba:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d00a      	beq.n	80035d6 <HAL_SPI_TransmitReceive+0x46>
 80035c0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80035c4:	f040 8138 	bne.w	8003838 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035c8:	68a2      	ldr	r2, [r4, #8]
 80035ca:	2a00      	cmp	r2, #0
 80035cc:	f040 813d 	bne.w	800384a <HAL_SPI_TransmitReceive+0x2ba>
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	f040 813c 	bne.w	800384e <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035d6:	f1b8 0f00 	cmp.w	r8, #0
 80035da:	f000 813a 	beq.w	8003852 <HAL_SPI_TransmitReceive+0x2c2>
 80035de:	f1b9 0f00 	cmp.w	r9, #0
 80035e2:	f000 8138 	beq.w	8003856 <HAL_SPI_TransmitReceive+0x2c6>
 80035e6:	2f00      	cmp	r7, #0
 80035e8:	f000 8137 	beq.w	800385a <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035ec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d002      	beq.n	80035fc <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035f6:	2305      	movs	r3, #5
 80035f8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003600:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003604:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003608:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800360c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003610:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003612:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8003614:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003616:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003618:	68e3      	ldr	r3, [r4, #12]
 800361a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800361e:	d801      	bhi.n	8003624 <HAL_SPI_TransmitReceive+0x94>
 8003620:	2f01      	cmp	r7, #1
 8003622:	d923      	bls.n	800366c <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003624:	6822      	ldr	r2, [r4, #0]
 8003626:	6853      	ldr	r3, [r2, #4]
 8003628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800362c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003636:	d103      	bne.n	8003640 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003640:	68e3      	ldr	r3, [r4, #12]
 8003642:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003646:	d958      	bls.n	80036fa <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003648:	6863      	ldr	r3, [r4, #4]
 800364a:	b10b      	cbz	r3, 8003650 <HAL_SPI_TransmitReceive+0xc0>
 800364c:	2f01      	cmp	r7, #1
 800364e:	d10b      	bne.n	8003668 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003650:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	8812      	ldrh	r2, [r2, #0]
 8003656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800365a:	3302      	adds	r3, #2
 800365c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800365e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29b      	uxth	r3, r3
 8003666:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003668:	2701      	movs	r7, #1
 800366a:	e025      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x128>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	6853      	ldr	r3, [r2, #4]
 8003670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003674:	6053      	str	r3, [r2, #4]
 8003676:	e7da      	b.n	800362e <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	f012 0f01 	tst.w	r2, #1
 8003680:	d011      	beq.n	80036a6 <HAL_SPI_TransmitReceive+0x116>
 8003682:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003686:	b292      	uxth	r2, r2
 8003688:	b16a      	cbz	r2, 80036a6 <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800368e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003690:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003692:	3302      	adds	r3, #2
 8003694:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003696:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80036a4:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036a6:	f7fe f8b9 	bl	800181c <HAL_GetTick>
 80036aa:	1b83      	subs	r3, r0, r6
 80036ac:	42ab      	cmp	r3, r5
 80036ae:	d303      	bcc.n	80036b8 <HAL_SPI_TransmitReceive+0x128>
 80036b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80036b4:	f040 80d3 	bne.w	800385e <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	b92b      	cbnz	r3, 80036ca <HAL_SPI_TransmitReceive+0x13a>
 80036be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80ad 	beq.w	8003824 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	f012 0f02 	tst.w	r2, #2
 80036d2:	d0d1      	beq.n	8003678 <HAL_SPI_TransmitReceive+0xe8>
 80036d4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80036d6:	b292      	uxth	r2, r2
 80036d8:	2a00      	cmp	r2, #0
 80036da:	d0cd      	beq.n	8003678 <HAL_SPI_TransmitReceive+0xe8>
 80036dc:	2f00      	cmp	r7, #0
 80036de:	d0cb      	beq.n	8003678 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80036e2:	8812      	ldrh	r2, [r2, #0]
 80036e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036e8:	3302      	adds	r3, #2
 80036ea:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80036ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80036f6:	2700      	movs	r7, #0
 80036f8:	e7be      	b.n	8003678 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036fa:	6863      	ldr	r3, [r4, #4]
 80036fc:	b10b      	cbz	r3, 8003702 <HAL_SPI_TransmitReceive+0x172>
 80036fe:	2f01      	cmp	r7, #1
 8003700:	d10f      	bne.n	8003722 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8003702:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d90d      	bls.n	8003726 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800370a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	8812      	ldrh	r2, [r2, #0]
 8003710:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003712:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003714:	3302      	adds	r3, #2
 8003716:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003718:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b02      	subs	r3, #2
 800371e:	b29b      	uxth	r3, r3
 8003720:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003722:	2701      	movs	r7, #1
 8003724:	e049      	b.n	80037ba <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003726:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	7812      	ldrb	r2, [r2, #0]
 800372c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800372e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003730:	3301      	adds	r3, #1
 8003732:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003734:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29b      	uxth	r3, r3
 800373c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800373e:	e7f0      	b.n	8003722 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8003740:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003742:	b292      	uxth	r2, r2
 8003744:	2a01      	cmp	r2, #1
 8003746:	d90c      	bls.n	8003762 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003748:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800374e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003750:	3302      	adds	r3, #2
 8003752:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003754:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b02      	subs	r3, #2
 800375a:	b29b      	uxth	r3, r3
 800375c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800375e:	2700      	movs	r7, #0
 8003760:	e03d      	b.n	80037de <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003762:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800376a:	3301      	adds	r3, #1
 800376c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800376e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29b      	uxth	r3, r3
 8003776:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003778:	2700      	movs	r7, #0
 800377a:	e030      	b.n	80037de <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800377c:	6822      	ldr	r2, [r4, #0]
 800377e:	6853      	ldr	r3, [r2, #4]
 8003780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003784:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8003786:	2701      	movs	r7, #1
 8003788:	e00d      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800378a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800378c:	7b1b      	ldrb	r3, [r3, #12]
 800378e:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003792:	3301      	adds	r3, #1
 8003794:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003796:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80037a4:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037a6:	f7fe f839 	bl	800181c <HAL_GetTick>
 80037aa:	1b80      	subs	r0, r0, r6
 80037ac:	42a8      	cmp	r0, r5
 80037ae:	d302      	bcc.n	80037b6 <HAL_SPI_TransmitReceive+0x226>
 80037b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037b4:	d155      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x2d2>
 80037b6:	2d00      	cmp	r5, #0
 80037b8:	d055      	beq.n	8003866 <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	b923      	cbnz	r3, 80037ca <HAL_SPI_TransmitReceive+0x23a>
 80037c0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d02c      	beq.n	8003824 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	f012 0f02 	tst.w	r2, #2
 80037d2:	d004      	beq.n	80037de <HAL_SPI_TransmitReceive+0x24e>
 80037d4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80037d6:	b292      	uxth	r2, r2
 80037d8:	b10a      	cbz	r2, 80037de <HAL_SPI_TransmitReceive+0x24e>
 80037da:	2f00      	cmp	r7, #0
 80037dc:	d1b0      	bne.n	8003740 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	f012 0f01 	tst.w	r2, #1
 80037e6:	d0de      	beq.n	80037a6 <HAL_SPI_TransmitReceive+0x216>
 80037e8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80037ec:	b292      	uxth	r2, r2
 80037ee:	2a00      	cmp	r2, #0
 80037f0:	d0d9      	beq.n	80037a6 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 80037f2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80037f6:	b292      	uxth	r2, r2
 80037f8:	2a01      	cmp	r2, #1
 80037fa:	d9c6      	bls.n	800378a <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003800:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003804:	3302      	adds	r3, #2
 8003806:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003808:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b02      	subs	r3, #2
 8003810:	b29b      	uxth	r3, r3
 8003812:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003816:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d9ad      	bls.n	800377c <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8003820:	2701      	movs	r7, #1
 8003822:	e7c0      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003824:	4632      	mov	r2, r6
 8003826:	4629      	mov	r1, r5
 8003828:	4620      	mov	r0, r4
 800382a:	f7ff fe11 	bl	8003450 <SPI_EndRxTxTransaction>
 800382e:	b120      	cbz	r0, 800383a <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003830:	2320      	movs	r3, #32
 8003832:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003834:	2001      	movs	r0, #1
 8003836:	e000      	b.n	800383a <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8003838:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800383a:	2301      	movs	r3, #1
 800383c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003840:	2300      	movs	r3, #0
 8003842:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800384a:	2002      	movs	r0, #2
 800384c:	e7f5      	b.n	800383a <HAL_SPI_TransmitReceive+0x2aa>
 800384e:	2002      	movs	r0, #2
 8003850:	e7f3      	b.n	800383a <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8003852:	2001      	movs	r0, #1
 8003854:	e7f1      	b.n	800383a <HAL_SPI_TransmitReceive+0x2aa>
 8003856:	2001      	movs	r0, #1
 8003858:	e7ef      	b.n	800383a <HAL_SPI_TransmitReceive+0x2aa>
 800385a:	2001      	movs	r0, #1
 800385c:	e7ed      	b.n	800383a <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 800385e:	2003      	movs	r0, #3
 8003860:	e7eb      	b.n	800383a <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003862:	2003      	movs	r0, #3
 8003864:	e7e9      	b.n	800383a <HAL_SPI_TransmitReceive+0x2aa>
 8003866:	2003      	movs	r0, #3
 8003868:	e7e7      	b.n	800383a <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 800386a:	2002      	movs	r0, #2
 800386c:	e7eb      	b.n	8003846 <HAL_SPI_TransmitReceive+0x2b6>
	...

08003870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003874:	f7fd fcec 	bl	8001250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003878:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800387a:	e003      	b.n	8003884 <LoopCopyDataInit>

0800387c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800387e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003880:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003882:	3104      	adds	r1, #4

08003884 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003884:	480a      	ldr	r0, [pc, #40]	; (80038b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003888:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800388a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800388c:	d3f6      	bcc.n	800387c <CopyDataInit>
	ldr	r2, =_sbss
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003890:	e002      	b.n	8003898 <LoopFillZerobss>

08003892 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003892:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003894:	f842 3b04 	str.w	r3, [r2], #4

08003898 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003898:	4b08      	ldr	r3, [pc, #32]	; (80038bc <LoopForever+0x16>)
	cmp	r2, r3
 800389a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800389c:	d3f9      	bcc.n	8003892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800389e:	f000 f817 	bl	80038d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038a2:	f7fd fb05 	bl	8000eb0 <main>

080038a6 <LoopForever>:

LoopForever:
    b LoopForever
 80038a6:	e7fe      	b.n	80038a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80038a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80038ac:	08006c40 	.word	0x08006c40
	ldr	r0, =_sdata
 80038b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80038b4:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 80038b8:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 80038bc:	200010c0 	.word	0x200010c0

080038c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038c0:	e7fe      	b.n	80038c0 <ADC1_2_IRQHandler>
	...

080038c4 <__errno>:
 80038c4:	4b01      	ldr	r3, [pc, #4]	; (80038cc <__errno+0x8>)
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000018 	.word	0x20000018

080038d0 <__libc_init_array>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	4d0d      	ldr	r5, [pc, #52]	; (8003908 <__libc_init_array+0x38>)
 80038d4:	4c0d      	ldr	r4, [pc, #52]	; (800390c <__libc_init_array+0x3c>)
 80038d6:	1b64      	subs	r4, r4, r5
 80038d8:	10a4      	asrs	r4, r4, #2
 80038da:	2600      	movs	r6, #0
 80038dc:	42a6      	cmp	r6, r4
 80038de:	d109      	bne.n	80038f4 <__libc_init_array+0x24>
 80038e0:	4d0b      	ldr	r5, [pc, #44]	; (8003910 <__libc_init_array+0x40>)
 80038e2:	4c0c      	ldr	r4, [pc, #48]	; (8003914 <__libc_init_array+0x44>)
 80038e4:	f002 fec4 	bl	8006670 <_init>
 80038e8:	1b64      	subs	r4, r4, r5
 80038ea:	10a4      	asrs	r4, r4, #2
 80038ec:	2600      	movs	r6, #0
 80038ee:	42a6      	cmp	r6, r4
 80038f0:	d105      	bne.n	80038fe <__libc_init_array+0x2e>
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f8:	4798      	blx	r3
 80038fa:	3601      	adds	r6, #1
 80038fc:	e7ee      	b.n	80038dc <__libc_init_array+0xc>
 80038fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003902:	4798      	blx	r3
 8003904:	3601      	adds	r6, #1
 8003906:	e7f2      	b.n	80038ee <__libc_init_array+0x1e>
 8003908:	08006c30 	.word	0x08006c30
 800390c:	08006c30 	.word	0x08006c30
 8003910:	08006c30 	.word	0x08006c30
 8003914:	08006c34 	.word	0x08006c34

08003918 <memcpy>:
 8003918:	440a      	add	r2, r1
 800391a:	4291      	cmp	r1, r2
 800391c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003920:	d100      	bne.n	8003924 <memcpy+0xc>
 8003922:	4770      	bx	lr
 8003924:	b510      	push	{r4, lr}
 8003926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800392a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800392e:	4291      	cmp	r1, r2
 8003930:	d1f9      	bne.n	8003926 <memcpy+0xe>
 8003932:	bd10      	pop	{r4, pc}

08003934 <memset>:
 8003934:	4402      	add	r2, r0
 8003936:	4603      	mov	r3, r0
 8003938:	4293      	cmp	r3, r2
 800393a:	d100      	bne.n	800393e <memset+0xa>
 800393c:	4770      	bx	lr
 800393e:	f803 1b01 	strb.w	r1, [r3], #1
 8003942:	e7f9      	b.n	8003938 <memset+0x4>

08003944 <__cvt>:
 8003944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	ec55 4b10 	vmov	r4, r5, d0
 800394c:	2d00      	cmp	r5, #0
 800394e:	460e      	mov	r6, r1
 8003950:	4619      	mov	r1, r3
 8003952:	462b      	mov	r3, r5
 8003954:	bfbb      	ittet	lt
 8003956:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800395a:	461d      	movlt	r5, r3
 800395c:	2300      	movge	r3, #0
 800395e:	232d      	movlt	r3, #45	; 0x2d
 8003960:	700b      	strb	r3, [r1, #0]
 8003962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003964:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003968:	4691      	mov	r9, r2
 800396a:	f023 0820 	bic.w	r8, r3, #32
 800396e:	bfbc      	itt	lt
 8003970:	4622      	movlt	r2, r4
 8003972:	4614      	movlt	r4, r2
 8003974:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003978:	d005      	beq.n	8003986 <__cvt+0x42>
 800397a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800397e:	d100      	bne.n	8003982 <__cvt+0x3e>
 8003980:	3601      	adds	r6, #1
 8003982:	2102      	movs	r1, #2
 8003984:	e000      	b.n	8003988 <__cvt+0x44>
 8003986:	2103      	movs	r1, #3
 8003988:	ab03      	add	r3, sp, #12
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	ab02      	add	r3, sp, #8
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	ec45 4b10 	vmov	d0, r4, r5
 8003994:	4653      	mov	r3, sl
 8003996:	4632      	mov	r2, r6
 8003998:	f000 fcfa 	bl	8004390 <_dtoa_r>
 800399c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039a0:	4607      	mov	r7, r0
 80039a2:	d102      	bne.n	80039aa <__cvt+0x66>
 80039a4:	f019 0f01 	tst.w	r9, #1
 80039a8:	d022      	beq.n	80039f0 <__cvt+0xac>
 80039aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80039ae:	eb07 0906 	add.w	r9, r7, r6
 80039b2:	d110      	bne.n	80039d6 <__cvt+0x92>
 80039b4:	783b      	ldrb	r3, [r7, #0]
 80039b6:	2b30      	cmp	r3, #48	; 0x30
 80039b8:	d10a      	bne.n	80039d0 <__cvt+0x8c>
 80039ba:	2200      	movs	r2, #0
 80039bc:	2300      	movs	r3, #0
 80039be:	4620      	mov	r0, r4
 80039c0:	4629      	mov	r1, r5
 80039c2:	f7fd f881 	bl	8000ac8 <__aeabi_dcmpeq>
 80039c6:	b918      	cbnz	r0, 80039d0 <__cvt+0x8c>
 80039c8:	f1c6 0601 	rsb	r6, r6, #1
 80039cc:	f8ca 6000 	str.w	r6, [sl]
 80039d0:	f8da 3000 	ldr.w	r3, [sl]
 80039d4:	4499      	add	r9, r3
 80039d6:	2200      	movs	r2, #0
 80039d8:	2300      	movs	r3, #0
 80039da:	4620      	mov	r0, r4
 80039dc:	4629      	mov	r1, r5
 80039de:	f7fd f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80039e2:	b108      	cbz	r0, 80039e8 <__cvt+0xa4>
 80039e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80039e8:	2230      	movs	r2, #48	; 0x30
 80039ea:	9b03      	ldr	r3, [sp, #12]
 80039ec:	454b      	cmp	r3, r9
 80039ee:	d307      	bcc.n	8003a00 <__cvt+0xbc>
 80039f0:	9b03      	ldr	r3, [sp, #12]
 80039f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039f4:	1bdb      	subs	r3, r3, r7
 80039f6:	4638      	mov	r0, r7
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	b004      	add	sp, #16
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	1c59      	adds	r1, r3, #1
 8003a02:	9103      	str	r1, [sp, #12]
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e7f0      	b.n	80039ea <__cvt+0xa6>

08003a08 <__exponent>:
 8003a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2900      	cmp	r1, #0
 8003a0e:	bfb8      	it	lt
 8003a10:	4249      	neglt	r1, r1
 8003a12:	f803 2b02 	strb.w	r2, [r3], #2
 8003a16:	bfb4      	ite	lt
 8003a18:	222d      	movlt	r2, #45	; 0x2d
 8003a1a:	222b      	movge	r2, #43	; 0x2b
 8003a1c:	2909      	cmp	r1, #9
 8003a1e:	7042      	strb	r2, [r0, #1]
 8003a20:	dd2a      	ble.n	8003a78 <__exponent+0x70>
 8003a22:	f10d 0407 	add.w	r4, sp, #7
 8003a26:	46a4      	mov	ip, r4
 8003a28:	270a      	movs	r7, #10
 8003a2a:	46a6      	mov	lr, r4
 8003a2c:	460a      	mov	r2, r1
 8003a2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a32:	fb07 1516 	mls	r5, r7, r6, r1
 8003a36:	3530      	adds	r5, #48	; 0x30
 8003a38:	2a63      	cmp	r2, #99	; 0x63
 8003a3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003a3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a42:	4631      	mov	r1, r6
 8003a44:	dcf1      	bgt.n	8003a2a <__exponent+0x22>
 8003a46:	3130      	adds	r1, #48	; 0x30
 8003a48:	f1ae 0502 	sub.w	r5, lr, #2
 8003a4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a50:	1c44      	adds	r4, r0, #1
 8003a52:	4629      	mov	r1, r5
 8003a54:	4561      	cmp	r1, ip
 8003a56:	d30a      	bcc.n	8003a6e <__exponent+0x66>
 8003a58:	f10d 0209 	add.w	r2, sp, #9
 8003a5c:	eba2 020e 	sub.w	r2, r2, lr
 8003a60:	4565      	cmp	r5, ip
 8003a62:	bf88      	it	hi
 8003a64:	2200      	movhi	r2, #0
 8003a66:	4413      	add	r3, r2
 8003a68:	1a18      	subs	r0, r3, r0
 8003a6a:	b003      	add	sp, #12
 8003a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a76:	e7ed      	b.n	8003a54 <__exponent+0x4c>
 8003a78:	2330      	movs	r3, #48	; 0x30
 8003a7a:	3130      	adds	r1, #48	; 0x30
 8003a7c:	7083      	strb	r3, [r0, #2]
 8003a7e:	70c1      	strb	r1, [r0, #3]
 8003a80:	1d03      	adds	r3, r0, #4
 8003a82:	e7f1      	b.n	8003a68 <__exponent+0x60>

08003a84 <_printf_float>:
 8003a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a88:	ed2d 8b02 	vpush	{d8}
 8003a8c:	b08d      	sub	sp, #52	; 0x34
 8003a8e:	460c      	mov	r4, r1
 8003a90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003a94:	4616      	mov	r6, r2
 8003a96:	461f      	mov	r7, r3
 8003a98:	4605      	mov	r5, r0
 8003a9a:	f001 fa65 	bl	8004f68 <_localeconv_r>
 8003a9e:	f8d0 a000 	ldr.w	sl, [r0]
 8003aa2:	4650      	mov	r0, sl
 8003aa4:	f7fc fb94 	bl	80001d0 <strlen>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	9305      	str	r3, [sp, #20]
 8003ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ab8:	3307      	adds	r3, #7
 8003aba:	f023 0307 	bic.w	r3, r3, #7
 8003abe:	f103 0208 	add.w	r2, r3, #8
 8003ac2:	f8c8 2000 	str.w	r2, [r8]
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ace:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ad2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ad6:	9307      	str	r3, [sp, #28]
 8003ad8:	f8cd 8018 	str.w	r8, [sp, #24]
 8003adc:	ee08 0a10 	vmov	s16, r0
 8003ae0:	4b9f      	ldr	r3, [pc, #636]	; (8003d60 <_printf_float+0x2dc>)
 8003ae2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aea:	f7fd f81f 	bl	8000b2c <__aeabi_dcmpun>
 8003aee:	bb88      	cbnz	r0, 8003b54 <_printf_float+0xd0>
 8003af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003af4:	4b9a      	ldr	r3, [pc, #616]	; (8003d60 <_printf_float+0x2dc>)
 8003af6:	f04f 32ff 	mov.w	r2, #4294967295
 8003afa:	f7fc fff9 	bl	8000af0 <__aeabi_dcmple>
 8003afe:	bb48      	cbnz	r0, 8003b54 <_printf_float+0xd0>
 8003b00:	2200      	movs	r2, #0
 8003b02:	2300      	movs	r3, #0
 8003b04:	4640      	mov	r0, r8
 8003b06:	4649      	mov	r1, r9
 8003b08:	f7fc ffe8 	bl	8000adc <__aeabi_dcmplt>
 8003b0c:	b110      	cbz	r0, 8003b14 <_printf_float+0x90>
 8003b0e:	232d      	movs	r3, #45	; 0x2d
 8003b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b14:	4b93      	ldr	r3, [pc, #588]	; (8003d64 <_printf_float+0x2e0>)
 8003b16:	4894      	ldr	r0, [pc, #592]	; (8003d68 <_printf_float+0x2e4>)
 8003b18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003b1c:	bf94      	ite	ls
 8003b1e:	4698      	movls	r8, r3
 8003b20:	4680      	movhi	r8, r0
 8003b22:	2303      	movs	r3, #3
 8003b24:	6123      	str	r3, [r4, #16]
 8003b26:	9b05      	ldr	r3, [sp, #20]
 8003b28:	f023 0204 	bic.w	r2, r3, #4
 8003b2c:	6022      	str	r2, [r4, #0]
 8003b2e:	f04f 0900 	mov.w	r9, #0
 8003b32:	9700      	str	r7, [sp, #0]
 8003b34:	4633      	mov	r3, r6
 8003b36:	aa0b      	add	r2, sp, #44	; 0x2c
 8003b38:	4621      	mov	r1, r4
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	f000 f9d8 	bl	8003ef0 <_printf_common>
 8003b40:	3001      	adds	r0, #1
 8003b42:	f040 8090 	bne.w	8003c66 <_printf_float+0x1e2>
 8003b46:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4a:	b00d      	add	sp, #52	; 0x34
 8003b4c:	ecbd 8b02 	vpop	{d8}
 8003b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	4640      	mov	r0, r8
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	f7fc ffe6 	bl	8000b2c <__aeabi_dcmpun>
 8003b60:	b140      	cbz	r0, 8003b74 <_printf_float+0xf0>
 8003b62:	464b      	mov	r3, r9
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bfbc      	itt	lt
 8003b68:	232d      	movlt	r3, #45	; 0x2d
 8003b6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b6e:	487f      	ldr	r0, [pc, #508]	; (8003d6c <_printf_float+0x2e8>)
 8003b70:	4b7f      	ldr	r3, [pc, #508]	; (8003d70 <_printf_float+0x2ec>)
 8003b72:	e7d1      	b.n	8003b18 <_printf_float+0x94>
 8003b74:	6863      	ldr	r3, [r4, #4]
 8003b76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b7a:	9206      	str	r2, [sp, #24]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	d13f      	bne.n	8003c00 <_printf_float+0x17c>
 8003b80:	2306      	movs	r3, #6
 8003b82:	6063      	str	r3, [r4, #4]
 8003b84:	9b05      	ldr	r3, [sp, #20]
 8003b86:	6861      	ldr	r1, [r4, #4]
 8003b88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	ab0a      	add	r3, sp, #40	; 0x28
 8003b92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003b96:	ab09      	add	r3, sp, #36	; 0x24
 8003b98:	ec49 8b10 	vmov	d0, r8, r9
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	6022      	str	r2, [r4, #0]
 8003ba0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	f7ff fecd 	bl	8003944 <__cvt>
 8003baa:	9b06      	ldr	r3, [sp, #24]
 8003bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bae:	2b47      	cmp	r3, #71	; 0x47
 8003bb0:	4680      	mov	r8, r0
 8003bb2:	d108      	bne.n	8003bc6 <_printf_float+0x142>
 8003bb4:	1cc8      	adds	r0, r1, #3
 8003bb6:	db02      	blt.n	8003bbe <_printf_float+0x13a>
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	4299      	cmp	r1, r3
 8003bbc:	dd41      	ble.n	8003c42 <_printf_float+0x1be>
 8003bbe:	f1ab 0b02 	sub.w	fp, fp, #2
 8003bc2:	fa5f fb8b 	uxtb.w	fp, fp
 8003bc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003bca:	d820      	bhi.n	8003c0e <_printf_float+0x18a>
 8003bcc:	3901      	subs	r1, #1
 8003bce:	465a      	mov	r2, fp
 8003bd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bd4:	9109      	str	r1, [sp, #36]	; 0x24
 8003bd6:	f7ff ff17 	bl	8003a08 <__exponent>
 8003bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bdc:	1813      	adds	r3, r2, r0
 8003bde:	2a01      	cmp	r2, #1
 8003be0:	4681      	mov	r9, r0
 8003be2:	6123      	str	r3, [r4, #16]
 8003be4:	dc02      	bgt.n	8003bec <_printf_float+0x168>
 8003be6:	6822      	ldr	r2, [r4, #0]
 8003be8:	07d2      	lsls	r2, r2, #31
 8003bea:	d501      	bpl.n	8003bf0 <_printf_float+0x16c>
 8003bec:	3301      	adds	r3, #1
 8003bee:	6123      	str	r3, [r4, #16]
 8003bf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d09c      	beq.n	8003b32 <_printf_float+0xae>
 8003bf8:	232d      	movs	r3, #45	; 0x2d
 8003bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bfe:	e798      	b.n	8003b32 <_printf_float+0xae>
 8003c00:	9a06      	ldr	r2, [sp, #24]
 8003c02:	2a47      	cmp	r2, #71	; 0x47
 8003c04:	d1be      	bne.n	8003b84 <_printf_float+0x100>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1bc      	bne.n	8003b84 <_printf_float+0x100>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e7b9      	b.n	8003b82 <_printf_float+0xfe>
 8003c0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003c12:	d118      	bne.n	8003c46 <_printf_float+0x1c2>
 8003c14:	2900      	cmp	r1, #0
 8003c16:	6863      	ldr	r3, [r4, #4]
 8003c18:	dd0b      	ble.n	8003c32 <_printf_float+0x1ae>
 8003c1a:	6121      	str	r1, [r4, #16]
 8003c1c:	b913      	cbnz	r3, 8003c24 <_printf_float+0x1a0>
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	07d0      	lsls	r0, r2, #31
 8003c22:	d502      	bpl.n	8003c2a <_printf_float+0x1a6>
 8003c24:	3301      	adds	r3, #1
 8003c26:	440b      	add	r3, r1
 8003c28:	6123      	str	r3, [r4, #16]
 8003c2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c2c:	f04f 0900 	mov.w	r9, #0
 8003c30:	e7de      	b.n	8003bf0 <_printf_float+0x16c>
 8003c32:	b913      	cbnz	r3, 8003c3a <_printf_float+0x1b6>
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	07d2      	lsls	r2, r2, #31
 8003c38:	d501      	bpl.n	8003c3e <_printf_float+0x1ba>
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	e7f4      	b.n	8003c28 <_printf_float+0x1a4>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e7f2      	b.n	8003c28 <_printf_float+0x1a4>
 8003c42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c48:	4299      	cmp	r1, r3
 8003c4a:	db05      	blt.n	8003c58 <_printf_float+0x1d4>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	6121      	str	r1, [r4, #16]
 8003c50:	07d8      	lsls	r0, r3, #31
 8003c52:	d5ea      	bpl.n	8003c2a <_printf_float+0x1a6>
 8003c54:	1c4b      	adds	r3, r1, #1
 8003c56:	e7e7      	b.n	8003c28 <_printf_float+0x1a4>
 8003c58:	2900      	cmp	r1, #0
 8003c5a:	bfd4      	ite	le
 8003c5c:	f1c1 0202 	rsble	r2, r1, #2
 8003c60:	2201      	movgt	r2, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	e7e0      	b.n	8003c28 <_printf_float+0x1a4>
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	055a      	lsls	r2, r3, #21
 8003c6a:	d407      	bmi.n	8003c7c <_printf_float+0x1f8>
 8003c6c:	6923      	ldr	r3, [r4, #16]
 8003c6e:	4642      	mov	r2, r8
 8003c70:	4631      	mov	r1, r6
 8003c72:	4628      	mov	r0, r5
 8003c74:	47b8      	blx	r7
 8003c76:	3001      	adds	r0, #1
 8003c78:	d12c      	bne.n	8003cd4 <_printf_float+0x250>
 8003c7a:	e764      	b.n	8003b46 <_printf_float+0xc2>
 8003c7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c80:	f240 80e0 	bls.w	8003e44 <_printf_float+0x3c0>
 8003c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f7fc ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d034      	beq.n	8003cfe <_printf_float+0x27a>
 8003c94:	4a37      	ldr	r2, [pc, #220]	; (8003d74 <_printf_float+0x2f0>)
 8003c96:	2301      	movs	r3, #1
 8003c98:	4631      	mov	r1, r6
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	47b8      	blx	r7
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	f43f af51 	beq.w	8003b46 <_printf_float+0xc2>
 8003ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	db02      	blt.n	8003cb2 <_printf_float+0x22e>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	07d8      	lsls	r0, r3, #31
 8003cb0:	d510      	bpl.n	8003cd4 <_printf_float+0x250>
 8003cb2:	ee18 3a10 	vmov	r3, s16
 8003cb6:	4652      	mov	r2, sl
 8003cb8:	4631      	mov	r1, r6
 8003cba:	4628      	mov	r0, r5
 8003cbc:	47b8      	blx	r7
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	f43f af41 	beq.w	8003b46 <_printf_float+0xc2>
 8003cc4:	f04f 0800 	mov.w	r8, #0
 8003cc8:	f104 091a 	add.w	r9, r4, #26
 8003ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	4543      	cmp	r3, r8
 8003cd2:	dc09      	bgt.n	8003ce8 <_printf_float+0x264>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	079b      	lsls	r3, r3, #30
 8003cd8:	f100 8105 	bmi.w	8003ee6 <_printf_float+0x462>
 8003cdc:	68e0      	ldr	r0, [r4, #12]
 8003cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ce0:	4298      	cmp	r0, r3
 8003ce2:	bfb8      	it	lt
 8003ce4:	4618      	movlt	r0, r3
 8003ce6:	e730      	b.n	8003b4a <_printf_float+0xc6>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	464a      	mov	r2, r9
 8003cec:	4631      	mov	r1, r6
 8003cee:	4628      	mov	r0, r5
 8003cf0:	47b8      	blx	r7
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	f43f af27 	beq.w	8003b46 <_printf_float+0xc2>
 8003cf8:	f108 0801 	add.w	r8, r8, #1
 8003cfc:	e7e6      	b.n	8003ccc <_printf_float+0x248>
 8003cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	dc39      	bgt.n	8003d78 <_printf_float+0x2f4>
 8003d04:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <_printf_float+0x2f0>)
 8003d06:	2301      	movs	r3, #1
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	47b8      	blx	r7
 8003d0e:	3001      	adds	r0, #1
 8003d10:	f43f af19 	beq.w	8003b46 <_printf_float+0xc2>
 8003d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	d102      	bne.n	8003d22 <_printf_float+0x29e>
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	07d9      	lsls	r1, r3, #31
 8003d20:	d5d8      	bpl.n	8003cd4 <_printf_float+0x250>
 8003d22:	ee18 3a10 	vmov	r3, s16
 8003d26:	4652      	mov	r2, sl
 8003d28:	4631      	mov	r1, r6
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	47b8      	blx	r7
 8003d2e:	3001      	adds	r0, #1
 8003d30:	f43f af09 	beq.w	8003b46 <_printf_float+0xc2>
 8003d34:	f04f 0900 	mov.w	r9, #0
 8003d38:	f104 0a1a 	add.w	sl, r4, #26
 8003d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d3e:	425b      	negs	r3, r3
 8003d40:	454b      	cmp	r3, r9
 8003d42:	dc01      	bgt.n	8003d48 <_printf_float+0x2c4>
 8003d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d46:	e792      	b.n	8003c6e <_printf_float+0x1ea>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	4652      	mov	r2, sl
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	4628      	mov	r0, r5
 8003d50:	47b8      	blx	r7
 8003d52:	3001      	adds	r0, #1
 8003d54:	f43f aef7 	beq.w	8003b46 <_printf_float+0xc2>
 8003d58:	f109 0901 	add.w	r9, r9, #1
 8003d5c:	e7ee      	b.n	8003d3c <_printf_float+0x2b8>
 8003d5e:	bf00      	nop
 8003d60:	7fefffff 	.word	0x7fefffff
 8003d64:	08006850 	.word	0x08006850
 8003d68:	08006854 	.word	0x08006854
 8003d6c:	0800685c 	.word	0x0800685c
 8003d70:	08006858 	.word	0x08006858
 8003d74:	08006860 	.word	0x08006860
 8003d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	bfa8      	it	ge
 8003d80:	461a      	movge	r2, r3
 8003d82:	2a00      	cmp	r2, #0
 8003d84:	4691      	mov	r9, r2
 8003d86:	dc37      	bgt.n	8003df8 <_printf_float+0x374>
 8003d88:	f04f 0b00 	mov.w	fp, #0
 8003d8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d90:	f104 021a 	add.w	r2, r4, #26
 8003d94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d96:	9305      	str	r3, [sp, #20]
 8003d98:	eba3 0309 	sub.w	r3, r3, r9
 8003d9c:	455b      	cmp	r3, fp
 8003d9e:	dc33      	bgt.n	8003e08 <_printf_float+0x384>
 8003da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003da4:	429a      	cmp	r2, r3
 8003da6:	db3b      	blt.n	8003e20 <_printf_float+0x39c>
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	07da      	lsls	r2, r3, #31
 8003dac:	d438      	bmi.n	8003e20 <_printf_float+0x39c>
 8003dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003db0:	9b05      	ldr	r3, [sp, #20]
 8003db2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	eba2 0901 	sub.w	r9, r2, r1
 8003dba:	4599      	cmp	r9, r3
 8003dbc:	bfa8      	it	ge
 8003dbe:	4699      	movge	r9, r3
 8003dc0:	f1b9 0f00 	cmp.w	r9, #0
 8003dc4:	dc35      	bgt.n	8003e32 <_printf_float+0x3ae>
 8003dc6:	f04f 0800 	mov.w	r8, #0
 8003dca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dce:	f104 0a1a 	add.w	sl, r4, #26
 8003dd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	eba3 0309 	sub.w	r3, r3, r9
 8003ddc:	4543      	cmp	r3, r8
 8003dde:	f77f af79 	ble.w	8003cd4 <_printf_float+0x250>
 8003de2:	2301      	movs	r3, #1
 8003de4:	4652      	mov	r2, sl
 8003de6:	4631      	mov	r1, r6
 8003de8:	4628      	mov	r0, r5
 8003dea:	47b8      	blx	r7
 8003dec:	3001      	adds	r0, #1
 8003dee:	f43f aeaa 	beq.w	8003b46 <_printf_float+0xc2>
 8003df2:	f108 0801 	add.w	r8, r8, #1
 8003df6:	e7ec      	b.n	8003dd2 <_printf_float+0x34e>
 8003df8:	4613      	mov	r3, r2
 8003dfa:	4631      	mov	r1, r6
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	4628      	mov	r0, r5
 8003e00:	47b8      	blx	r7
 8003e02:	3001      	adds	r0, #1
 8003e04:	d1c0      	bne.n	8003d88 <_printf_float+0x304>
 8003e06:	e69e      	b.n	8003b46 <_printf_float+0xc2>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	9205      	str	r2, [sp, #20]
 8003e10:	47b8      	blx	r7
 8003e12:	3001      	adds	r0, #1
 8003e14:	f43f ae97 	beq.w	8003b46 <_printf_float+0xc2>
 8003e18:	9a05      	ldr	r2, [sp, #20]
 8003e1a:	f10b 0b01 	add.w	fp, fp, #1
 8003e1e:	e7b9      	b.n	8003d94 <_printf_float+0x310>
 8003e20:	ee18 3a10 	vmov	r3, s16
 8003e24:	4652      	mov	r2, sl
 8003e26:	4631      	mov	r1, r6
 8003e28:	4628      	mov	r0, r5
 8003e2a:	47b8      	blx	r7
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d1be      	bne.n	8003dae <_printf_float+0x32a>
 8003e30:	e689      	b.n	8003b46 <_printf_float+0xc2>
 8003e32:	9a05      	ldr	r2, [sp, #20]
 8003e34:	464b      	mov	r3, r9
 8003e36:	4442      	add	r2, r8
 8003e38:	4631      	mov	r1, r6
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	47b8      	blx	r7
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d1c1      	bne.n	8003dc6 <_printf_float+0x342>
 8003e42:	e680      	b.n	8003b46 <_printf_float+0xc2>
 8003e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e46:	2a01      	cmp	r2, #1
 8003e48:	dc01      	bgt.n	8003e4e <_printf_float+0x3ca>
 8003e4a:	07db      	lsls	r3, r3, #31
 8003e4c:	d538      	bpl.n	8003ec0 <_printf_float+0x43c>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4642      	mov	r2, r8
 8003e52:	4631      	mov	r1, r6
 8003e54:	4628      	mov	r0, r5
 8003e56:	47b8      	blx	r7
 8003e58:	3001      	adds	r0, #1
 8003e5a:	f43f ae74 	beq.w	8003b46 <_printf_float+0xc2>
 8003e5e:	ee18 3a10 	vmov	r3, s16
 8003e62:	4652      	mov	r2, sl
 8003e64:	4631      	mov	r1, r6
 8003e66:	4628      	mov	r0, r5
 8003e68:	47b8      	blx	r7
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	f43f ae6b 	beq.w	8003b46 <_printf_float+0xc2>
 8003e70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e74:	2200      	movs	r2, #0
 8003e76:	2300      	movs	r3, #0
 8003e78:	f7fc fe26 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e7c:	b9d8      	cbnz	r0, 8003eb6 <_printf_float+0x432>
 8003e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e80:	f108 0201 	add.w	r2, r8, #1
 8003e84:	3b01      	subs	r3, #1
 8003e86:	4631      	mov	r1, r6
 8003e88:	4628      	mov	r0, r5
 8003e8a:	47b8      	blx	r7
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d10e      	bne.n	8003eae <_printf_float+0x42a>
 8003e90:	e659      	b.n	8003b46 <_printf_float+0xc2>
 8003e92:	2301      	movs	r3, #1
 8003e94:	4652      	mov	r2, sl
 8003e96:	4631      	mov	r1, r6
 8003e98:	4628      	mov	r0, r5
 8003e9a:	47b8      	blx	r7
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	f43f ae52 	beq.w	8003b46 <_printf_float+0xc2>
 8003ea2:	f108 0801 	add.w	r8, r8, #1
 8003ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	4543      	cmp	r3, r8
 8003eac:	dcf1      	bgt.n	8003e92 <_printf_float+0x40e>
 8003eae:	464b      	mov	r3, r9
 8003eb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003eb4:	e6dc      	b.n	8003c70 <_printf_float+0x1ec>
 8003eb6:	f04f 0800 	mov.w	r8, #0
 8003eba:	f104 0a1a 	add.w	sl, r4, #26
 8003ebe:	e7f2      	b.n	8003ea6 <_printf_float+0x422>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	4642      	mov	r2, r8
 8003ec4:	e7df      	b.n	8003e86 <_printf_float+0x402>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	464a      	mov	r2, r9
 8003eca:	4631      	mov	r1, r6
 8003ecc:	4628      	mov	r0, r5
 8003ece:	47b8      	blx	r7
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	f43f ae38 	beq.w	8003b46 <_printf_float+0xc2>
 8003ed6:	f108 0801 	add.w	r8, r8, #1
 8003eda:	68e3      	ldr	r3, [r4, #12]
 8003edc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ede:	1a5b      	subs	r3, r3, r1
 8003ee0:	4543      	cmp	r3, r8
 8003ee2:	dcf0      	bgt.n	8003ec6 <_printf_float+0x442>
 8003ee4:	e6fa      	b.n	8003cdc <_printf_float+0x258>
 8003ee6:	f04f 0800 	mov.w	r8, #0
 8003eea:	f104 0919 	add.w	r9, r4, #25
 8003eee:	e7f4      	b.n	8003eda <_printf_float+0x456>

08003ef0 <_printf_common>:
 8003ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	4616      	mov	r6, r2
 8003ef6:	4699      	mov	r9, r3
 8003ef8:	688a      	ldr	r2, [r1, #8]
 8003efa:	690b      	ldr	r3, [r1, #16]
 8003efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f00:	4293      	cmp	r3, r2
 8003f02:	bfb8      	it	lt
 8003f04:	4613      	movlt	r3, r2
 8003f06:	6033      	str	r3, [r6, #0]
 8003f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	b10a      	cbz	r2, 8003f16 <_printf_common+0x26>
 8003f12:	3301      	adds	r3, #1
 8003f14:	6033      	str	r3, [r6, #0]
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	0699      	lsls	r1, r3, #26
 8003f1a:	bf42      	ittt	mi
 8003f1c:	6833      	ldrmi	r3, [r6, #0]
 8003f1e:	3302      	addmi	r3, #2
 8003f20:	6033      	strmi	r3, [r6, #0]
 8003f22:	6825      	ldr	r5, [r4, #0]
 8003f24:	f015 0506 	ands.w	r5, r5, #6
 8003f28:	d106      	bne.n	8003f38 <_printf_common+0x48>
 8003f2a:	f104 0a19 	add.w	sl, r4, #25
 8003f2e:	68e3      	ldr	r3, [r4, #12]
 8003f30:	6832      	ldr	r2, [r6, #0]
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	42ab      	cmp	r3, r5
 8003f36:	dc26      	bgt.n	8003f86 <_printf_common+0x96>
 8003f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f3c:	1e13      	subs	r3, r2, #0
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	bf18      	it	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	0692      	lsls	r2, r2, #26
 8003f46:	d42b      	bmi.n	8003fa0 <_printf_common+0xb0>
 8003f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	4638      	mov	r0, r7
 8003f50:	47c0      	blx	r8
 8003f52:	3001      	adds	r0, #1
 8003f54:	d01e      	beq.n	8003f94 <_printf_common+0xa4>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	68e5      	ldr	r5, [r4, #12]
 8003f5a:	6832      	ldr	r2, [r6, #0]
 8003f5c:	f003 0306 	and.w	r3, r3, #6
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	bf08      	it	eq
 8003f64:	1aad      	subeq	r5, r5, r2
 8003f66:	68a3      	ldr	r3, [r4, #8]
 8003f68:	6922      	ldr	r2, [r4, #16]
 8003f6a:	bf0c      	ite	eq
 8003f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f70:	2500      	movne	r5, #0
 8003f72:	4293      	cmp	r3, r2
 8003f74:	bfc4      	itt	gt
 8003f76:	1a9b      	subgt	r3, r3, r2
 8003f78:	18ed      	addgt	r5, r5, r3
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	341a      	adds	r4, #26
 8003f7e:	42b5      	cmp	r5, r6
 8003f80:	d11a      	bne.n	8003fb8 <_printf_common+0xc8>
 8003f82:	2000      	movs	r0, #0
 8003f84:	e008      	b.n	8003f98 <_printf_common+0xa8>
 8003f86:	2301      	movs	r3, #1
 8003f88:	4652      	mov	r2, sl
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	47c0      	blx	r8
 8003f90:	3001      	adds	r0, #1
 8003f92:	d103      	bne.n	8003f9c <_printf_common+0xac>
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9c:	3501      	adds	r5, #1
 8003f9e:	e7c6      	b.n	8003f2e <_printf_common+0x3e>
 8003fa0:	18e1      	adds	r1, r4, r3
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	2030      	movs	r0, #48	; 0x30
 8003fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003faa:	4422      	add	r2, r4
 8003fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	e7c7      	b.n	8003f48 <_printf_common+0x58>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4622      	mov	r2, r4
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	47c0      	blx	r8
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	d0e6      	beq.n	8003f94 <_printf_common+0xa4>
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7d9      	b.n	8003f7e <_printf_common+0x8e>
	...

08003fcc <_printf_i>:
 8003fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	4691      	mov	r9, r2
 8003fd4:	7e27      	ldrb	r7, [r4, #24]
 8003fd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fd8:	2f78      	cmp	r7, #120	; 0x78
 8003fda:	4680      	mov	r8, r0
 8003fdc:	469a      	mov	sl, r3
 8003fde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe2:	d807      	bhi.n	8003ff4 <_printf_i+0x28>
 8003fe4:	2f62      	cmp	r7, #98	; 0x62
 8003fe6:	d80a      	bhi.n	8003ffe <_printf_i+0x32>
 8003fe8:	2f00      	cmp	r7, #0
 8003fea:	f000 80d8 	beq.w	800419e <_printf_i+0x1d2>
 8003fee:	2f58      	cmp	r7, #88	; 0x58
 8003ff0:	f000 80a3 	beq.w	800413a <_printf_i+0x16e>
 8003ff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ffc:	e03a      	b.n	8004074 <_printf_i+0xa8>
 8003ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004002:	2b15      	cmp	r3, #21
 8004004:	d8f6      	bhi.n	8003ff4 <_printf_i+0x28>
 8004006:	a001      	add	r0, pc, #4	; (adr r0, 800400c <_printf_i+0x40>)
 8004008:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800400c:	08004065 	.word	0x08004065
 8004010:	08004079 	.word	0x08004079
 8004014:	08003ff5 	.word	0x08003ff5
 8004018:	08003ff5 	.word	0x08003ff5
 800401c:	08003ff5 	.word	0x08003ff5
 8004020:	08003ff5 	.word	0x08003ff5
 8004024:	08004079 	.word	0x08004079
 8004028:	08003ff5 	.word	0x08003ff5
 800402c:	08003ff5 	.word	0x08003ff5
 8004030:	08003ff5 	.word	0x08003ff5
 8004034:	08003ff5 	.word	0x08003ff5
 8004038:	08004185 	.word	0x08004185
 800403c:	080040a9 	.word	0x080040a9
 8004040:	08004167 	.word	0x08004167
 8004044:	08003ff5 	.word	0x08003ff5
 8004048:	08003ff5 	.word	0x08003ff5
 800404c:	080041a7 	.word	0x080041a7
 8004050:	08003ff5 	.word	0x08003ff5
 8004054:	080040a9 	.word	0x080040a9
 8004058:	08003ff5 	.word	0x08003ff5
 800405c:	08003ff5 	.word	0x08003ff5
 8004060:	0800416f 	.word	0x0800416f
 8004064:	680b      	ldr	r3, [r1, #0]
 8004066:	1d1a      	adds	r2, r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	600a      	str	r2, [r1, #0]
 800406c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004074:	2301      	movs	r3, #1
 8004076:	e0a3      	b.n	80041c0 <_printf_i+0x1f4>
 8004078:	6825      	ldr	r5, [r4, #0]
 800407a:	6808      	ldr	r0, [r1, #0]
 800407c:	062e      	lsls	r6, r5, #24
 800407e:	f100 0304 	add.w	r3, r0, #4
 8004082:	d50a      	bpl.n	800409a <_printf_i+0xce>
 8004084:	6805      	ldr	r5, [r0, #0]
 8004086:	600b      	str	r3, [r1, #0]
 8004088:	2d00      	cmp	r5, #0
 800408a:	da03      	bge.n	8004094 <_printf_i+0xc8>
 800408c:	232d      	movs	r3, #45	; 0x2d
 800408e:	426d      	negs	r5, r5
 8004090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004094:	485e      	ldr	r0, [pc, #376]	; (8004210 <_printf_i+0x244>)
 8004096:	230a      	movs	r3, #10
 8004098:	e019      	b.n	80040ce <_printf_i+0x102>
 800409a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800409e:	6805      	ldr	r5, [r0, #0]
 80040a0:	600b      	str	r3, [r1, #0]
 80040a2:	bf18      	it	ne
 80040a4:	b22d      	sxthne	r5, r5
 80040a6:	e7ef      	b.n	8004088 <_printf_i+0xbc>
 80040a8:	680b      	ldr	r3, [r1, #0]
 80040aa:	6825      	ldr	r5, [r4, #0]
 80040ac:	1d18      	adds	r0, r3, #4
 80040ae:	6008      	str	r0, [r1, #0]
 80040b0:	0628      	lsls	r0, r5, #24
 80040b2:	d501      	bpl.n	80040b8 <_printf_i+0xec>
 80040b4:	681d      	ldr	r5, [r3, #0]
 80040b6:	e002      	b.n	80040be <_printf_i+0xf2>
 80040b8:	0669      	lsls	r1, r5, #25
 80040ba:	d5fb      	bpl.n	80040b4 <_printf_i+0xe8>
 80040bc:	881d      	ldrh	r5, [r3, #0]
 80040be:	4854      	ldr	r0, [pc, #336]	; (8004210 <_printf_i+0x244>)
 80040c0:	2f6f      	cmp	r7, #111	; 0x6f
 80040c2:	bf0c      	ite	eq
 80040c4:	2308      	moveq	r3, #8
 80040c6:	230a      	movne	r3, #10
 80040c8:	2100      	movs	r1, #0
 80040ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ce:	6866      	ldr	r6, [r4, #4]
 80040d0:	60a6      	str	r6, [r4, #8]
 80040d2:	2e00      	cmp	r6, #0
 80040d4:	bfa2      	ittt	ge
 80040d6:	6821      	ldrge	r1, [r4, #0]
 80040d8:	f021 0104 	bicge.w	r1, r1, #4
 80040dc:	6021      	strge	r1, [r4, #0]
 80040de:	b90d      	cbnz	r5, 80040e4 <_printf_i+0x118>
 80040e0:	2e00      	cmp	r6, #0
 80040e2:	d04d      	beq.n	8004180 <_printf_i+0x1b4>
 80040e4:	4616      	mov	r6, r2
 80040e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80040ea:	fb03 5711 	mls	r7, r3, r1, r5
 80040ee:	5dc7      	ldrb	r7, [r0, r7]
 80040f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040f4:	462f      	mov	r7, r5
 80040f6:	42bb      	cmp	r3, r7
 80040f8:	460d      	mov	r5, r1
 80040fa:	d9f4      	bls.n	80040e6 <_printf_i+0x11a>
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d10b      	bne.n	8004118 <_printf_i+0x14c>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	07df      	lsls	r7, r3, #31
 8004104:	d508      	bpl.n	8004118 <_printf_i+0x14c>
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	6861      	ldr	r1, [r4, #4]
 800410a:	4299      	cmp	r1, r3
 800410c:	bfde      	ittt	le
 800410e:	2330      	movle	r3, #48	; 0x30
 8004110:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004114:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004118:	1b92      	subs	r2, r2, r6
 800411a:	6122      	str	r2, [r4, #16]
 800411c:	f8cd a000 	str.w	sl, [sp]
 8004120:	464b      	mov	r3, r9
 8004122:	aa03      	add	r2, sp, #12
 8004124:	4621      	mov	r1, r4
 8004126:	4640      	mov	r0, r8
 8004128:	f7ff fee2 	bl	8003ef0 <_printf_common>
 800412c:	3001      	adds	r0, #1
 800412e:	d14c      	bne.n	80041ca <_printf_i+0x1fe>
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	b004      	add	sp, #16
 8004136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413a:	4835      	ldr	r0, [pc, #212]	; (8004210 <_printf_i+0x244>)
 800413c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	680e      	ldr	r6, [r1, #0]
 8004144:	061f      	lsls	r7, r3, #24
 8004146:	f856 5b04 	ldr.w	r5, [r6], #4
 800414a:	600e      	str	r6, [r1, #0]
 800414c:	d514      	bpl.n	8004178 <_printf_i+0x1ac>
 800414e:	07d9      	lsls	r1, r3, #31
 8004150:	bf44      	itt	mi
 8004152:	f043 0320 	orrmi.w	r3, r3, #32
 8004156:	6023      	strmi	r3, [r4, #0]
 8004158:	b91d      	cbnz	r5, 8004162 <_printf_i+0x196>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	f023 0320 	bic.w	r3, r3, #32
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	2310      	movs	r3, #16
 8004164:	e7b0      	b.n	80040c8 <_printf_i+0xfc>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	f043 0320 	orr.w	r3, r3, #32
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	2378      	movs	r3, #120	; 0x78
 8004170:	4828      	ldr	r0, [pc, #160]	; (8004214 <_printf_i+0x248>)
 8004172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004176:	e7e3      	b.n	8004140 <_printf_i+0x174>
 8004178:	065e      	lsls	r6, r3, #25
 800417a:	bf48      	it	mi
 800417c:	b2ad      	uxthmi	r5, r5
 800417e:	e7e6      	b.n	800414e <_printf_i+0x182>
 8004180:	4616      	mov	r6, r2
 8004182:	e7bb      	b.n	80040fc <_printf_i+0x130>
 8004184:	680b      	ldr	r3, [r1, #0]
 8004186:	6826      	ldr	r6, [r4, #0]
 8004188:	6960      	ldr	r0, [r4, #20]
 800418a:	1d1d      	adds	r5, r3, #4
 800418c:	600d      	str	r5, [r1, #0]
 800418e:	0635      	lsls	r5, r6, #24
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	d501      	bpl.n	8004198 <_printf_i+0x1cc>
 8004194:	6018      	str	r0, [r3, #0]
 8004196:	e002      	b.n	800419e <_printf_i+0x1d2>
 8004198:	0671      	lsls	r1, r6, #25
 800419a:	d5fb      	bpl.n	8004194 <_printf_i+0x1c8>
 800419c:	8018      	strh	r0, [r3, #0]
 800419e:	2300      	movs	r3, #0
 80041a0:	6123      	str	r3, [r4, #16]
 80041a2:	4616      	mov	r6, r2
 80041a4:	e7ba      	b.n	800411c <_printf_i+0x150>
 80041a6:	680b      	ldr	r3, [r1, #0]
 80041a8:	1d1a      	adds	r2, r3, #4
 80041aa:	600a      	str	r2, [r1, #0]
 80041ac:	681e      	ldr	r6, [r3, #0]
 80041ae:	6862      	ldr	r2, [r4, #4]
 80041b0:	2100      	movs	r1, #0
 80041b2:	4630      	mov	r0, r6
 80041b4:	f7fc f814 	bl	80001e0 <memchr>
 80041b8:	b108      	cbz	r0, 80041be <_printf_i+0x1f2>
 80041ba:	1b80      	subs	r0, r0, r6
 80041bc:	6060      	str	r0, [r4, #4]
 80041be:	6863      	ldr	r3, [r4, #4]
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	2300      	movs	r3, #0
 80041c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c8:	e7a8      	b.n	800411c <_printf_i+0x150>
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	4632      	mov	r2, r6
 80041ce:	4649      	mov	r1, r9
 80041d0:	4640      	mov	r0, r8
 80041d2:	47d0      	blx	sl
 80041d4:	3001      	adds	r0, #1
 80041d6:	d0ab      	beq.n	8004130 <_printf_i+0x164>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	079b      	lsls	r3, r3, #30
 80041dc:	d413      	bmi.n	8004206 <_printf_i+0x23a>
 80041de:	68e0      	ldr	r0, [r4, #12]
 80041e0:	9b03      	ldr	r3, [sp, #12]
 80041e2:	4298      	cmp	r0, r3
 80041e4:	bfb8      	it	lt
 80041e6:	4618      	movlt	r0, r3
 80041e8:	e7a4      	b.n	8004134 <_printf_i+0x168>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4632      	mov	r2, r6
 80041ee:	4649      	mov	r1, r9
 80041f0:	4640      	mov	r0, r8
 80041f2:	47d0      	blx	sl
 80041f4:	3001      	adds	r0, #1
 80041f6:	d09b      	beq.n	8004130 <_printf_i+0x164>
 80041f8:	3501      	adds	r5, #1
 80041fa:	68e3      	ldr	r3, [r4, #12]
 80041fc:	9903      	ldr	r1, [sp, #12]
 80041fe:	1a5b      	subs	r3, r3, r1
 8004200:	42ab      	cmp	r3, r5
 8004202:	dcf2      	bgt.n	80041ea <_printf_i+0x21e>
 8004204:	e7eb      	b.n	80041de <_printf_i+0x212>
 8004206:	2500      	movs	r5, #0
 8004208:	f104 0619 	add.w	r6, r4, #25
 800420c:	e7f5      	b.n	80041fa <_printf_i+0x22e>
 800420e:	bf00      	nop
 8004210:	08006862 	.word	0x08006862
 8004214:	08006873 	.word	0x08006873

08004218 <siprintf>:
 8004218:	b40e      	push	{r1, r2, r3}
 800421a:	b500      	push	{lr}
 800421c:	b09c      	sub	sp, #112	; 0x70
 800421e:	ab1d      	add	r3, sp, #116	; 0x74
 8004220:	9002      	str	r0, [sp, #8]
 8004222:	9006      	str	r0, [sp, #24]
 8004224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004228:	4809      	ldr	r0, [pc, #36]	; (8004250 <siprintf+0x38>)
 800422a:	9107      	str	r1, [sp, #28]
 800422c:	9104      	str	r1, [sp, #16]
 800422e:	4909      	ldr	r1, [pc, #36]	; (8004254 <siprintf+0x3c>)
 8004230:	f853 2b04 	ldr.w	r2, [r3], #4
 8004234:	9105      	str	r1, [sp, #20]
 8004236:	6800      	ldr	r0, [r0, #0]
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	a902      	add	r1, sp, #8
 800423c:	f001 fb34 	bl	80058a8 <_svfiprintf_r>
 8004240:	9b02      	ldr	r3, [sp, #8]
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	b01c      	add	sp, #112	; 0x70
 8004248:	f85d eb04 	ldr.w	lr, [sp], #4
 800424c:	b003      	add	sp, #12
 800424e:	4770      	bx	lr
 8004250:	20000018 	.word	0x20000018
 8004254:	ffff0208 	.word	0xffff0208

08004258 <strcat>:
 8004258:	b510      	push	{r4, lr}
 800425a:	4602      	mov	r2, r0
 800425c:	7814      	ldrb	r4, [r2, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	3201      	adds	r2, #1
 8004262:	2c00      	cmp	r4, #0
 8004264:	d1fa      	bne.n	800425c <strcat+0x4>
 8004266:	3b01      	subs	r3, #1
 8004268:	f811 2b01 	ldrb.w	r2, [r1], #1
 800426c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004270:	2a00      	cmp	r2, #0
 8004272:	d1f9      	bne.n	8004268 <strcat+0x10>
 8004274:	bd10      	pop	{r4, pc}

08004276 <quorem>:
 8004276:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	6903      	ldr	r3, [r0, #16]
 800427c:	690c      	ldr	r4, [r1, #16]
 800427e:	42a3      	cmp	r3, r4
 8004280:	4607      	mov	r7, r0
 8004282:	f2c0 8081 	blt.w	8004388 <quorem+0x112>
 8004286:	3c01      	subs	r4, #1
 8004288:	f101 0814 	add.w	r8, r1, #20
 800428c:	f100 0514 	add.w	r5, r0, #20
 8004290:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800429a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800429e:	3301      	adds	r3, #1
 80042a0:	429a      	cmp	r2, r3
 80042a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80042ae:	d331      	bcc.n	8004314 <quorem+0x9e>
 80042b0:	f04f 0e00 	mov.w	lr, #0
 80042b4:	4640      	mov	r0, r8
 80042b6:	46ac      	mov	ip, r5
 80042b8:	46f2      	mov	sl, lr
 80042ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80042be:	b293      	uxth	r3, r2
 80042c0:	fb06 e303 	mla	r3, r6, r3, lr
 80042c4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	ebaa 0303 	sub.w	r3, sl, r3
 80042ce:	0c12      	lsrs	r2, r2, #16
 80042d0:	f8dc a000 	ldr.w	sl, [ip]
 80042d4:	fb06 e202 	mla	r2, r6, r2, lr
 80042d8:	fa13 f38a 	uxtah	r3, r3, sl
 80042dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042e0:	fa1f fa82 	uxth.w	sl, r2
 80042e4:	f8dc 2000 	ldr.w	r2, [ip]
 80042e8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80042ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042f6:	4581      	cmp	r9, r0
 80042f8:	f84c 3b04 	str.w	r3, [ip], #4
 80042fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004300:	d2db      	bcs.n	80042ba <quorem+0x44>
 8004302:	f855 300b 	ldr.w	r3, [r5, fp]
 8004306:	b92b      	cbnz	r3, 8004314 <quorem+0x9e>
 8004308:	9b01      	ldr	r3, [sp, #4]
 800430a:	3b04      	subs	r3, #4
 800430c:	429d      	cmp	r5, r3
 800430e:	461a      	mov	r2, r3
 8004310:	d32e      	bcc.n	8004370 <quorem+0xfa>
 8004312:	613c      	str	r4, [r7, #16]
 8004314:	4638      	mov	r0, r7
 8004316:	f001 f8b1 	bl	800547c <__mcmp>
 800431a:	2800      	cmp	r0, #0
 800431c:	db24      	blt.n	8004368 <quorem+0xf2>
 800431e:	3601      	adds	r6, #1
 8004320:	4628      	mov	r0, r5
 8004322:	f04f 0c00 	mov.w	ip, #0
 8004326:	f858 2b04 	ldr.w	r2, [r8], #4
 800432a:	f8d0 e000 	ldr.w	lr, [r0]
 800432e:	b293      	uxth	r3, r2
 8004330:	ebac 0303 	sub.w	r3, ip, r3
 8004334:	0c12      	lsrs	r2, r2, #16
 8004336:	fa13 f38e 	uxtah	r3, r3, lr
 800433a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800433e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004342:	b29b      	uxth	r3, r3
 8004344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004348:	45c1      	cmp	r9, r8
 800434a:	f840 3b04 	str.w	r3, [r0], #4
 800434e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004352:	d2e8      	bcs.n	8004326 <quorem+0xb0>
 8004354:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004358:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800435c:	b922      	cbnz	r2, 8004368 <quorem+0xf2>
 800435e:	3b04      	subs	r3, #4
 8004360:	429d      	cmp	r5, r3
 8004362:	461a      	mov	r2, r3
 8004364:	d30a      	bcc.n	800437c <quorem+0x106>
 8004366:	613c      	str	r4, [r7, #16]
 8004368:	4630      	mov	r0, r6
 800436a:	b003      	add	sp, #12
 800436c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	3b04      	subs	r3, #4
 8004374:	2a00      	cmp	r2, #0
 8004376:	d1cc      	bne.n	8004312 <quorem+0x9c>
 8004378:	3c01      	subs	r4, #1
 800437a:	e7c7      	b.n	800430c <quorem+0x96>
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	3b04      	subs	r3, #4
 8004380:	2a00      	cmp	r2, #0
 8004382:	d1f0      	bne.n	8004366 <quorem+0xf0>
 8004384:	3c01      	subs	r4, #1
 8004386:	e7eb      	b.n	8004360 <quorem+0xea>
 8004388:	2000      	movs	r0, #0
 800438a:	e7ee      	b.n	800436a <quorem+0xf4>
 800438c:	0000      	movs	r0, r0
	...

08004390 <_dtoa_r>:
 8004390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004394:	ed2d 8b02 	vpush	{d8}
 8004398:	ec57 6b10 	vmov	r6, r7, d0
 800439c:	b095      	sub	sp, #84	; 0x54
 800439e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80043a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80043a4:	9105      	str	r1, [sp, #20]
 80043a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80043aa:	4604      	mov	r4, r0
 80043ac:	9209      	str	r2, [sp, #36]	; 0x24
 80043ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80043b0:	b975      	cbnz	r5, 80043d0 <_dtoa_r+0x40>
 80043b2:	2010      	movs	r0, #16
 80043b4:	f000 fddc 	bl	8004f70 <malloc>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6260      	str	r0, [r4, #36]	; 0x24
 80043bc:	b920      	cbnz	r0, 80043c8 <_dtoa_r+0x38>
 80043be:	4bb2      	ldr	r3, [pc, #712]	; (8004688 <_dtoa_r+0x2f8>)
 80043c0:	21ea      	movs	r1, #234	; 0xea
 80043c2:	48b2      	ldr	r0, [pc, #712]	; (800468c <_dtoa_r+0x2fc>)
 80043c4:	f001 fb80 	bl	8005ac8 <__assert_func>
 80043c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043cc:	6005      	str	r5, [r0, #0]
 80043ce:	60c5      	str	r5, [r0, #12]
 80043d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	b151      	cbz	r1, 80043ec <_dtoa_r+0x5c>
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	604a      	str	r2, [r1, #4]
 80043da:	2301      	movs	r3, #1
 80043dc:	4093      	lsls	r3, r2
 80043de:	608b      	str	r3, [r1, #8]
 80043e0:	4620      	mov	r0, r4
 80043e2:	f000 fe0d 	bl	8005000 <_Bfree>
 80043e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	1e3b      	subs	r3, r7, #0
 80043ee:	bfb9      	ittee	lt
 80043f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043f4:	9303      	strlt	r3, [sp, #12]
 80043f6:	2300      	movge	r3, #0
 80043f8:	f8c8 3000 	strge.w	r3, [r8]
 80043fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004400:	4ba3      	ldr	r3, [pc, #652]	; (8004690 <_dtoa_r+0x300>)
 8004402:	bfbc      	itt	lt
 8004404:	2201      	movlt	r2, #1
 8004406:	f8c8 2000 	strlt.w	r2, [r8]
 800440a:	ea33 0309 	bics.w	r3, r3, r9
 800440e:	d11b      	bne.n	8004448 <_dtoa_r+0xb8>
 8004410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004412:	f242 730f 	movw	r3, #9999	; 0x270f
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800441c:	4333      	orrs	r3, r6
 800441e:	f000 857a 	beq.w	8004f16 <_dtoa_r+0xb86>
 8004422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004424:	b963      	cbnz	r3, 8004440 <_dtoa_r+0xb0>
 8004426:	4b9b      	ldr	r3, [pc, #620]	; (8004694 <_dtoa_r+0x304>)
 8004428:	e024      	b.n	8004474 <_dtoa_r+0xe4>
 800442a:	4b9b      	ldr	r3, [pc, #620]	; (8004698 <_dtoa_r+0x308>)
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	3308      	adds	r3, #8
 8004430:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	9800      	ldr	r0, [sp, #0]
 8004436:	b015      	add	sp, #84	; 0x54
 8004438:	ecbd 8b02 	vpop	{d8}
 800443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004440:	4b94      	ldr	r3, [pc, #592]	; (8004694 <_dtoa_r+0x304>)
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	3303      	adds	r3, #3
 8004446:	e7f3      	b.n	8004430 <_dtoa_r+0xa0>
 8004448:	ed9d 7b02 	vldr	d7, [sp, #8]
 800444c:	2200      	movs	r2, #0
 800444e:	ec51 0b17 	vmov	r0, r1, d7
 8004452:	2300      	movs	r3, #0
 8004454:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004458:	f7fc fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800445c:	4680      	mov	r8, r0
 800445e:	b158      	cbz	r0, 8004478 <_dtoa_r+0xe8>
 8004460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004462:	2301      	movs	r3, #1
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8551 	beq.w	8004f10 <_dtoa_r+0xb80>
 800446e:	488b      	ldr	r0, [pc, #556]	; (800469c <_dtoa_r+0x30c>)
 8004470:	6018      	str	r0, [r3, #0]
 8004472:	1e43      	subs	r3, r0, #1
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	e7dd      	b.n	8004434 <_dtoa_r+0xa4>
 8004478:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800447c:	aa12      	add	r2, sp, #72	; 0x48
 800447e:	a913      	add	r1, sp, #76	; 0x4c
 8004480:	4620      	mov	r0, r4
 8004482:	f001 f89f 	bl	80055c4 <__d2b>
 8004486:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800448a:	4683      	mov	fp, r0
 800448c:	2d00      	cmp	r5, #0
 800448e:	d07c      	beq.n	800458a <_dtoa_r+0x1fa>
 8004490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004492:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800449a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800449e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80044a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80044a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80044aa:	4b7d      	ldr	r3, [pc, #500]	; (80046a0 <_dtoa_r+0x310>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	4630      	mov	r0, r6
 80044b0:	4639      	mov	r1, r7
 80044b2:	f7fb fee9 	bl	8000288 <__aeabi_dsub>
 80044b6:	a36e      	add	r3, pc, #440	; (adr r3, 8004670 <_dtoa_r+0x2e0>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f7fc f89c 	bl	80005f8 <__aeabi_dmul>
 80044c0:	a36d      	add	r3, pc, #436	; (adr r3, 8004678 <_dtoa_r+0x2e8>)
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	f7fb fee1 	bl	800028c <__adddf3>
 80044ca:	4606      	mov	r6, r0
 80044cc:	4628      	mov	r0, r5
 80044ce:	460f      	mov	r7, r1
 80044d0:	f7fc f828 	bl	8000524 <__aeabi_i2d>
 80044d4:	a36a      	add	r3, pc, #424	; (adr r3, 8004680 <_dtoa_r+0x2f0>)
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f7fc f88d 	bl	80005f8 <__aeabi_dmul>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4630      	mov	r0, r6
 80044e4:	4639      	mov	r1, r7
 80044e6:	f7fb fed1 	bl	800028c <__adddf3>
 80044ea:	4606      	mov	r6, r0
 80044ec:	460f      	mov	r7, r1
 80044ee:	f7fc fb33 	bl	8000b58 <__aeabi_d2iz>
 80044f2:	2200      	movs	r2, #0
 80044f4:	4682      	mov	sl, r0
 80044f6:	2300      	movs	r3, #0
 80044f8:	4630      	mov	r0, r6
 80044fa:	4639      	mov	r1, r7
 80044fc:	f7fc faee 	bl	8000adc <__aeabi_dcmplt>
 8004500:	b148      	cbz	r0, 8004516 <_dtoa_r+0x186>
 8004502:	4650      	mov	r0, sl
 8004504:	f7fc f80e 	bl	8000524 <__aeabi_i2d>
 8004508:	4632      	mov	r2, r6
 800450a:	463b      	mov	r3, r7
 800450c:	f7fc fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004510:	b908      	cbnz	r0, 8004516 <_dtoa_r+0x186>
 8004512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004516:	f1ba 0f16 	cmp.w	sl, #22
 800451a:	d854      	bhi.n	80045c6 <_dtoa_r+0x236>
 800451c:	4b61      	ldr	r3, [pc, #388]	; (80046a4 <_dtoa_r+0x314>)
 800451e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800452a:	f7fc fad7 	bl	8000adc <__aeabi_dcmplt>
 800452e:	2800      	cmp	r0, #0
 8004530:	d04b      	beq.n	80045ca <_dtoa_r+0x23a>
 8004532:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004536:	2300      	movs	r3, #0
 8004538:	930e      	str	r3, [sp, #56]	; 0x38
 800453a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800453c:	1b5d      	subs	r5, r3, r5
 800453e:	1e6b      	subs	r3, r5, #1
 8004540:	9304      	str	r3, [sp, #16]
 8004542:	bf43      	ittte	mi
 8004544:	2300      	movmi	r3, #0
 8004546:	f1c5 0801 	rsbmi	r8, r5, #1
 800454a:	9304      	strmi	r3, [sp, #16]
 800454c:	f04f 0800 	movpl.w	r8, #0
 8004550:	f1ba 0f00 	cmp.w	sl, #0
 8004554:	db3b      	blt.n	80045ce <_dtoa_r+0x23e>
 8004556:	9b04      	ldr	r3, [sp, #16]
 8004558:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800455c:	4453      	add	r3, sl
 800455e:	9304      	str	r3, [sp, #16]
 8004560:	2300      	movs	r3, #0
 8004562:	9306      	str	r3, [sp, #24]
 8004564:	9b05      	ldr	r3, [sp, #20]
 8004566:	2b09      	cmp	r3, #9
 8004568:	d869      	bhi.n	800463e <_dtoa_r+0x2ae>
 800456a:	2b05      	cmp	r3, #5
 800456c:	bfc4      	itt	gt
 800456e:	3b04      	subgt	r3, #4
 8004570:	9305      	strgt	r3, [sp, #20]
 8004572:	9b05      	ldr	r3, [sp, #20]
 8004574:	f1a3 0302 	sub.w	r3, r3, #2
 8004578:	bfcc      	ite	gt
 800457a:	2500      	movgt	r5, #0
 800457c:	2501      	movle	r5, #1
 800457e:	2b03      	cmp	r3, #3
 8004580:	d869      	bhi.n	8004656 <_dtoa_r+0x2c6>
 8004582:	e8df f003 	tbb	[pc, r3]
 8004586:	4e2c      	.short	0x4e2c
 8004588:	5a4c      	.short	0x5a4c
 800458a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800458e:	441d      	add	r5, r3
 8004590:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004594:	2b20      	cmp	r3, #32
 8004596:	bfc1      	itttt	gt
 8004598:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800459c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80045a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80045a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80045a8:	bfda      	itte	le
 80045aa:	f1c3 0320 	rsble	r3, r3, #32
 80045ae:	fa06 f003 	lslle.w	r0, r6, r3
 80045b2:	4318      	orrgt	r0, r3
 80045b4:	f7fb ffa6 	bl	8000504 <__aeabi_ui2d>
 80045b8:	2301      	movs	r3, #1
 80045ba:	4606      	mov	r6, r0
 80045bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80045c0:	3d01      	subs	r5, #1
 80045c2:	9310      	str	r3, [sp, #64]	; 0x40
 80045c4:	e771      	b.n	80044aa <_dtoa_r+0x11a>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e7b6      	b.n	8004538 <_dtoa_r+0x1a8>
 80045ca:	900e      	str	r0, [sp, #56]	; 0x38
 80045cc:	e7b5      	b.n	800453a <_dtoa_r+0x1aa>
 80045ce:	f1ca 0300 	rsb	r3, sl, #0
 80045d2:	9306      	str	r3, [sp, #24]
 80045d4:	2300      	movs	r3, #0
 80045d6:	eba8 080a 	sub.w	r8, r8, sl
 80045da:	930d      	str	r3, [sp, #52]	; 0x34
 80045dc:	e7c2      	b.n	8004564 <_dtoa_r+0x1d4>
 80045de:	2300      	movs	r3, #0
 80045e0:	9308      	str	r3, [sp, #32]
 80045e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	dc39      	bgt.n	800465c <_dtoa_r+0x2cc>
 80045e8:	f04f 0901 	mov.w	r9, #1
 80045ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80045f0:	464b      	mov	r3, r9
 80045f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80045f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80045f8:	2200      	movs	r2, #0
 80045fa:	6042      	str	r2, [r0, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	f102 0614 	add.w	r6, r2, #20
 8004602:	429e      	cmp	r6, r3
 8004604:	6841      	ldr	r1, [r0, #4]
 8004606:	d92f      	bls.n	8004668 <_dtoa_r+0x2d8>
 8004608:	4620      	mov	r0, r4
 800460a:	f000 fcb9 	bl	8004f80 <_Balloc>
 800460e:	9000      	str	r0, [sp, #0]
 8004610:	2800      	cmp	r0, #0
 8004612:	d14b      	bne.n	80046ac <_dtoa_r+0x31c>
 8004614:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <_dtoa_r+0x318>)
 8004616:	4602      	mov	r2, r0
 8004618:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800461c:	e6d1      	b.n	80043c2 <_dtoa_r+0x32>
 800461e:	2301      	movs	r3, #1
 8004620:	e7de      	b.n	80045e0 <_dtoa_r+0x250>
 8004622:	2300      	movs	r3, #0
 8004624:	9308      	str	r3, [sp, #32]
 8004626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004628:	eb0a 0903 	add.w	r9, sl, r3
 800462c:	f109 0301 	add.w	r3, r9, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	bfb8      	it	lt
 8004636:	2301      	movlt	r3, #1
 8004638:	e7dd      	b.n	80045f6 <_dtoa_r+0x266>
 800463a:	2301      	movs	r3, #1
 800463c:	e7f2      	b.n	8004624 <_dtoa_r+0x294>
 800463e:	2501      	movs	r5, #1
 8004640:	2300      	movs	r3, #0
 8004642:	9305      	str	r3, [sp, #20]
 8004644:	9508      	str	r5, [sp, #32]
 8004646:	f04f 39ff 	mov.w	r9, #4294967295
 800464a:	2200      	movs	r2, #0
 800464c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004650:	2312      	movs	r3, #18
 8004652:	9209      	str	r2, [sp, #36]	; 0x24
 8004654:	e7cf      	b.n	80045f6 <_dtoa_r+0x266>
 8004656:	2301      	movs	r3, #1
 8004658:	9308      	str	r3, [sp, #32]
 800465a:	e7f4      	b.n	8004646 <_dtoa_r+0x2b6>
 800465c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004660:	f8cd 9004 	str.w	r9, [sp, #4]
 8004664:	464b      	mov	r3, r9
 8004666:	e7c6      	b.n	80045f6 <_dtoa_r+0x266>
 8004668:	3101      	adds	r1, #1
 800466a:	6041      	str	r1, [r0, #4]
 800466c:	0052      	lsls	r2, r2, #1
 800466e:	e7c6      	b.n	80045fe <_dtoa_r+0x26e>
 8004670:	636f4361 	.word	0x636f4361
 8004674:	3fd287a7 	.word	0x3fd287a7
 8004678:	8b60c8b3 	.word	0x8b60c8b3
 800467c:	3fc68a28 	.word	0x3fc68a28
 8004680:	509f79fb 	.word	0x509f79fb
 8004684:	3fd34413 	.word	0x3fd34413
 8004688:	08006891 	.word	0x08006891
 800468c:	080068a8 	.word	0x080068a8
 8004690:	7ff00000 	.word	0x7ff00000
 8004694:	0800688d 	.word	0x0800688d
 8004698:	08006884 	.word	0x08006884
 800469c:	08006861 	.word	0x08006861
 80046a0:	3ff80000 	.word	0x3ff80000
 80046a4:	080069a0 	.word	0x080069a0
 80046a8:	08006907 	.word	0x08006907
 80046ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046ae:	9a00      	ldr	r2, [sp, #0]
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	9b01      	ldr	r3, [sp, #4]
 80046b4:	2b0e      	cmp	r3, #14
 80046b6:	f200 80ad 	bhi.w	8004814 <_dtoa_r+0x484>
 80046ba:	2d00      	cmp	r5, #0
 80046bc:	f000 80aa 	beq.w	8004814 <_dtoa_r+0x484>
 80046c0:	f1ba 0f00 	cmp.w	sl, #0
 80046c4:	dd36      	ble.n	8004734 <_dtoa_r+0x3a4>
 80046c6:	4ac3      	ldr	r2, [pc, #780]	; (80049d4 <_dtoa_r+0x644>)
 80046c8:	f00a 030f 	and.w	r3, sl, #15
 80046cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046d0:	ed93 7b00 	vldr	d7, [r3]
 80046d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80046d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80046dc:	eeb0 8a47 	vmov.f32	s16, s14
 80046e0:	eef0 8a67 	vmov.f32	s17, s15
 80046e4:	d016      	beq.n	8004714 <_dtoa_r+0x384>
 80046e6:	4bbc      	ldr	r3, [pc, #752]	; (80049d8 <_dtoa_r+0x648>)
 80046e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80046ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046f0:	f7fc f8ac 	bl	800084c <__aeabi_ddiv>
 80046f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046f8:	f007 070f 	and.w	r7, r7, #15
 80046fc:	2503      	movs	r5, #3
 80046fe:	4eb6      	ldr	r6, [pc, #728]	; (80049d8 <_dtoa_r+0x648>)
 8004700:	b957      	cbnz	r7, 8004718 <_dtoa_r+0x388>
 8004702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004706:	ec53 2b18 	vmov	r2, r3, d8
 800470a:	f7fc f89f 	bl	800084c <__aeabi_ddiv>
 800470e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004712:	e029      	b.n	8004768 <_dtoa_r+0x3d8>
 8004714:	2502      	movs	r5, #2
 8004716:	e7f2      	b.n	80046fe <_dtoa_r+0x36e>
 8004718:	07f9      	lsls	r1, r7, #31
 800471a:	d508      	bpl.n	800472e <_dtoa_r+0x39e>
 800471c:	ec51 0b18 	vmov	r0, r1, d8
 8004720:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004724:	f7fb ff68 	bl	80005f8 <__aeabi_dmul>
 8004728:	ec41 0b18 	vmov	d8, r0, r1
 800472c:	3501      	adds	r5, #1
 800472e:	107f      	asrs	r7, r7, #1
 8004730:	3608      	adds	r6, #8
 8004732:	e7e5      	b.n	8004700 <_dtoa_r+0x370>
 8004734:	f000 80a6 	beq.w	8004884 <_dtoa_r+0x4f4>
 8004738:	f1ca 0600 	rsb	r6, sl, #0
 800473c:	4ba5      	ldr	r3, [pc, #660]	; (80049d4 <_dtoa_r+0x644>)
 800473e:	4fa6      	ldr	r7, [pc, #664]	; (80049d8 <_dtoa_r+0x648>)
 8004740:	f006 020f 	and.w	r2, r6, #15
 8004744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004750:	f7fb ff52 	bl	80005f8 <__aeabi_dmul>
 8004754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004758:	1136      	asrs	r6, r6, #4
 800475a:	2300      	movs	r3, #0
 800475c:	2502      	movs	r5, #2
 800475e:	2e00      	cmp	r6, #0
 8004760:	f040 8085 	bne.w	800486e <_dtoa_r+0x4de>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1d2      	bne.n	800470e <_dtoa_r+0x37e>
 8004768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 808c 	beq.w	8004888 <_dtoa_r+0x4f8>
 8004770:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004774:	4b99      	ldr	r3, [pc, #612]	; (80049dc <_dtoa_r+0x64c>)
 8004776:	2200      	movs	r2, #0
 8004778:	4630      	mov	r0, r6
 800477a:	4639      	mov	r1, r7
 800477c:	f7fc f9ae 	bl	8000adc <__aeabi_dcmplt>
 8004780:	2800      	cmp	r0, #0
 8004782:	f000 8081 	beq.w	8004888 <_dtoa_r+0x4f8>
 8004786:	9b01      	ldr	r3, [sp, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d07d      	beq.n	8004888 <_dtoa_r+0x4f8>
 800478c:	f1b9 0f00 	cmp.w	r9, #0
 8004790:	dd3c      	ble.n	800480c <_dtoa_r+0x47c>
 8004792:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004796:	9307      	str	r3, [sp, #28]
 8004798:	2200      	movs	r2, #0
 800479a:	4b91      	ldr	r3, [pc, #580]	; (80049e0 <_dtoa_r+0x650>)
 800479c:	4630      	mov	r0, r6
 800479e:	4639      	mov	r1, r7
 80047a0:	f7fb ff2a 	bl	80005f8 <__aeabi_dmul>
 80047a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047a8:	3501      	adds	r5, #1
 80047aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80047ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80047b2:	4628      	mov	r0, r5
 80047b4:	f7fb feb6 	bl	8000524 <__aeabi_i2d>
 80047b8:	4632      	mov	r2, r6
 80047ba:	463b      	mov	r3, r7
 80047bc:	f7fb ff1c 	bl	80005f8 <__aeabi_dmul>
 80047c0:	4b88      	ldr	r3, [pc, #544]	; (80049e4 <_dtoa_r+0x654>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	f7fb fd62 	bl	800028c <__adddf3>
 80047c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80047cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047d0:	9303      	str	r3, [sp, #12]
 80047d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d15c      	bne.n	8004892 <_dtoa_r+0x502>
 80047d8:	4b83      	ldr	r3, [pc, #524]	; (80049e8 <_dtoa_r+0x658>)
 80047da:	2200      	movs	r2, #0
 80047dc:	4630      	mov	r0, r6
 80047de:	4639      	mov	r1, r7
 80047e0:	f7fb fd52 	bl	8000288 <__aeabi_dsub>
 80047e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047e8:	4606      	mov	r6, r0
 80047ea:	460f      	mov	r7, r1
 80047ec:	f7fc f994 	bl	8000b18 <__aeabi_dcmpgt>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	f040 8296 	bne.w	8004d22 <_dtoa_r+0x992>
 80047f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80047fa:	4630      	mov	r0, r6
 80047fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004800:	4639      	mov	r1, r7
 8004802:	f7fc f96b 	bl	8000adc <__aeabi_dcmplt>
 8004806:	2800      	cmp	r0, #0
 8004808:	f040 8288 	bne.w	8004d1c <_dtoa_r+0x98c>
 800480c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004810:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004816:	2b00      	cmp	r3, #0
 8004818:	f2c0 8158 	blt.w	8004acc <_dtoa_r+0x73c>
 800481c:	f1ba 0f0e 	cmp.w	sl, #14
 8004820:	f300 8154 	bgt.w	8004acc <_dtoa_r+0x73c>
 8004824:	4b6b      	ldr	r3, [pc, #428]	; (80049d4 <_dtoa_r+0x644>)
 8004826:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800482a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800482e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	f280 80e3 	bge.w	80049fc <_dtoa_r+0x66c>
 8004836:	9b01      	ldr	r3, [sp, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f300 80df 	bgt.w	80049fc <_dtoa_r+0x66c>
 800483e:	f040 826d 	bne.w	8004d1c <_dtoa_r+0x98c>
 8004842:	4b69      	ldr	r3, [pc, #420]	; (80049e8 <_dtoa_r+0x658>)
 8004844:	2200      	movs	r2, #0
 8004846:	4640      	mov	r0, r8
 8004848:	4649      	mov	r1, r9
 800484a:	f7fb fed5 	bl	80005f8 <__aeabi_dmul>
 800484e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004852:	f7fc f957 	bl	8000b04 <__aeabi_dcmpge>
 8004856:	9e01      	ldr	r6, [sp, #4]
 8004858:	4637      	mov	r7, r6
 800485a:	2800      	cmp	r0, #0
 800485c:	f040 8243 	bne.w	8004ce6 <_dtoa_r+0x956>
 8004860:	9d00      	ldr	r5, [sp, #0]
 8004862:	2331      	movs	r3, #49	; 0x31
 8004864:	f805 3b01 	strb.w	r3, [r5], #1
 8004868:	f10a 0a01 	add.w	sl, sl, #1
 800486c:	e23f      	b.n	8004cee <_dtoa_r+0x95e>
 800486e:	07f2      	lsls	r2, r6, #31
 8004870:	d505      	bpl.n	800487e <_dtoa_r+0x4ee>
 8004872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004876:	f7fb febf 	bl	80005f8 <__aeabi_dmul>
 800487a:	3501      	adds	r5, #1
 800487c:	2301      	movs	r3, #1
 800487e:	1076      	asrs	r6, r6, #1
 8004880:	3708      	adds	r7, #8
 8004882:	e76c      	b.n	800475e <_dtoa_r+0x3ce>
 8004884:	2502      	movs	r5, #2
 8004886:	e76f      	b.n	8004768 <_dtoa_r+0x3d8>
 8004888:	9b01      	ldr	r3, [sp, #4]
 800488a:	f8cd a01c 	str.w	sl, [sp, #28]
 800488e:	930c      	str	r3, [sp, #48]	; 0x30
 8004890:	e78d      	b.n	80047ae <_dtoa_r+0x41e>
 8004892:	9900      	ldr	r1, [sp, #0]
 8004894:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004898:	4b4e      	ldr	r3, [pc, #312]	; (80049d4 <_dtoa_r+0x644>)
 800489a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800489e:	4401      	add	r1, r0
 80048a0:	9102      	str	r1, [sp, #8]
 80048a2:	9908      	ldr	r1, [sp, #32]
 80048a4:	eeb0 8a47 	vmov.f32	s16, s14
 80048a8:	eef0 8a67 	vmov.f32	s17, s15
 80048ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048b4:	2900      	cmp	r1, #0
 80048b6:	d045      	beq.n	8004944 <_dtoa_r+0x5b4>
 80048b8:	494c      	ldr	r1, [pc, #304]	; (80049ec <_dtoa_r+0x65c>)
 80048ba:	2000      	movs	r0, #0
 80048bc:	f7fb ffc6 	bl	800084c <__aeabi_ddiv>
 80048c0:	ec53 2b18 	vmov	r2, r3, d8
 80048c4:	f7fb fce0 	bl	8000288 <__aeabi_dsub>
 80048c8:	9d00      	ldr	r5, [sp, #0]
 80048ca:	ec41 0b18 	vmov	d8, r0, r1
 80048ce:	4639      	mov	r1, r7
 80048d0:	4630      	mov	r0, r6
 80048d2:	f7fc f941 	bl	8000b58 <__aeabi_d2iz>
 80048d6:	900c      	str	r0, [sp, #48]	; 0x30
 80048d8:	f7fb fe24 	bl	8000524 <__aeabi_i2d>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4630      	mov	r0, r6
 80048e2:	4639      	mov	r1, r7
 80048e4:	f7fb fcd0 	bl	8000288 <__aeabi_dsub>
 80048e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048ea:	3330      	adds	r3, #48	; 0x30
 80048ec:	f805 3b01 	strb.w	r3, [r5], #1
 80048f0:	ec53 2b18 	vmov	r2, r3, d8
 80048f4:	4606      	mov	r6, r0
 80048f6:	460f      	mov	r7, r1
 80048f8:	f7fc f8f0 	bl	8000adc <__aeabi_dcmplt>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d165      	bne.n	80049cc <_dtoa_r+0x63c>
 8004900:	4632      	mov	r2, r6
 8004902:	463b      	mov	r3, r7
 8004904:	4935      	ldr	r1, [pc, #212]	; (80049dc <_dtoa_r+0x64c>)
 8004906:	2000      	movs	r0, #0
 8004908:	f7fb fcbe 	bl	8000288 <__aeabi_dsub>
 800490c:	ec53 2b18 	vmov	r2, r3, d8
 8004910:	f7fc f8e4 	bl	8000adc <__aeabi_dcmplt>
 8004914:	2800      	cmp	r0, #0
 8004916:	f040 80b9 	bne.w	8004a8c <_dtoa_r+0x6fc>
 800491a:	9b02      	ldr	r3, [sp, #8]
 800491c:	429d      	cmp	r5, r3
 800491e:	f43f af75 	beq.w	800480c <_dtoa_r+0x47c>
 8004922:	4b2f      	ldr	r3, [pc, #188]	; (80049e0 <_dtoa_r+0x650>)
 8004924:	ec51 0b18 	vmov	r0, r1, d8
 8004928:	2200      	movs	r2, #0
 800492a:	f7fb fe65 	bl	80005f8 <__aeabi_dmul>
 800492e:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <_dtoa_r+0x650>)
 8004930:	ec41 0b18 	vmov	d8, r0, r1
 8004934:	2200      	movs	r2, #0
 8004936:	4630      	mov	r0, r6
 8004938:	4639      	mov	r1, r7
 800493a:	f7fb fe5d 	bl	80005f8 <__aeabi_dmul>
 800493e:	4606      	mov	r6, r0
 8004940:	460f      	mov	r7, r1
 8004942:	e7c4      	b.n	80048ce <_dtoa_r+0x53e>
 8004944:	ec51 0b17 	vmov	r0, r1, d7
 8004948:	f7fb fe56 	bl	80005f8 <__aeabi_dmul>
 800494c:	9b02      	ldr	r3, [sp, #8]
 800494e:	9d00      	ldr	r5, [sp, #0]
 8004950:	930c      	str	r3, [sp, #48]	; 0x30
 8004952:	ec41 0b18 	vmov	d8, r0, r1
 8004956:	4639      	mov	r1, r7
 8004958:	4630      	mov	r0, r6
 800495a:	f7fc f8fd 	bl	8000b58 <__aeabi_d2iz>
 800495e:	9011      	str	r0, [sp, #68]	; 0x44
 8004960:	f7fb fde0 	bl	8000524 <__aeabi_i2d>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4630      	mov	r0, r6
 800496a:	4639      	mov	r1, r7
 800496c:	f7fb fc8c 	bl	8000288 <__aeabi_dsub>
 8004970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004972:	3330      	adds	r3, #48	; 0x30
 8004974:	f805 3b01 	strb.w	r3, [r5], #1
 8004978:	9b02      	ldr	r3, [sp, #8]
 800497a:	429d      	cmp	r5, r3
 800497c:	4606      	mov	r6, r0
 800497e:	460f      	mov	r7, r1
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	d134      	bne.n	80049f0 <_dtoa_r+0x660>
 8004986:	4b19      	ldr	r3, [pc, #100]	; (80049ec <_dtoa_r+0x65c>)
 8004988:	ec51 0b18 	vmov	r0, r1, d8
 800498c:	f7fb fc7e 	bl	800028c <__adddf3>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4630      	mov	r0, r6
 8004996:	4639      	mov	r1, r7
 8004998:	f7fc f8be 	bl	8000b18 <__aeabi_dcmpgt>
 800499c:	2800      	cmp	r0, #0
 800499e:	d175      	bne.n	8004a8c <_dtoa_r+0x6fc>
 80049a0:	ec53 2b18 	vmov	r2, r3, d8
 80049a4:	4911      	ldr	r1, [pc, #68]	; (80049ec <_dtoa_r+0x65c>)
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7fb fc6e 	bl	8000288 <__aeabi_dsub>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4630      	mov	r0, r6
 80049b2:	4639      	mov	r1, r7
 80049b4:	f7fc f892 	bl	8000adc <__aeabi_dcmplt>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	f43f af27 	beq.w	800480c <_dtoa_r+0x47c>
 80049be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049c0:	1e6b      	subs	r3, r5, #1
 80049c2:	930c      	str	r3, [sp, #48]	; 0x30
 80049c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049c8:	2b30      	cmp	r3, #48	; 0x30
 80049ca:	d0f8      	beq.n	80049be <_dtoa_r+0x62e>
 80049cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80049d0:	e04a      	b.n	8004a68 <_dtoa_r+0x6d8>
 80049d2:	bf00      	nop
 80049d4:	080069a0 	.word	0x080069a0
 80049d8:	08006978 	.word	0x08006978
 80049dc:	3ff00000 	.word	0x3ff00000
 80049e0:	40240000 	.word	0x40240000
 80049e4:	401c0000 	.word	0x401c0000
 80049e8:	40140000 	.word	0x40140000
 80049ec:	3fe00000 	.word	0x3fe00000
 80049f0:	4baf      	ldr	r3, [pc, #700]	; (8004cb0 <_dtoa_r+0x920>)
 80049f2:	f7fb fe01 	bl	80005f8 <__aeabi_dmul>
 80049f6:	4606      	mov	r6, r0
 80049f8:	460f      	mov	r7, r1
 80049fa:	e7ac      	b.n	8004956 <_dtoa_r+0x5c6>
 80049fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a00:	9d00      	ldr	r5, [sp, #0]
 8004a02:	4642      	mov	r2, r8
 8004a04:	464b      	mov	r3, r9
 8004a06:	4630      	mov	r0, r6
 8004a08:	4639      	mov	r1, r7
 8004a0a:	f7fb ff1f 	bl	800084c <__aeabi_ddiv>
 8004a0e:	f7fc f8a3 	bl	8000b58 <__aeabi_d2iz>
 8004a12:	9002      	str	r0, [sp, #8]
 8004a14:	f7fb fd86 	bl	8000524 <__aeabi_i2d>
 8004a18:	4642      	mov	r2, r8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	f7fb fdec 	bl	80005f8 <__aeabi_dmul>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4630      	mov	r0, r6
 8004a26:	4639      	mov	r1, r7
 8004a28:	f7fb fc2e 	bl	8000288 <__aeabi_dsub>
 8004a2c:	9e02      	ldr	r6, [sp, #8]
 8004a2e:	9f01      	ldr	r7, [sp, #4]
 8004a30:	3630      	adds	r6, #48	; 0x30
 8004a32:	f805 6b01 	strb.w	r6, [r5], #1
 8004a36:	9e00      	ldr	r6, [sp, #0]
 8004a38:	1bae      	subs	r6, r5, r6
 8004a3a:	42b7      	cmp	r7, r6
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	d137      	bne.n	8004ab2 <_dtoa_r+0x722>
 8004a42:	f7fb fc23 	bl	800028c <__adddf3>
 8004a46:	4642      	mov	r2, r8
 8004a48:	464b      	mov	r3, r9
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	460f      	mov	r7, r1
 8004a4e:	f7fc f863 	bl	8000b18 <__aeabi_dcmpgt>
 8004a52:	b9c8      	cbnz	r0, 8004a88 <_dtoa_r+0x6f8>
 8004a54:	4642      	mov	r2, r8
 8004a56:	464b      	mov	r3, r9
 8004a58:	4630      	mov	r0, r6
 8004a5a:	4639      	mov	r1, r7
 8004a5c:	f7fc f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a60:	b110      	cbz	r0, 8004a68 <_dtoa_r+0x6d8>
 8004a62:	9b02      	ldr	r3, [sp, #8]
 8004a64:	07d9      	lsls	r1, r3, #31
 8004a66:	d40f      	bmi.n	8004a88 <_dtoa_r+0x6f8>
 8004a68:	4620      	mov	r0, r4
 8004a6a:	4659      	mov	r1, fp
 8004a6c:	f000 fac8 	bl	8005000 <_Bfree>
 8004a70:	2300      	movs	r3, #0
 8004a72:	702b      	strb	r3, [r5, #0]
 8004a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a76:	f10a 0001 	add.w	r0, sl, #1
 8004a7a:	6018      	str	r0, [r3, #0]
 8004a7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f43f acd8 	beq.w	8004434 <_dtoa_r+0xa4>
 8004a84:	601d      	str	r5, [r3, #0]
 8004a86:	e4d5      	b.n	8004434 <_dtoa_r+0xa4>
 8004a88:	f8cd a01c 	str.w	sl, [sp, #28]
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	461d      	mov	r5, r3
 8004a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a94:	2a39      	cmp	r2, #57	; 0x39
 8004a96:	d108      	bne.n	8004aaa <_dtoa_r+0x71a>
 8004a98:	9a00      	ldr	r2, [sp, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d1f7      	bne.n	8004a8e <_dtoa_r+0x6fe>
 8004a9e:	9a07      	ldr	r2, [sp, #28]
 8004aa0:	9900      	ldr	r1, [sp, #0]
 8004aa2:	3201      	adds	r2, #1
 8004aa4:	9207      	str	r2, [sp, #28]
 8004aa6:	2230      	movs	r2, #48	; 0x30
 8004aa8:	700a      	strb	r2, [r1, #0]
 8004aaa:	781a      	ldrb	r2, [r3, #0]
 8004aac:	3201      	adds	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e78c      	b.n	80049cc <_dtoa_r+0x63c>
 8004ab2:	4b7f      	ldr	r3, [pc, #508]	; (8004cb0 <_dtoa_r+0x920>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f7fb fd9f 	bl	80005f8 <__aeabi_dmul>
 8004aba:	2200      	movs	r2, #0
 8004abc:	2300      	movs	r3, #0
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460f      	mov	r7, r1
 8004ac2:	f7fc f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d09b      	beq.n	8004a02 <_dtoa_r+0x672>
 8004aca:	e7cd      	b.n	8004a68 <_dtoa_r+0x6d8>
 8004acc:	9a08      	ldr	r2, [sp, #32]
 8004ace:	2a00      	cmp	r2, #0
 8004ad0:	f000 80c4 	beq.w	8004c5c <_dtoa_r+0x8cc>
 8004ad4:	9a05      	ldr	r2, [sp, #20]
 8004ad6:	2a01      	cmp	r2, #1
 8004ad8:	f300 80a8 	bgt.w	8004c2c <_dtoa_r+0x89c>
 8004adc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ade:	2a00      	cmp	r2, #0
 8004ae0:	f000 80a0 	beq.w	8004c24 <_dtoa_r+0x894>
 8004ae4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ae8:	9e06      	ldr	r6, [sp, #24]
 8004aea:	4645      	mov	r5, r8
 8004aec:	9a04      	ldr	r2, [sp, #16]
 8004aee:	2101      	movs	r1, #1
 8004af0:	441a      	add	r2, r3
 8004af2:	4620      	mov	r0, r4
 8004af4:	4498      	add	r8, r3
 8004af6:	9204      	str	r2, [sp, #16]
 8004af8:	f000 fb3e 	bl	8005178 <__i2b>
 8004afc:	4607      	mov	r7, r0
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	dd0b      	ble.n	8004b1a <_dtoa_r+0x78a>
 8004b02:	9b04      	ldr	r3, [sp, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	dd08      	ble.n	8004b1a <_dtoa_r+0x78a>
 8004b08:	42ab      	cmp	r3, r5
 8004b0a:	9a04      	ldr	r2, [sp, #16]
 8004b0c:	bfa8      	it	ge
 8004b0e:	462b      	movge	r3, r5
 8004b10:	eba8 0803 	sub.w	r8, r8, r3
 8004b14:	1aed      	subs	r5, r5, r3
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	9304      	str	r3, [sp, #16]
 8004b1a:	9b06      	ldr	r3, [sp, #24]
 8004b1c:	b1fb      	cbz	r3, 8004b5e <_dtoa_r+0x7ce>
 8004b1e:	9b08      	ldr	r3, [sp, #32]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 809f 	beq.w	8004c64 <_dtoa_r+0x8d4>
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	dd11      	ble.n	8004b4e <_dtoa_r+0x7be>
 8004b2a:	4639      	mov	r1, r7
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 fbde 	bl	80052f0 <__pow5mult>
 8004b34:	465a      	mov	r2, fp
 8004b36:	4601      	mov	r1, r0
 8004b38:	4607      	mov	r7, r0
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f000 fb32 	bl	80051a4 <__multiply>
 8004b40:	4659      	mov	r1, fp
 8004b42:	9007      	str	r0, [sp, #28]
 8004b44:	4620      	mov	r0, r4
 8004b46:	f000 fa5b 	bl	8005000 <_Bfree>
 8004b4a:	9b07      	ldr	r3, [sp, #28]
 8004b4c:	469b      	mov	fp, r3
 8004b4e:	9b06      	ldr	r3, [sp, #24]
 8004b50:	1b9a      	subs	r2, r3, r6
 8004b52:	d004      	beq.n	8004b5e <_dtoa_r+0x7ce>
 8004b54:	4659      	mov	r1, fp
 8004b56:	4620      	mov	r0, r4
 8004b58:	f000 fbca 	bl	80052f0 <__pow5mult>
 8004b5c:	4683      	mov	fp, r0
 8004b5e:	2101      	movs	r1, #1
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 fb09 	bl	8005178 <__i2b>
 8004b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	dd7c      	ble.n	8004c68 <_dtoa_r+0x8d8>
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4601      	mov	r1, r0
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 fbbc 	bl	80052f0 <__pow5mult>
 8004b78:	9b05      	ldr	r3, [sp, #20]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	dd76      	ble.n	8004c6e <_dtoa_r+0x8de>
 8004b80:	2300      	movs	r3, #0
 8004b82:	9306      	str	r3, [sp, #24]
 8004b84:	6933      	ldr	r3, [r6, #16]
 8004b86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004b8a:	6918      	ldr	r0, [r3, #16]
 8004b8c:	f000 faa4 	bl	80050d8 <__hi0bits>
 8004b90:	f1c0 0020 	rsb	r0, r0, #32
 8004b94:	9b04      	ldr	r3, [sp, #16]
 8004b96:	4418      	add	r0, r3
 8004b98:	f010 001f 	ands.w	r0, r0, #31
 8004b9c:	f000 8086 	beq.w	8004cac <_dtoa_r+0x91c>
 8004ba0:	f1c0 0320 	rsb	r3, r0, #32
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	dd7f      	ble.n	8004ca8 <_dtoa_r+0x918>
 8004ba8:	f1c0 001c 	rsb	r0, r0, #28
 8004bac:	9b04      	ldr	r3, [sp, #16]
 8004bae:	4403      	add	r3, r0
 8004bb0:	4480      	add	r8, r0
 8004bb2:	4405      	add	r5, r0
 8004bb4:	9304      	str	r3, [sp, #16]
 8004bb6:	f1b8 0f00 	cmp.w	r8, #0
 8004bba:	dd05      	ble.n	8004bc8 <_dtoa_r+0x838>
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	4642      	mov	r2, r8
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f000 fbef 	bl	80053a4 <__lshift>
 8004bc6:	4683      	mov	fp, r0
 8004bc8:	9b04      	ldr	r3, [sp, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	dd05      	ble.n	8004bda <_dtoa_r+0x84a>
 8004bce:	4631      	mov	r1, r6
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 fbe6 	bl	80053a4 <__lshift>
 8004bd8:	4606      	mov	r6, r0
 8004bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d069      	beq.n	8004cb4 <_dtoa_r+0x924>
 8004be0:	4631      	mov	r1, r6
 8004be2:	4658      	mov	r0, fp
 8004be4:	f000 fc4a 	bl	800547c <__mcmp>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	da63      	bge.n	8004cb4 <_dtoa_r+0x924>
 8004bec:	2300      	movs	r3, #0
 8004bee:	4659      	mov	r1, fp
 8004bf0:	220a      	movs	r2, #10
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f000 fa26 	bl	8005044 <__multadd>
 8004bf8:	9b08      	ldr	r3, [sp, #32]
 8004bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bfe:	4683      	mov	fp, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 818f 	beq.w	8004f24 <_dtoa_r+0xb94>
 8004c06:	4639      	mov	r1, r7
 8004c08:	2300      	movs	r3, #0
 8004c0a:	220a      	movs	r2, #10
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f000 fa19 	bl	8005044 <__multadd>
 8004c12:	f1b9 0f00 	cmp.w	r9, #0
 8004c16:	4607      	mov	r7, r0
 8004c18:	f300 808e 	bgt.w	8004d38 <_dtoa_r+0x9a8>
 8004c1c:	9b05      	ldr	r3, [sp, #20]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	dc50      	bgt.n	8004cc4 <_dtoa_r+0x934>
 8004c22:	e089      	b.n	8004d38 <_dtoa_r+0x9a8>
 8004c24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c2a:	e75d      	b.n	8004ae8 <_dtoa_r+0x758>
 8004c2c:	9b01      	ldr	r3, [sp, #4]
 8004c2e:	1e5e      	subs	r6, r3, #1
 8004c30:	9b06      	ldr	r3, [sp, #24]
 8004c32:	42b3      	cmp	r3, r6
 8004c34:	bfbf      	itttt	lt
 8004c36:	9b06      	ldrlt	r3, [sp, #24]
 8004c38:	9606      	strlt	r6, [sp, #24]
 8004c3a:	1af2      	sublt	r2, r6, r3
 8004c3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004c3e:	bfb6      	itet	lt
 8004c40:	189b      	addlt	r3, r3, r2
 8004c42:	1b9e      	subge	r6, r3, r6
 8004c44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004c46:	9b01      	ldr	r3, [sp, #4]
 8004c48:	bfb8      	it	lt
 8004c4a:	2600      	movlt	r6, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bfb5      	itete	lt
 8004c50:	eba8 0503 	sublt.w	r5, r8, r3
 8004c54:	9b01      	ldrge	r3, [sp, #4]
 8004c56:	2300      	movlt	r3, #0
 8004c58:	4645      	movge	r5, r8
 8004c5a:	e747      	b.n	8004aec <_dtoa_r+0x75c>
 8004c5c:	9e06      	ldr	r6, [sp, #24]
 8004c5e:	9f08      	ldr	r7, [sp, #32]
 8004c60:	4645      	mov	r5, r8
 8004c62:	e74c      	b.n	8004afe <_dtoa_r+0x76e>
 8004c64:	9a06      	ldr	r2, [sp, #24]
 8004c66:	e775      	b.n	8004b54 <_dtoa_r+0x7c4>
 8004c68:	9b05      	ldr	r3, [sp, #20]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	dc18      	bgt.n	8004ca0 <_dtoa_r+0x910>
 8004c6e:	9b02      	ldr	r3, [sp, #8]
 8004c70:	b9b3      	cbnz	r3, 8004ca0 <_dtoa_r+0x910>
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c78:	b9a3      	cbnz	r3, 8004ca4 <_dtoa_r+0x914>
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	0d1b      	lsrs	r3, r3, #20
 8004c82:	051b      	lsls	r3, r3, #20
 8004c84:	b12b      	cbz	r3, 8004c92 <_dtoa_r+0x902>
 8004c86:	9b04      	ldr	r3, [sp, #16]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	9304      	str	r3, [sp, #16]
 8004c8c:	f108 0801 	add.w	r8, r8, #1
 8004c90:	2301      	movs	r3, #1
 8004c92:	9306      	str	r3, [sp, #24]
 8004c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f47f af74 	bne.w	8004b84 <_dtoa_r+0x7f4>
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	e779      	b.n	8004b94 <_dtoa_r+0x804>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e7f6      	b.n	8004c92 <_dtoa_r+0x902>
 8004ca4:	9b02      	ldr	r3, [sp, #8]
 8004ca6:	e7f4      	b.n	8004c92 <_dtoa_r+0x902>
 8004ca8:	d085      	beq.n	8004bb6 <_dtoa_r+0x826>
 8004caa:	4618      	mov	r0, r3
 8004cac:	301c      	adds	r0, #28
 8004cae:	e77d      	b.n	8004bac <_dtoa_r+0x81c>
 8004cb0:	40240000 	.word	0x40240000
 8004cb4:	9b01      	ldr	r3, [sp, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	dc38      	bgt.n	8004d2c <_dtoa_r+0x99c>
 8004cba:	9b05      	ldr	r3, [sp, #20]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	dd35      	ble.n	8004d2c <_dtoa_r+0x99c>
 8004cc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004cc4:	f1b9 0f00 	cmp.w	r9, #0
 8004cc8:	d10d      	bne.n	8004ce6 <_dtoa_r+0x956>
 8004cca:	4631      	mov	r1, r6
 8004ccc:	464b      	mov	r3, r9
 8004cce:	2205      	movs	r2, #5
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f000 f9b7 	bl	8005044 <__multadd>
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	4606      	mov	r6, r0
 8004cda:	4658      	mov	r0, fp
 8004cdc:	f000 fbce 	bl	800547c <__mcmp>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	f73f adbd 	bgt.w	8004860 <_dtoa_r+0x4d0>
 8004ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce8:	9d00      	ldr	r5, [sp, #0]
 8004cea:	ea6f 0a03 	mvn.w	sl, r3
 8004cee:	f04f 0800 	mov.w	r8, #0
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f000 f983 	bl	8005000 <_Bfree>
 8004cfa:	2f00      	cmp	r7, #0
 8004cfc:	f43f aeb4 	beq.w	8004a68 <_dtoa_r+0x6d8>
 8004d00:	f1b8 0f00 	cmp.w	r8, #0
 8004d04:	d005      	beq.n	8004d12 <_dtoa_r+0x982>
 8004d06:	45b8      	cmp	r8, r7
 8004d08:	d003      	beq.n	8004d12 <_dtoa_r+0x982>
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f000 f977 	bl	8005000 <_Bfree>
 8004d12:	4639      	mov	r1, r7
 8004d14:	4620      	mov	r0, r4
 8004d16:	f000 f973 	bl	8005000 <_Bfree>
 8004d1a:	e6a5      	b.n	8004a68 <_dtoa_r+0x6d8>
 8004d1c:	2600      	movs	r6, #0
 8004d1e:	4637      	mov	r7, r6
 8004d20:	e7e1      	b.n	8004ce6 <_dtoa_r+0x956>
 8004d22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004d24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004d28:	4637      	mov	r7, r6
 8004d2a:	e599      	b.n	8004860 <_dtoa_r+0x4d0>
 8004d2c:	9b08      	ldr	r3, [sp, #32]
 8004d2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80fd 	beq.w	8004f32 <_dtoa_r+0xba2>
 8004d38:	2d00      	cmp	r5, #0
 8004d3a:	dd05      	ble.n	8004d48 <_dtoa_r+0x9b8>
 8004d3c:	4639      	mov	r1, r7
 8004d3e:	462a      	mov	r2, r5
 8004d40:	4620      	mov	r0, r4
 8004d42:	f000 fb2f 	bl	80053a4 <__lshift>
 8004d46:	4607      	mov	r7, r0
 8004d48:	9b06      	ldr	r3, [sp, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d05c      	beq.n	8004e08 <_dtoa_r+0xa78>
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 f915 	bl	8004f80 <_Balloc>
 8004d56:	4605      	mov	r5, r0
 8004d58:	b928      	cbnz	r0, 8004d66 <_dtoa_r+0x9d6>
 8004d5a:	4b80      	ldr	r3, [pc, #512]	; (8004f5c <_dtoa_r+0xbcc>)
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004d62:	f7ff bb2e 	b.w	80043c2 <_dtoa_r+0x32>
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	3202      	adds	r2, #2
 8004d6a:	0092      	lsls	r2, r2, #2
 8004d6c:	f107 010c 	add.w	r1, r7, #12
 8004d70:	300c      	adds	r0, #12
 8004d72:	f7fe fdd1 	bl	8003918 <memcpy>
 8004d76:	2201      	movs	r2, #1
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 fb12 	bl	80053a4 <__lshift>
 8004d80:	9b00      	ldr	r3, [sp, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	9b00      	ldr	r3, [sp, #0]
 8004d88:	444b      	add	r3, r9
 8004d8a:	9307      	str	r3, [sp, #28]
 8004d8c:	9b02      	ldr	r3, [sp, #8]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	46b8      	mov	r8, r7
 8004d94:	9306      	str	r3, [sp, #24]
 8004d96:	4607      	mov	r7, r0
 8004d98:	9b01      	ldr	r3, [sp, #4]
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	4658      	mov	r0, fp
 8004da0:	9302      	str	r3, [sp, #8]
 8004da2:	f7ff fa68 	bl	8004276 <quorem>
 8004da6:	4603      	mov	r3, r0
 8004da8:	3330      	adds	r3, #48	; 0x30
 8004daa:	9004      	str	r0, [sp, #16]
 8004dac:	4641      	mov	r1, r8
 8004dae:	4658      	mov	r0, fp
 8004db0:	9308      	str	r3, [sp, #32]
 8004db2:	f000 fb63 	bl	800547c <__mcmp>
 8004db6:	463a      	mov	r2, r7
 8004db8:	4681      	mov	r9, r0
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f000 fb79 	bl	80054b4 <__mdiff>
 8004dc2:	68c2      	ldr	r2, [r0, #12]
 8004dc4:	9b08      	ldr	r3, [sp, #32]
 8004dc6:	4605      	mov	r5, r0
 8004dc8:	bb02      	cbnz	r2, 8004e0c <_dtoa_r+0xa7c>
 8004dca:	4601      	mov	r1, r0
 8004dcc:	4658      	mov	r0, fp
 8004dce:	f000 fb55 	bl	800547c <__mcmp>
 8004dd2:	9b08      	ldr	r3, [sp, #32]
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	4620      	mov	r0, r4
 8004dda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004dde:	f000 f90f 	bl	8005000 <_Bfree>
 8004de2:	9b05      	ldr	r3, [sp, #20]
 8004de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de6:	9d01      	ldr	r5, [sp, #4]
 8004de8:	ea43 0102 	orr.w	r1, r3, r2
 8004dec:	9b06      	ldr	r3, [sp, #24]
 8004dee:	430b      	orrs	r3, r1
 8004df0:	9b08      	ldr	r3, [sp, #32]
 8004df2:	d10d      	bne.n	8004e10 <_dtoa_r+0xa80>
 8004df4:	2b39      	cmp	r3, #57	; 0x39
 8004df6:	d029      	beq.n	8004e4c <_dtoa_r+0xabc>
 8004df8:	f1b9 0f00 	cmp.w	r9, #0
 8004dfc:	dd01      	ble.n	8004e02 <_dtoa_r+0xa72>
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	3331      	adds	r3, #49	; 0x31
 8004e02:	9a02      	ldr	r2, [sp, #8]
 8004e04:	7013      	strb	r3, [r2, #0]
 8004e06:	e774      	b.n	8004cf2 <_dtoa_r+0x962>
 8004e08:	4638      	mov	r0, r7
 8004e0a:	e7b9      	b.n	8004d80 <_dtoa_r+0x9f0>
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	e7e2      	b.n	8004dd6 <_dtoa_r+0xa46>
 8004e10:	f1b9 0f00 	cmp.w	r9, #0
 8004e14:	db06      	blt.n	8004e24 <_dtoa_r+0xa94>
 8004e16:	9905      	ldr	r1, [sp, #20]
 8004e18:	ea41 0909 	orr.w	r9, r1, r9
 8004e1c:	9906      	ldr	r1, [sp, #24]
 8004e1e:	ea59 0101 	orrs.w	r1, r9, r1
 8004e22:	d120      	bne.n	8004e66 <_dtoa_r+0xad6>
 8004e24:	2a00      	cmp	r2, #0
 8004e26:	ddec      	ble.n	8004e02 <_dtoa_r+0xa72>
 8004e28:	4659      	mov	r1, fp
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	f000 fab8 	bl	80053a4 <__lshift>
 8004e34:	4631      	mov	r1, r6
 8004e36:	4683      	mov	fp, r0
 8004e38:	f000 fb20 	bl	800547c <__mcmp>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	9b01      	ldr	r3, [sp, #4]
 8004e40:	dc02      	bgt.n	8004e48 <_dtoa_r+0xab8>
 8004e42:	d1de      	bne.n	8004e02 <_dtoa_r+0xa72>
 8004e44:	07da      	lsls	r2, r3, #31
 8004e46:	d5dc      	bpl.n	8004e02 <_dtoa_r+0xa72>
 8004e48:	2b39      	cmp	r3, #57	; 0x39
 8004e4a:	d1d8      	bne.n	8004dfe <_dtoa_r+0xa6e>
 8004e4c:	9a02      	ldr	r2, [sp, #8]
 8004e4e:	2339      	movs	r3, #57	; 0x39
 8004e50:	7013      	strb	r3, [r2, #0]
 8004e52:	462b      	mov	r3, r5
 8004e54:	461d      	mov	r5, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e5c:	2a39      	cmp	r2, #57	; 0x39
 8004e5e:	d050      	beq.n	8004f02 <_dtoa_r+0xb72>
 8004e60:	3201      	adds	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	e745      	b.n	8004cf2 <_dtoa_r+0x962>
 8004e66:	2a00      	cmp	r2, #0
 8004e68:	dd03      	ble.n	8004e72 <_dtoa_r+0xae2>
 8004e6a:	2b39      	cmp	r3, #57	; 0x39
 8004e6c:	d0ee      	beq.n	8004e4c <_dtoa_r+0xabc>
 8004e6e:	3301      	adds	r3, #1
 8004e70:	e7c7      	b.n	8004e02 <_dtoa_r+0xa72>
 8004e72:	9a01      	ldr	r2, [sp, #4]
 8004e74:	9907      	ldr	r1, [sp, #28]
 8004e76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e7a:	428a      	cmp	r2, r1
 8004e7c:	d02a      	beq.n	8004ed4 <_dtoa_r+0xb44>
 8004e7e:	4659      	mov	r1, fp
 8004e80:	2300      	movs	r3, #0
 8004e82:	220a      	movs	r2, #10
 8004e84:	4620      	mov	r0, r4
 8004e86:	f000 f8dd 	bl	8005044 <__multadd>
 8004e8a:	45b8      	cmp	r8, r7
 8004e8c:	4683      	mov	fp, r0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	f04f 020a 	mov.w	r2, #10
 8004e96:	4641      	mov	r1, r8
 8004e98:	4620      	mov	r0, r4
 8004e9a:	d107      	bne.n	8004eac <_dtoa_r+0xb1c>
 8004e9c:	f000 f8d2 	bl	8005044 <__multadd>
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	4607      	mov	r7, r0
 8004ea4:	9b01      	ldr	r3, [sp, #4]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	e775      	b.n	8004d98 <_dtoa_r+0xa08>
 8004eac:	f000 f8ca 	bl	8005044 <__multadd>
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	4680      	mov	r8, r0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	220a      	movs	r2, #10
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f000 f8c3 	bl	8005044 <__multadd>
 8004ebe:	4607      	mov	r7, r0
 8004ec0:	e7f0      	b.n	8004ea4 <_dtoa_r+0xb14>
 8004ec2:	f1b9 0f00 	cmp.w	r9, #0
 8004ec6:	9a00      	ldr	r2, [sp, #0]
 8004ec8:	bfcc      	ite	gt
 8004eca:	464d      	movgt	r5, r9
 8004ecc:	2501      	movle	r5, #1
 8004ece:	4415      	add	r5, r2
 8004ed0:	f04f 0800 	mov.w	r8, #0
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4620      	mov	r0, r4
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	f000 fa62 	bl	80053a4 <__lshift>
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	4683      	mov	fp, r0
 8004ee4:	f000 faca 	bl	800547c <__mcmp>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	dcb2      	bgt.n	8004e52 <_dtoa_r+0xac2>
 8004eec:	d102      	bne.n	8004ef4 <_dtoa_r+0xb64>
 8004eee:	9b01      	ldr	r3, [sp, #4]
 8004ef0:	07db      	lsls	r3, r3, #31
 8004ef2:	d4ae      	bmi.n	8004e52 <_dtoa_r+0xac2>
 8004ef4:	462b      	mov	r3, r5
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004efc:	2a30      	cmp	r2, #48	; 0x30
 8004efe:	d0fa      	beq.n	8004ef6 <_dtoa_r+0xb66>
 8004f00:	e6f7      	b.n	8004cf2 <_dtoa_r+0x962>
 8004f02:	9a00      	ldr	r2, [sp, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d1a5      	bne.n	8004e54 <_dtoa_r+0xac4>
 8004f08:	f10a 0a01 	add.w	sl, sl, #1
 8004f0c:	2331      	movs	r3, #49	; 0x31
 8004f0e:	e779      	b.n	8004e04 <_dtoa_r+0xa74>
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <_dtoa_r+0xbd0>)
 8004f12:	f7ff baaf 	b.w	8004474 <_dtoa_r+0xe4>
 8004f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f47f aa86 	bne.w	800442a <_dtoa_r+0x9a>
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <_dtoa_r+0xbd4>)
 8004f20:	f7ff baa8 	b.w	8004474 <_dtoa_r+0xe4>
 8004f24:	f1b9 0f00 	cmp.w	r9, #0
 8004f28:	dc03      	bgt.n	8004f32 <_dtoa_r+0xba2>
 8004f2a:	9b05      	ldr	r3, [sp, #20]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	f73f aec9 	bgt.w	8004cc4 <_dtoa_r+0x934>
 8004f32:	9d00      	ldr	r5, [sp, #0]
 8004f34:	4631      	mov	r1, r6
 8004f36:	4658      	mov	r0, fp
 8004f38:	f7ff f99d 	bl	8004276 <quorem>
 8004f3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004f40:	f805 3b01 	strb.w	r3, [r5], #1
 8004f44:	9a00      	ldr	r2, [sp, #0]
 8004f46:	1aaa      	subs	r2, r5, r2
 8004f48:	4591      	cmp	r9, r2
 8004f4a:	ddba      	ble.n	8004ec2 <_dtoa_r+0xb32>
 8004f4c:	4659      	mov	r1, fp
 8004f4e:	2300      	movs	r3, #0
 8004f50:	220a      	movs	r2, #10
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 f876 	bl	8005044 <__multadd>
 8004f58:	4683      	mov	fp, r0
 8004f5a:	e7eb      	b.n	8004f34 <_dtoa_r+0xba4>
 8004f5c:	08006907 	.word	0x08006907
 8004f60:	08006860 	.word	0x08006860
 8004f64:	08006884 	.word	0x08006884

08004f68 <_localeconv_r>:
 8004f68:	4800      	ldr	r0, [pc, #0]	; (8004f6c <_localeconv_r+0x4>)
 8004f6a:	4770      	bx	lr
 8004f6c:	2000016c 	.word	0x2000016c

08004f70 <malloc>:
 8004f70:	4b02      	ldr	r3, [pc, #8]	; (8004f7c <malloc+0xc>)
 8004f72:	4601      	mov	r1, r0
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	f000 bbe1 	b.w	800573c <_malloc_r>
 8004f7a:	bf00      	nop
 8004f7c:	20000018 	.word	0x20000018

08004f80 <_Balloc>:
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f84:	4604      	mov	r4, r0
 8004f86:	460d      	mov	r5, r1
 8004f88:	b976      	cbnz	r6, 8004fa8 <_Balloc+0x28>
 8004f8a:	2010      	movs	r0, #16
 8004f8c:	f7ff fff0 	bl	8004f70 <malloc>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6260      	str	r0, [r4, #36]	; 0x24
 8004f94:	b920      	cbnz	r0, 8004fa0 <_Balloc+0x20>
 8004f96:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <_Balloc+0x78>)
 8004f98:	4818      	ldr	r0, [pc, #96]	; (8004ffc <_Balloc+0x7c>)
 8004f9a:	2166      	movs	r1, #102	; 0x66
 8004f9c:	f000 fd94 	bl	8005ac8 <__assert_func>
 8004fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fa4:	6006      	str	r6, [r0, #0]
 8004fa6:	60c6      	str	r6, [r0, #12]
 8004fa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004faa:	68f3      	ldr	r3, [r6, #12]
 8004fac:	b183      	cbz	r3, 8004fd0 <_Balloc+0x50>
 8004fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004fb6:	b9b8      	cbnz	r0, 8004fe8 <_Balloc+0x68>
 8004fb8:	2101      	movs	r1, #1
 8004fba:	fa01 f605 	lsl.w	r6, r1, r5
 8004fbe:	1d72      	adds	r2, r6, #5
 8004fc0:	0092      	lsls	r2, r2, #2
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 fb5a 	bl	800567c <_calloc_r>
 8004fc8:	b160      	cbz	r0, 8004fe4 <_Balloc+0x64>
 8004fca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004fce:	e00e      	b.n	8004fee <_Balloc+0x6e>
 8004fd0:	2221      	movs	r2, #33	; 0x21
 8004fd2:	2104      	movs	r1, #4
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 fb51 	bl	800567c <_calloc_r>
 8004fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fdc:	60f0      	str	r0, [r6, #12]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e4      	bne.n	8004fae <_Balloc+0x2e>
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
 8004fe8:	6802      	ldr	r2, [r0, #0]
 8004fea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ff4:	e7f7      	b.n	8004fe6 <_Balloc+0x66>
 8004ff6:	bf00      	nop
 8004ff8:	08006891 	.word	0x08006891
 8004ffc:	08006918 	.word	0x08006918

08005000 <_Bfree>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005004:	4605      	mov	r5, r0
 8005006:	460c      	mov	r4, r1
 8005008:	b976      	cbnz	r6, 8005028 <_Bfree+0x28>
 800500a:	2010      	movs	r0, #16
 800500c:	f7ff ffb0 	bl	8004f70 <malloc>
 8005010:	4602      	mov	r2, r0
 8005012:	6268      	str	r0, [r5, #36]	; 0x24
 8005014:	b920      	cbnz	r0, 8005020 <_Bfree+0x20>
 8005016:	4b09      	ldr	r3, [pc, #36]	; (800503c <_Bfree+0x3c>)
 8005018:	4809      	ldr	r0, [pc, #36]	; (8005040 <_Bfree+0x40>)
 800501a:	218a      	movs	r1, #138	; 0x8a
 800501c:	f000 fd54 	bl	8005ac8 <__assert_func>
 8005020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005024:	6006      	str	r6, [r0, #0]
 8005026:	60c6      	str	r6, [r0, #12]
 8005028:	b13c      	cbz	r4, 800503a <_Bfree+0x3a>
 800502a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800502c:	6862      	ldr	r2, [r4, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005034:	6021      	str	r1, [r4, #0]
 8005036:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	08006891 	.word	0x08006891
 8005040:	08006918 	.word	0x08006918

08005044 <__multadd>:
 8005044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005048:	690e      	ldr	r6, [r1, #16]
 800504a:	4607      	mov	r7, r0
 800504c:	4698      	mov	r8, r3
 800504e:	460c      	mov	r4, r1
 8005050:	f101 0014 	add.w	r0, r1, #20
 8005054:	2300      	movs	r3, #0
 8005056:	6805      	ldr	r5, [r0, #0]
 8005058:	b2a9      	uxth	r1, r5
 800505a:	fb02 8101 	mla	r1, r2, r1, r8
 800505e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005062:	0c2d      	lsrs	r5, r5, #16
 8005064:	fb02 c505 	mla	r5, r2, r5, ip
 8005068:	b289      	uxth	r1, r1
 800506a:	3301      	adds	r3, #1
 800506c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005070:	429e      	cmp	r6, r3
 8005072:	f840 1b04 	str.w	r1, [r0], #4
 8005076:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800507a:	dcec      	bgt.n	8005056 <__multadd+0x12>
 800507c:	f1b8 0f00 	cmp.w	r8, #0
 8005080:	d022      	beq.n	80050c8 <__multadd+0x84>
 8005082:	68a3      	ldr	r3, [r4, #8]
 8005084:	42b3      	cmp	r3, r6
 8005086:	dc19      	bgt.n	80050bc <__multadd+0x78>
 8005088:	6861      	ldr	r1, [r4, #4]
 800508a:	4638      	mov	r0, r7
 800508c:	3101      	adds	r1, #1
 800508e:	f7ff ff77 	bl	8004f80 <_Balloc>
 8005092:	4605      	mov	r5, r0
 8005094:	b928      	cbnz	r0, 80050a2 <__multadd+0x5e>
 8005096:	4602      	mov	r2, r0
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <__multadd+0x8c>)
 800509a:	480e      	ldr	r0, [pc, #56]	; (80050d4 <__multadd+0x90>)
 800509c:	21b5      	movs	r1, #181	; 0xb5
 800509e:	f000 fd13 	bl	8005ac8 <__assert_func>
 80050a2:	6922      	ldr	r2, [r4, #16]
 80050a4:	3202      	adds	r2, #2
 80050a6:	f104 010c 	add.w	r1, r4, #12
 80050aa:	0092      	lsls	r2, r2, #2
 80050ac:	300c      	adds	r0, #12
 80050ae:	f7fe fc33 	bl	8003918 <memcpy>
 80050b2:	4621      	mov	r1, r4
 80050b4:	4638      	mov	r0, r7
 80050b6:	f7ff ffa3 	bl	8005000 <_Bfree>
 80050ba:	462c      	mov	r4, r5
 80050bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80050c0:	3601      	adds	r6, #1
 80050c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80050c6:	6126      	str	r6, [r4, #16]
 80050c8:	4620      	mov	r0, r4
 80050ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ce:	bf00      	nop
 80050d0:	08006907 	.word	0x08006907
 80050d4:	08006918 	.word	0x08006918

080050d8 <__hi0bits>:
 80050d8:	0c03      	lsrs	r3, r0, #16
 80050da:	041b      	lsls	r3, r3, #16
 80050dc:	b9d3      	cbnz	r3, 8005114 <__hi0bits+0x3c>
 80050de:	0400      	lsls	r0, r0, #16
 80050e0:	2310      	movs	r3, #16
 80050e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80050e6:	bf04      	itt	eq
 80050e8:	0200      	lsleq	r0, r0, #8
 80050ea:	3308      	addeq	r3, #8
 80050ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80050f0:	bf04      	itt	eq
 80050f2:	0100      	lsleq	r0, r0, #4
 80050f4:	3304      	addeq	r3, #4
 80050f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80050fa:	bf04      	itt	eq
 80050fc:	0080      	lsleq	r0, r0, #2
 80050fe:	3302      	addeq	r3, #2
 8005100:	2800      	cmp	r0, #0
 8005102:	db05      	blt.n	8005110 <__hi0bits+0x38>
 8005104:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005108:	f103 0301 	add.w	r3, r3, #1
 800510c:	bf08      	it	eq
 800510e:	2320      	moveq	r3, #32
 8005110:	4618      	mov	r0, r3
 8005112:	4770      	bx	lr
 8005114:	2300      	movs	r3, #0
 8005116:	e7e4      	b.n	80050e2 <__hi0bits+0xa>

08005118 <__lo0bits>:
 8005118:	6803      	ldr	r3, [r0, #0]
 800511a:	f013 0207 	ands.w	r2, r3, #7
 800511e:	4601      	mov	r1, r0
 8005120:	d00b      	beq.n	800513a <__lo0bits+0x22>
 8005122:	07da      	lsls	r2, r3, #31
 8005124:	d424      	bmi.n	8005170 <__lo0bits+0x58>
 8005126:	0798      	lsls	r0, r3, #30
 8005128:	bf49      	itett	mi
 800512a:	085b      	lsrmi	r3, r3, #1
 800512c:	089b      	lsrpl	r3, r3, #2
 800512e:	2001      	movmi	r0, #1
 8005130:	600b      	strmi	r3, [r1, #0]
 8005132:	bf5c      	itt	pl
 8005134:	600b      	strpl	r3, [r1, #0]
 8005136:	2002      	movpl	r0, #2
 8005138:	4770      	bx	lr
 800513a:	b298      	uxth	r0, r3
 800513c:	b9b0      	cbnz	r0, 800516c <__lo0bits+0x54>
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	2010      	movs	r0, #16
 8005142:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005146:	bf04      	itt	eq
 8005148:	0a1b      	lsreq	r3, r3, #8
 800514a:	3008      	addeq	r0, #8
 800514c:	071a      	lsls	r2, r3, #28
 800514e:	bf04      	itt	eq
 8005150:	091b      	lsreq	r3, r3, #4
 8005152:	3004      	addeq	r0, #4
 8005154:	079a      	lsls	r2, r3, #30
 8005156:	bf04      	itt	eq
 8005158:	089b      	lsreq	r3, r3, #2
 800515a:	3002      	addeq	r0, #2
 800515c:	07da      	lsls	r2, r3, #31
 800515e:	d403      	bmi.n	8005168 <__lo0bits+0x50>
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	f100 0001 	add.w	r0, r0, #1
 8005166:	d005      	beq.n	8005174 <__lo0bits+0x5c>
 8005168:	600b      	str	r3, [r1, #0]
 800516a:	4770      	bx	lr
 800516c:	4610      	mov	r0, r2
 800516e:	e7e8      	b.n	8005142 <__lo0bits+0x2a>
 8005170:	2000      	movs	r0, #0
 8005172:	4770      	bx	lr
 8005174:	2020      	movs	r0, #32
 8005176:	4770      	bx	lr

08005178 <__i2b>:
 8005178:	b510      	push	{r4, lr}
 800517a:	460c      	mov	r4, r1
 800517c:	2101      	movs	r1, #1
 800517e:	f7ff feff 	bl	8004f80 <_Balloc>
 8005182:	4602      	mov	r2, r0
 8005184:	b928      	cbnz	r0, 8005192 <__i2b+0x1a>
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <__i2b+0x24>)
 8005188:	4805      	ldr	r0, [pc, #20]	; (80051a0 <__i2b+0x28>)
 800518a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800518e:	f000 fc9b 	bl	8005ac8 <__assert_func>
 8005192:	2301      	movs	r3, #1
 8005194:	6144      	str	r4, [r0, #20]
 8005196:	6103      	str	r3, [r0, #16]
 8005198:	bd10      	pop	{r4, pc}
 800519a:	bf00      	nop
 800519c:	08006907 	.word	0x08006907
 80051a0:	08006918 	.word	0x08006918

080051a4 <__multiply>:
 80051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	4614      	mov	r4, r2
 80051aa:	690a      	ldr	r2, [r1, #16]
 80051ac:	6923      	ldr	r3, [r4, #16]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	bfb8      	it	lt
 80051b2:	460b      	movlt	r3, r1
 80051b4:	460d      	mov	r5, r1
 80051b6:	bfbc      	itt	lt
 80051b8:	4625      	movlt	r5, r4
 80051ba:	461c      	movlt	r4, r3
 80051bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80051c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80051c4:	68ab      	ldr	r3, [r5, #8]
 80051c6:	6869      	ldr	r1, [r5, #4]
 80051c8:	eb0a 0709 	add.w	r7, sl, r9
 80051cc:	42bb      	cmp	r3, r7
 80051ce:	b085      	sub	sp, #20
 80051d0:	bfb8      	it	lt
 80051d2:	3101      	addlt	r1, #1
 80051d4:	f7ff fed4 	bl	8004f80 <_Balloc>
 80051d8:	b930      	cbnz	r0, 80051e8 <__multiply+0x44>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b42      	ldr	r3, [pc, #264]	; (80052e8 <__multiply+0x144>)
 80051de:	4843      	ldr	r0, [pc, #268]	; (80052ec <__multiply+0x148>)
 80051e0:	f240 115d 	movw	r1, #349	; 0x15d
 80051e4:	f000 fc70 	bl	8005ac8 <__assert_func>
 80051e8:	f100 0614 	add.w	r6, r0, #20
 80051ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80051f0:	4633      	mov	r3, r6
 80051f2:	2200      	movs	r2, #0
 80051f4:	4543      	cmp	r3, r8
 80051f6:	d31e      	bcc.n	8005236 <__multiply+0x92>
 80051f8:	f105 0c14 	add.w	ip, r5, #20
 80051fc:	f104 0314 	add.w	r3, r4, #20
 8005200:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005204:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005208:	9202      	str	r2, [sp, #8]
 800520a:	ebac 0205 	sub.w	r2, ip, r5
 800520e:	3a15      	subs	r2, #21
 8005210:	f022 0203 	bic.w	r2, r2, #3
 8005214:	3204      	adds	r2, #4
 8005216:	f105 0115 	add.w	r1, r5, #21
 800521a:	458c      	cmp	ip, r1
 800521c:	bf38      	it	cc
 800521e:	2204      	movcc	r2, #4
 8005220:	9201      	str	r2, [sp, #4]
 8005222:	9a02      	ldr	r2, [sp, #8]
 8005224:	9303      	str	r3, [sp, #12]
 8005226:	429a      	cmp	r2, r3
 8005228:	d808      	bhi.n	800523c <__multiply+0x98>
 800522a:	2f00      	cmp	r7, #0
 800522c:	dc55      	bgt.n	80052da <__multiply+0x136>
 800522e:	6107      	str	r7, [r0, #16]
 8005230:	b005      	add	sp, #20
 8005232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005236:	f843 2b04 	str.w	r2, [r3], #4
 800523a:	e7db      	b.n	80051f4 <__multiply+0x50>
 800523c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005240:	f1ba 0f00 	cmp.w	sl, #0
 8005244:	d020      	beq.n	8005288 <__multiply+0xe4>
 8005246:	f105 0e14 	add.w	lr, r5, #20
 800524a:	46b1      	mov	r9, r6
 800524c:	2200      	movs	r2, #0
 800524e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005252:	f8d9 b000 	ldr.w	fp, [r9]
 8005256:	b2a1      	uxth	r1, r4
 8005258:	fa1f fb8b 	uxth.w	fp, fp
 800525c:	fb0a b101 	mla	r1, sl, r1, fp
 8005260:	4411      	add	r1, r2
 8005262:	f8d9 2000 	ldr.w	r2, [r9]
 8005266:	0c24      	lsrs	r4, r4, #16
 8005268:	0c12      	lsrs	r2, r2, #16
 800526a:	fb0a 2404 	mla	r4, sl, r4, r2
 800526e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005272:	b289      	uxth	r1, r1
 8005274:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005278:	45f4      	cmp	ip, lr
 800527a:	f849 1b04 	str.w	r1, [r9], #4
 800527e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005282:	d8e4      	bhi.n	800524e <__multiply+0xaa>
 8005284:	9901      	ldr	r1, [sp, #4]
 8005286:	5072      	str	r2, [r6, r1]
 8005288:	9a03      	ldr	r2, [sp, #12]
 800528a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800528e:	3304      	adds	r3, #4
 8005290:	f1b9 0f00 	cmp.w	r9, #0
 8005294:	d01f      	beq.n	80052d6 <__multiply+0x132>
 8005296:	6834      	ldr	r4, [r6, #0]
 8005298:	f105 0114 	add.w	r1, r5, #20
 800529c:	46b6      	mov	lr, r6
 800529e:	f04f 0a00 	mov.w	sl, #0
 80052a2:	880a      	ldrh	r2, [r1, #0]
 80052a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80052a8:	fb09 b202 	mla	r2, r9, r2, fp
 80052ac:	4492      	add	sl, r2
 80052ae:	b2a4      	uxth	r4, r4
 80052b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80052b4:	f84e 4b04 	str.w	r4, [lr], #4
 80052b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80052bc:	f8be 2000 	ldrh.w	r2, [lr]
 80052c0:	0c24      	lsrs	r4, r4, #16
 80052c2:	fb09 2404 	mla	r4, r9, r4, r2
 80052c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80052ca:	458c      	cmp	ip, r1
 80052cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80052d0:	d8e7      	bhi.n	80052a2 <__multiply+0xfe>
 80052d2:	9a01      	ldr	r2, [sp, #4]
 80052d4:	50b4      	str	r4, [r6, r2]
 80052d6:	3604      	adds	r6, #4
 80052d8:	e7a3      	b.n	8005222 <__multiply+0x7e>
 80052da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1a5      	bne.n	800522e <__multiply+0x8a>
 80052e2:	3f01      	subs	r7, #1
 80052e4:	e7a1      	b.n	800522a <__multiply+0x86>
 80052e6:	bf00      	nop
 80052e8:	08006907 	.word	0x08006907
 80052ec:	08006918 	.word	0x08006918

080052f0 <__pow5mult>:
 80052f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f4:	4615      	mov	r5, r2
 80052f6:	f012 0203 	ands.w	r2, r2, #3
 80052fa:	4606      	mov	r6, r0
 80052fc:	460f      	mov	r7, r1
 80052fe:	d007      	beq.n	8005310 <__pow5mult+0x20>
 8005300:	4c25      	ldr	r4, [pc, #148]	; (8005398 <__pow5mult+0xa8>)
 8005302:	3a01      	subs	r2, #1
 8005304:	2300      	movs	r3, #0
 8005306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800530a:	f7ff fe9b 	bl	8005044 <__multadd>
 800530e:	4607      	mov	r7, r0
 8005310:	10ad      	asrs	r5, r5, #2
 8005312:	d03d      	beq.n	8005390 <__pow5mult+0xa0>
 8005314:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005316:	b97c      	cbnz	r4, 8005338 <__pow5mult+0x48>
 8005318:	2010      	movs	r0, #16
 800531a:	f7ff fe29 	bl	8004f70 <malloc>
 800531e:	4602      	mov	r2, r0
 8005320:	6270      	str	r0, [r6, #36]	; 0x24
 8005322:	b928      	cbnz	r0, 8005330 <__pow5mult+0x40>
 8005324:	4b1d      	ldr	r3, [pc, #116]	; (800539c <__pow5mult+0xac>)
 8005326:	481e      	ldr	r0, [pc, #120]	; (80053a0 <__pow5mult+0xb0>)
 8005328:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800532c:	f000 fbcc 	bl	8005ac8 <__assert_func>
 8005330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005334:	6004      	str	r4, [r0, #0]
 8005336:	60c4      	str	r4, [r0, #12]
 8005338:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800533c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005340:	b94c      	cbnz	r4, 8005356 <__pow5mult+0x66>
 8005342:	f240 2171 	movw	r1, #625	; 0x271
 8005346:	4630      	mov	r0, r6
 8005348:	f7ff ff16 	bl	8005178 <__i2b>
 800534c:	2300      	movs	r3, #0
 800534e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005352:	4604      	mov	r4, r0
 8005354:	6003      	str	r3, [r0, #0]
 8005356:	f04f 0900 	mov.w	r9, #0
 800535a:	07eb      	lsls	r3, r5, #31
 800535c:	d50a      	bpl.n	8005374 <__pow5mult+0x84>
 800535e:	4639      	mov	r1, r7
 8005360:	4622      	mov	r2, r4
 8005362:	4630      	mov	r0, r6
 8005364:	f7ff ff1e 	bl	80051a4 <__multiply>
 8005368:	4639      	mov	r1, r7
 800536a:	4680      	mov	r8, r0
 800536c:	4630      	mov	r0, r6
 800536e:	f7ff fe47 	bl	8005000 <_Bfree>
 8005372:	4647      	mov	r7, r8
 8005374:	106d      	asrs	r5, r5, #1
 8005376:	d00b      	beq.n	8005390 <__pow5mult+0xa0>
 8005378:	6820      	ldr	r0, [r4, #0]
 800537a:	b938      	cbnz	r0, 800538c <__pow5mult+0x9c>
 800537c:	4622      	mov	r2, r4
 800537e:	4621      	mov	r1, r4
 8005380:	4630      	mov	r0, r6
 8005382:	f7ff ff0f 	bl	80051a4 <__multiply>
 8005386:	6020      	str	r0, [r4, #0]
 8005388:	f8c0 9000 	str.w	r9, [r0]
 800538c:	4604      	mov	r4, r0
 800538e:	e7e4      	b.n	800535a <__pow5mult+0x6a>
 8005390:	4638      	mov	r0, r7
 8005392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005396:	bf00      	nop
 8005398:	08006a68 	.word	0x08006a68
 800539c:	08006891 	.word	0x08006891
 80053a0:	08006918 	.word	0x08006918

080053a4 <__lshift>:
 80053a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a8:	460c      	mov	r4, r1
 80053aa:	6849      	ldr	r1, [r1, #4]
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80053b2:	68a3      	ldr	r3, [r4, #8]
 80053b4:	4607      	mov	r7, r0
 80053b6:	4691      	mov	r9, r2
 80053b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053bc:	f108 0601 	add.w	r6, r8, #1
 80053c0:	42b3      	cmp	r3, r6
 80053c2:	db0b      	blt.n	80053dc <__lshift+0x38>
 80053c4:	4638      	mov	r0, r7
 80053c6:	f7ff fddb 	bl	8004f80 <_Balloc>
 80053ca:	4605      	mov	r5, r0
 80053cc:	b948      	cbnz	r0, 80053e2 <__lshift+0x3e>
 80053ce:	4602      	mov	r2, r0
 80053d0:	4b28      	ldr	r3, [pc, #160]	; (8005474 <__lshift+0xd0>)
 80053d2:	4829      	ldr	r0, [pc, #164]	; (8005478 <__lshift+0xd4>)
 80053d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80053d8:	f000 fb76 	bl	8005ac8 <__assert_func>
 80053dc:	3101      	adds	r1, #1
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	e7ee      	b.n	80053c0 <__lshift+0x1c>
 80053e2:	2300      	movs	r3, #0
 80053e4:	f100 0114 	add.w	r1, r0, #20
 80053e8:	f100 0210 	add.w	r2, r0, #16
 80053ec:	4618      	mov	r0, r3
 80053ee:	4553      	cmp	r3, sl
 80053f0:	db33      	blt.n	800545a <__lshift+0xb6>
 80053f2:	6920      	ldr	r0, [r4, #16]
 80053f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053f8:	f104 0314 	add.w	r3, r4, #20
 80053fc:	f019 091f 	ands.w	r9, r9, #31
 8005400:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005404:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005408:	d02b      	beq.n	8005462 <__lshift+0xbe>
 800540a:	f1c9 0e20 	rsb	lr, r9, #32
 800540e:	468a      	mov	sl, r1
 8005410:	2200      	movs	r2, #0
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	fa00 f009 	lsl.w	r0, r0, r9
 8005418:	4302      	orrs	r2, r0
 800541a:	f84a 2b04 	str.w	r2, [sl], #4
 800541e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005422:	459c      	cmp	ip, r3
 8005424:	fa22 f20e 	lsr.w	r2, r2, lr
 8005428:	d8f3      	bhi.n	8005412 <__lshift+0x6e>
 800542a:	ebac 0304 	sub.w	r3, ip, r4
 800542e:	3b15      	subs	r3, #21
 8005430:	f023 0303 	bic.w	r3, r3, #3
 8005434:	3304      	adds	r3, #4
 8005436:	f104 0015 	add.w	r0, r4, #21
 800543a:	4584      	cmp	ip, r0
 800543c:	bf38      	it	cc
 800543e:	2304      	movcc	r3, #4
 8005440:	50ca      	str	r2, [r1, r3]
 8005442:	b10a      	cbz	r2, 8005448 <__lshift+0xa4>
 8005444:	f108 0602 	add.w	r6, r8, #2
 8005448:	3e01      	subs	r6, #1
 800544a:	4638      	mov	r0, r7
 800544c:	612e      	str	r6, [r5, #16]
 800544e:	4621      	mov	r1, r4
 8005450:	f7ff fdd6 	bl	8005000 <_Bfree>
 8005454:	4628      	mov	r0, r5
 8005456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545a:	f842 0f04 	str.w	r0, [r2, #4]!
 800545e:	3301      	adds	r3, #1
 8005460:	e7c5      	b.n	80053ee <__lshift+0x4a>
 8005462:	3904      	subs	r1, #4
 8005464:	f853 2b04 	ldr.w	r2, [r3], #4
 8005468:	f841 2f04 	str.w	r2, [r1, #4]!
 800546c:	459c      	cmp	ip, r3
 800546e:	d8f9      	bhi.n	8005464 <__lshift+0xc0>
 8005470:	e7ea      	b.n	8005448 <__lshift+0xa4>
 8005472:	bf00      	nop
 8005474:	08006907 	.word	0x08006907
 8005478:	08006918 	.word	0x08006918

0800547c <__mcmp>:
 800547c:	b530      	push	{r4, r5, lr}
 800547e:	6902      	ldr	r2, [r0, #16]
 8005480:	690c      	ldr	r4, [r1, #16]
 8005482:	1b12      	subs	r2, r2, r4
 8005484:	d10e      	bne.n	80054a4 <__mcmp+0x28>
 8005486:	f100 0314 	add.w	r3, r0, #20
 800548a:	3114      	adds	r1, #20
 800548c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005490:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005494:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005498:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800549c:	42a5      	cmp	r5, r4
 800549e:	d003      	beq.n	80054a8 <__mcmp+0x2c>
 80054a0:	d305      	bcc.n	80054ae <__mcmp+0x32>
 80054a2:	2201      	movs	r2, #1
 80054a4:	4610      	mov	r0, r2
 80054a6:	bd30      	pop	{r4, r5, pc}
 80054a8:	4283      	cmp	r3, r0
 80054aa:	d3f3      	bcc.n	8005494 <__mcmp+0x18>
 80054ac:	e7fa      	b.n	80054a4 <__mcmp+0x28>
 80054ae:	f04f 32ff 	mov.w	r2, #4294967295
 80054b2:	e7f7      	b.n	80054a4 <__mcmp+0x28>

080054b4 <__mdiff>:
 80054b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b8:	460c      	mov	r4, r1
 80054ba:	4606      	mov	r6, r0
 80054bc:	4611      	mov	r1, r2
 80054be:	4620      	mov	r0, r4
 80054c0:	4617      	mov	r7, r2
 80054c2:	f7ff ffdb 	bl	800547c <__mcmp>
 80054c6:	1e05      	subs	r5, r0, #0
 80054c8:	d110      	bne.n	80054ec <__mdiff+0x38>
 80054ca:	4629      	mov	r1, r5
 80054cc:	4630      	mov	r0, r6
 80054ce:	f7ff fd57 	bl	8004f80 <_Balloc>
 80054d2:	b930      	cbnz	r0, 80054e2 <__mdiff+0x2e>
 80054d4:	4b39      	ldr	r3, [pc, #228]	; (80055bc <__mdiff+0x108>)
 80054d6:	4602      	mov	r2, r0
 80054d8:	f240 2132 	movw	r1, #562	; 0x232
 80054dc:	4838      	ldr	r0, [pc, #224]	; (80055c0 <__mdiff+0x10c>)
 80054de:	f000 faf3 	bl	8005ac8 <__assert_func>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80054e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ec:	bfa4      	itt	ge
 80054ee:	463b      	movge	r3, r7
 80054f0:	4627      	movge	r7, r4
 80054f2:	4630      	mov	r0, r6
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	bfa6      	itte	ge
 80054f8:	461c      	movge	r4, r3
 80054fa:	2500      	movge	r5, #0
 80054fc:	2501      	movlt	r5, #1
 80054fe:	f7ff fd3f 	bl	8004f80 <_Balloc>
 8005502:	b920      	cbnz	r0, 800550e <__mdiff+0x5a>
 8005504:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <__mdiff+0x108>)
 8005506:	4602      	mov	r2, r0
 8005508:	f44f 7110 	mov.w	r1, #576	; 0x240
 800550c:	e7e6      	b.n	80054dc <__mdiff+0x28>
 800550e:	693e      	ldr	r6, [r7, #16]
 8005510:	60c5      	str	r5, [r0, #12]
 8005512:	6925      	ldr	r5, [r4, #16]
 8005514:	f107 0114 	add.w	r1, r7, #20
 8005518:	f104 0914 	add.w	r9, r4, #20
 800551c:	f100 0e14 	add.w	lr, r0, #20
 8005520:	f107 0210 	add.w	r2, r7, #16
 8005524:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005528:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800552c:	46f2      	mov	sl, lr
 800552e:	2700      	movs	r7, #0
 8005530:	f859 3b04 	ldr.w	r3, [r9], #4
 8005534:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005538:	fa1f f883 	uxth.w	r8, r3
 800553c:	fa17 f78b 	uxtah	r7, r7, fp
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	eba7 0808 	sub.w	r8, r7, r8
 8005546:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800554a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800554e:	fa1f f888 	uxth.w	r8, r8
 8005552:	141f      	asrs	r7, r3, #16
 8005554:	454d      	cmp	r5, r9
 8005556:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800555a:	f84a 3b04 	str.w	r3, [sl], #4
 800555e:	d8e7      	bhi.n	8005530 <__mdiff+0x7c>
 8005560:	1b2b      	subs	r3, r5, r4
 8005562:	3b15      	subs	r3, #21
 8005564:	f023 0303 	bic.w	r3, r3, #3
 8005568:	3304      	adds	r3, #4
 800556a:	3415      	adds	r4, #21
 800556c:	42a5      	cmp	r5, r4
 800556e:	bf38      	it	cc
 8005570:	2304      	movcc	r3, #4
 8005572:	4419      	add	r1, r3
 8005574:	4473      	add	r3, lr
 8005576:	469e      	mov	lr, r3
 8005578:	460d      	mov	r5, r1
 800557a:	4565      	cmp	r5, ip
 800557c:	d30e      	bcc.n	800559c <__mdiff+0xe8>
 800557e:	f10c 0203 	add.w	r2, ip, #3
 8005582:	1a52      	subs	r2, r2, r1
 8005584:	f022 0203 	bic.w	r2, r2, #3
 8005588:	3903      	subs	r1, #3
 800558a:	458c      	cmp	ip, r1
 800558c:	bf38      	it	cc
 800558e:	2200      	movcc	r2, #0
 8005590:	441a      	add	r2, r3
 8005592:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005596:	b17b      	cbz	r3, 80055b8 <__mdiff+0x104>
 8005598:	6106      	str	r6, [r0, #16]
 800559a:	e7a5      	b.n	80054e8 <__mdiff+0x34>
 800559c:	f855 8b04 	ldr.w	r8, [r5], #4
 80055a0:	fa17 f488 	uxtah	r4, r7, r8
 80055a4:	1422      	asrs	r2, r4, #16
 80055a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80055aa:	b2a4      	uxth	r4, r4
 80055ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80055b0:	f84e 4b04 	str.w	r4, [lr], #4
 80055b4:	1417      	asrs	r7, r2, #16
 80055b6:	e7e0      	b.n	800557a <__mdiff+0xc6>
 80055b8:	3e01      	subs	r6, #1
 80055ba:	e7ea      	b.n	8005592 <__mdiff+0xde>
 80055bc:	08006907 	.word	0x08006907
 80055c0:	08006918 	.word	0x08006918

080055c4 <__d2b>:
 80055c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055c8:	4689      	mov	r9, r1
 80055ca:	2101      	movs	r1, #1
 80055cc:	ec57 6b10 	vmov	r6, r7, d0
 80055d0:	4690      	mov	r8, r2
 80055d2:	f7ff fcd5 	bl	8004f80 <_Balloc>
 80055d6:	4604      	mov	r4, r0
 80055d8:	b930      	cbnz	r0, 80055e8 <__d2b+0x24>
 80055da:	4602      	mov	r2, r0
 80055dc:	4b25      	ldr	r3, [pc, #148]	; (8005674 <__d2b+0xb0>)
 80055de:	4826      	ldr	r0, [pc, #152]	; (8005678 <__d2b+0xb4>)
 80055e0:	f240 310a 	movw	r1, #778	; 0x30a
 80055e4:	f000 fa70 	bl	8005ac8 <__assert_func>
 80055e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80055ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80055f0:	bb35      	cbnz	r5, 8005640 <__d2b+0x7c>
 80055f2:	2e00      	cmp	r6, #0
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	d028      	beq.n	800564a <__d2b+0x86>
 80055f8:	4668      	mov	r0, sp
 80055fa:	9600      	str	r6, [sp, #0]
 80055fc:	f7ff fd8c 	bl	8005118 <__lo0bits>
 8005600:	9900      	ldr	r1, [sp, #0]
 8005602:	b300      	cbz	r0, 8005646 <__d2b+0x82>
 8005604:	9a01      	ldr	r2, [sp, #4]
 8005606:	f1c0 0320 	rsb	r3, r0, #32
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	430b      	orrs	r3, r1
 8005610:	40c2      	lsrs	r2, r0
 8005612:	6163      	str	r3, [r4, #20]
 8005614:	9201      	str	r2, [sp, #4]
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	61a3      	str	r3, [r4, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	bf14      	ite	ne
 800561e:	2202      	movne	r2, #2
 8005620:	2201      	moveq	r2, #1
 8005622:	6122      	str	r2, [r4, #16]
 8005624:	b1d5      	cbz	r5, 800565c <__d2b+0x98>
 8005626:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800562a:	4405      	add	r5, r0
 800562c:	f8c9 5000 	str.w	r5, [r9]
 8005630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005634:	f8c8 0000 	str.w	r0, [r8]
 8005638:	4620      	mov	r0, r4
 800563a:	b003      	add	sp, #12
 800563c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005644:	e7d5      	b.n	80055f2 <__d2b+0x2e>
 8005646:	6161      	str	r1, [r4, #20]
 8005648:	e7e5      	b.n	8005616 <__d2b+0x52>
 800564a:	a801      	add	r0, sp, #4
 800564c:	f7ff fd64 	bl	8005118 <__lo0bits>
 8005650:	9b01      	ldr	r3, [sp, #4]
 8005652:	6163      	str	r3, [r4, #20]
 8005654:	2201      	movs	r2, #1
 8005656:	6122      	str	r2, [r4, #16]
 8005658:	3020      	adds	r0, #32
 800565a:	e7e3      	b.n	8005624 <__d2b+0x60>
 800565c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005660:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005664:	f8c9 0000 	str.w	r0, [r9]
 8005668:	6918      	ldr	r0, [r3, #16]
 800566a:	f7ff fd35 	bl	80050d8 <__hi0bits>
 800566e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005672:	e7df      	b.n	8005634 <__d2b+0x70>
 8005674:	08006907 	.word	0x08006907
 8005678:	08006918 	.word	0x08006918

0800567c <_calloc_r>:
 800567c:	b513      	push	{r0, r1, r4, lr}
 800567e:	434a      	muls	r2, r1
 8005680:	4611      	mov	r1, r2
 8005682:	9201      	str	r2, [sp, #4]
 8005684:	f000 f85a 	bl	800573c <_malloc_r>
 8005688:	4604      	mov	r4, r0
 800568a:	b118      	cbz	r0, 8005694 <_calloc_r+0x18>
 800568c:	9a01      	ldr	r2, [sp, #4]
 800568e:	2100      	movs	r1, #0
 8005690:	f7fe f950 	bl	8003934 <memset>
 8005694:	4620      	mov	r0, r4
 8005696:	b002      	add	sp, #8
 8005698:	bd10      	pop	{r4, pc}
	...

0800569c <_free_r>:
 800569c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800569e:	2900      	cmp	r1, #0
 80056a0:	d048      	beq.n	8005734 <_free_r+0x98>
 80056a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056a6:	9001      	str	r0, [sp, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f1a1 0404 	sub.w	r4, r1, #4
 80056ae:	bfb8      	it	lt
 80056b0:	18e4      	addlt	r4, r4, r3
 80056b2:	f000 fa65 	bl	8005b80 <__malloc_lock>
 80056b6:	4a20      	ldr	r2, [pc, #128]	; (8005738 <_free_r+0x9c>)
 80056b8:	9801      	ldr	r0, [sp, #4]
 80056ba:	6813      	ldr	r3, [r2, #0]
 80056bc:	4615      	mov	r5, r2
 80056be:	b933      	cbnz	r3, 80056ce <_free_r+0x32>
 80056c0:	6063      	str	r3, [r4, #4]
 80056c2:	6014      	str	r4, [r2, #0]
 80056c4:	b003      	add	sp, #12
 80056c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056ca:	f000 ba5f 	b.w	8005b8c <__malloc_unlock>
 80056ce:	42a3      	cmp	r3, r4
 80056d0:	d90b      	bls.n	80056ea <_free_r+0x4e>
 80056d2:	6821      	ldr	r1, [r4, #0]
 80056d4:	1862      	adds	r2, r4, r1
 80056d6:	4293      	cmp	r3, r2
 80056d8:	bf04      	itt	eq
 80056da:	681a      	ldreq	r2, [r3, #0]
 80056dc:	685b      	ldreq	r3, [r3, #4]
 80056de:	6063      	str	r3, [r4, #4]
 80056e0:	bf04      	itt	eq
 80056e2:	1852      	addeq	r2, r2, r1
 80056e4:	6022      	streq	r2, [r4, #0]
 80056e6:	602c      	str	r4, [r5, #0]
 80056e8:	e7ec      	b.n	80056c4 <_free_r+0x28>
 80056ea:	461a      	mov	r2, r3
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	b10b      	cbz	r3, 80056f4 <_free_r+0x58>
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	d9fa      	bls.n	80056ea <_free_r+0x4e>
 80056f4:	6811      	ldr	r1, [r2, #0]
 80056f6:	1855      	adds	r5, r2, r1
 80056f8:	42a5      	cmp	r5, r4
 80056fa:	d10b      	bne.n	8005714 <_free_r+0x78>
 80056fc:	6824      	ldr	r4, [r4, #0]
 80056fe:	4421      	add	r1, r4
 8005700:	1854      	adds	r4, r2, r1
 8005702:	42a3      	cmp	r3, r4
 8005704:	6011      	str	r1, [r2, #0]
 8005706:	d1dd      	bne.n	80056c4 <_free_r+0x28>
 8005708:	681c      	ldr	r4, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	6053      	str	r3, [r2, #4]
 800570e:	4421      	add	r1, r4
 8005710:	6011      	str	r1, [r2, #0]
 8005712:	e7d7      	b.n	80056c4 <_free_r+0x28>
 8005714:	d902      	bls.n	800571c <_free_r+0x80>
 8005716:	230c      	movs	r3, #12
 8005718:	6003      	str	r3, [r0, #0]
 800571a:	e7d3      	b.n	80056c4 <_free_r+0x28>
 800571c:	6825      	ldr	r5, [r4, #0]
 800571e:	1961      	adds	r1, r4, r5
 8005720:	428b      	cmp	r3, r1
 8005722:	bf04      	itt	eq
 8005724:	6819      	ldreq	r1, [r3, #0]
 8005726:	685b      	ldreq	r3, [r3, #4]
 8005728:	6063      	str	r3, [r4, #4]
 800572a:	bf04      	itt	eq
 800572c:	1949      	addeq	r1, r1, r5
 800572e:	6021      	streq	r1, [r4, #0]
 8005730:	6054      	str	r4, [r2, #4]
 8005732:	e7c7      	b.n	80056c4 <_free_r+0x28>
 8005734:	b003      	add	sp, #12
 8005736:	bd30      	pop	{r4, r5, pc}
 8005738:	2000022c 	.word	0x2000022c

0800573c <_malloc_r>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	1ccd      	adds	r5, r1, #3
 8005740:	f025 0503 	bic.w	r5, r5, #3
 8005744:	3508      	adds	r5, #8
 8005746:	2d0c      	cmp	r5, #12
 8005748:	bf38      	it	cc
 800574a:	250c      	movcc	r5, #12
 800574c:	2d00      	cmp	r5, #0
 800574e:	4606      	mov	r6, r0
 8005750:	db01      	blt.n	8005756 <_malloc_r+0x1a>
 8005752:	42a9      	cmp	r1, r5
 8005754:	d903      	bls.n	800575e <_malloc_r+0x22>
 8005756:	230c      	movs	r3, #12
 8005758:	6033      	str	r3, [r6, #0]
 800575a:	2000      	movs	r0, #0
 800575c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800575e:	f000 fa0f 	bl	8005b80 <__malloc_lock>
 8005762:	4921      	ldr	r1, [pc, #132]	; (80057e8 <_malloc_r+0xac>)
 8005764:	680a      	ldr	r2, [r1, #0]
 8005766:	4614      	mov	r4, r2
 8005768:	b99c      	cbnz	r4, 8005792 <_malloc_r+0x56>
 800576a:	4f20      	ldr	r7, [pc, #128]	; (80057ec <_malloc_r+0xb0>)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	b923      	cbnz	r3, 800577a <_malloc_r+0x3e>
 8005770:	4621      	mov	r1, r4
 8005772:	4630      	mov	r0, r6
 8005774:	f000 f998 	bl	8005aa8 <_sbrk_r>
 8005778:	6038      	str	r0, [r7, #0]
 800577a:	4629      	mov	r1, r5
 800577c:	4630      	mov	r0, r6
 800577e:	f000 f993 	bl	8005aa8 <_sbrk_r>
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	d123      	bne.n	80057ce <_malloc_r+0x92>
 8005786:	230c      	movs	r3, #12
 8005788:	6033      	str	r3, [r6, #0]
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f9fe 	bl	8005b8c <__malloc_unlock>
 8005790:	e7e3      	b.n	800575a <_malloc_r+0x1e>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	1b5b      	subs	r3, r3, r5
 8005796:	d417      	bmi.n	80057c8 <_malloc_r+0x8c>
 8005798:	2b0b      	cmp	r3, #11
 800579a:	d903      	bls.n	80057a4 <_malloc_r+0x68>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	441c      	add	r4, r3
 80057a0:	6025      	str	r5, [r4, #0]
 80057a2:	e004      	b.n	80057ae <_malloc_r+0x72>
 80057a4:	6863      	ldr	r3, [r4, #4]
 80057a6:	42a2      	cmp	r2, r4
 80057a8:	bf0c      	ite	eq
 80057aa:	600b      	streq	r3, [r1, #0]
 80057ac:	6053      	strne	r3, [r2, #4]
 80057ae:	4630      	mov	r0, r6
 80057b0:	f000 f9ec 	bl	8005b8c <__malloc_unlock>
 80057b4:	f104 000b 	add.w	r0, r4, #11
 80057b8:	1d23      	adds	r3, r4, #4
 80057ba:	f020 0007 	bic.w	r0, r0, #7
 80057be:	1ac2      	subs	r2, r0, r3
 80057c0:	d0cc      	beq.n	800575c <_malloc_r+0x20>
 80057c2:	1a1b      	subs	r3, r3, r0
 80057c4:	50a3      	str	r3, [r4, r2]
 80057c6:	e7c9      	b.n	800575c <_malloc_r+0x20>
 80057c8:	4622      	mov	r2, r4
 80057ca:	6864      	ldr	r4, [r4, #4]
 80057cc:	e7cc      	b.n	8005768 <_malloc_r+0x2c>
 80057ce:	1cc4      	adds	r4, r0, #3
 80057d0:	f024 0403 	bic.w	r4, r4, #3
 80057d4:	42a0      	cmp	r0, r4
 80057d6:	d0e3      	beq.n	80057a0 <_malloc_r+0x64>
 80057d8:	1a21      	subs	r1, r4, r0
 80057da:	4630      	mov	r0, r6
 80057dc:	f000 f964 	bl	8005aa8 <_sbrk_r>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d1dd      	bne.n	80057a0 <_malloc_r+0x64>
 80057e4:	e7cf      	b.n	8005786 <_malloc_r+0x4a>
 80057e6:	bf00      	nop
 80057e8:	2000022c 	.word	0x2000022c
 80057ec:	20000230 	.word	0x20000230

080057f0 <__ssputs_r>:
 80057f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	688e      	ldr	r6, [r1, #8]
 80057f6:	429e      	cmp	r6, r3
 80057f8:	4682      	mov	sl, r0
 80057fa:	460c      	mov	r4, r1
 80057fc:	4690      	mov	r8, r2
 80057fe:	461f      	mov	r7, r3
 8005800:	d838      	bhi.n	8005874 <__ssputs_r+0x84>
 8005802:	898a      	ldrh	r2, [r1, #12]
 8005804:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005808:	d032      	beq.n	8005870 <__ssputs_r+0x80>
 800580a:	6825      	ldr	r5, [r4, #0]
 800580c:	6909      	ldr	r1, [r1, #16]
 800580e:	eba5 0901 	sub.w	r9, r5, r1
 8005812:	6965      	ldr	r5, [r4, #20]
 8005814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800581c:	3301      	adds	r3, #1
 800581e:	444b      	add	r3, r9
 8005820:	106d      	asrs	r5, r5, #1
 8005822:	429d      	cmp	r5, r3
 8005824:	bf38      	it	cc
 8005826:	461d      	movcc	r5, r3
 8005828:	0553      	lsls	r3, r2, #21
 800582a:	d531      	bpl.n	8005890 <__ssputs_r+0xa0>
 800582c:	4629      	mov	r1, r5
 800582e:	f7ff ff85 	bl	800573c <_malloc_r>
 8005832:	4606      	mov	r6, r0
 8005834:	b950      	cbnz	r0, 800584c <__ssputs_r+0x5c>
 8005836:	230c      	movs	r3, #12
 8005838:	f8ca 3000 	str.w	r3, [sl]
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584c:	6921      	ldr	r1, [r4, #16]
 800584e:	464a      	mov	r2, r9
 8005850:	f7fe f862 	bl	8003918 <memcpy>
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800585a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585e:	81a3      	strh	r3, [r4, #12]
 8005860:	6126      	str	r6, [r4, #16]
 8005862:	6165      	str	r5, [r4, #20]
 8005864:	444e      	add	r6, r9
 8005866:	eba5 0509 	sub.w	r5, r5, r9
 800586a:	6026      	str	r6, [r4, #0]
 800586c:	60a5      	str	r5, [r4, #8]
 800586e:	463e      	mov	r6, r7
 8005870:	42be      	cmp	r6, r7
 8005872:	d900      	bls.n	8005876 <__ssputs_r+0x86>
 8005874:	463e      	mov	r6, r7
 8005876:	4632      	mov	r2, r6
 8005878:	6820      	ldr	r0, [r4, #0]
 800587a:	4641      	mov	r1, r8
 800587c:	f000 f966 	bl	8005b4c <memmove>
 8005880:	68a3      	ldr	r3, [r4, #8]
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	1b9b      	subs	r3, r3, r6
 8005886:	4432      	add	r2, r6
 8005888:	60a3      	str	r3, [r4, #8]
 800588a:	6022      	str	r2, [r4, #0]
 800588c:	2000      	movs	r0, #0
 800588e:	e7db      	b.n	8005848 <__ssputs_r+0x58>
 8005890:	462a      	mov	r2, r5
 8005892:	f000 f981 	bl	8005b98 <_realloc_r>
 8005896:	4606      	mov	r6, r0
 8005898:	2800      	cmp	r0, #0
 800589a:	d1e1      	bne.n	8005860 <__ssputs_r+0x70>
 800589c:	6921      	ldr	r1, [r4, #16]
 800589e:	4650      	mov	r0, sl
 80058a0:	f7ff fefc 	bl	800569c <_free_r>
 80058a4:	e7c7      	b.n	8005836 <__ssputs_r+0x46>
	...

080058a8 <_svfiprintf_r>:
 80058a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ac:	4698      	mov	r8, r3
 80058ae:	898b      	ldrh	r3, [r1, #12]
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	b09d      	sub	sp, #116	; 0x74
 80058b4:	4607      	mov	r7, r0
 80058b6:	460d      	mov	r5, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	d50e      	bpl.n	80058da <_svfiprintf_r+0x32>
 80058bc:	690b      	ldr	r3, [r1, #16]
 80058be:	b963      	cbnz	r3, 80058da <_svfiprintf_r+0x32>
 80058c0:	2140      	movs	r1, #64	; 0x40
 80058c2:	f7ff ff3b 	bl	800573c <_malloc_r>
 80058c6:	6028      	str	r0, [r5, #0]
 80058c8:	6128      	str	r0, [r5, #16]
 80058ca:	b920      	cbnz	r0, 80058d6 <_svfiprintf_r+0x2e>
 80058cc:	230c      	movs	r3, #12
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	e0d1      	b.n	8005a7a <_svfiprintf_r+0x1d2>
 80058d6:	2340      	movs	r3, #64	; 0x40
 80058d8:	616b      	str	r3, [r5, #20]
 80058da:	2300      	movs	r3, #0
 80058dc:	9309      	str	r3, [sp, #36]	; 0x24
 80058de:	2320      	movs	r3, #32
 80058e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058e8:	2330      	movs	r3, #48	; 0x30
 80058ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a94 <_svfiprintf_r+0x1ec>
 80058ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058f2:	f04f 0901 	mov.w	r9, #1
 80058f6:	4623      	mov	r3, r4
 80058f8:	469a      	mov	sl, r3
 80058fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058fe:	b10a      	cbz	r2, 8005904 <_svfiprintf_r+0x5c>
 8005900:	2a25      	cmp	r2, #37	; 0x25
 8005902:	d1f9      	bne.n	80058f8 <_svfiprintf_r+0x50>
 8005904:	ebba 0b04 	subs.w	fp, sl, r4
 8005908:	d00b      	beq.n	8005922 <_svfiprintf_r+0x7a>
 800590a:	465b      	mov	r3, fp
 800590c:	4622      	mov	r2, r4
 800590e:	4629      	mov	r1, r5
 8005910:	4638      	mov	r0, r7
 8005912:	f7ff ff6d 	bl	80057f0 <__ssputs_r>
 8005916:	3001      	adds	r0, #1
 8005918:	f000 80aa 	beq.w	8005a70 <_svfiprintf_r+0x1c8>
 800591c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800591e:	445a      	add	r2, fp
 8005920:	9209      	str	r2, [sp, #36]	; 0x24
 8005922:	f89a 3000 	ldrb.w	r3, [sl]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 80a2 	beq.w	8005a70 <_svfiprintf_r+0x1c8>
 800592c:	2300      	movs	r3, #0
 800592e:	f04f 32ff 	mov.w	r2, #4294967295
 8005932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005936:	f10a 0a01 	add.w	sl, sl, #1
 800593a:	9304      	str	r3, [sp, #16]
 800593c:	9307      	str	r3, [sp, #28]
 800593e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005942:	931a      	str	r3, [sp, #104]	; 0x68
 8005944:	4654      	mov	r4, sl
 8005946:	2205      	movs	r2, #5
 8005948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800594c:	4851      	ldr	r0, [pc, #324]	; (8005a94 <_svfiprintf_r+0x1ec>)
 800594e:	f7fa fc47 	bl	80001e0 <memchr>
 8005952:	9a04      	ldr	r2, [sp, #16]
 8005954:	b9d8      	cbnz	r0, 800598e <_svfiprintf_r+0xe6>
 8005956:	06d0      	lsls	r0, r2, #27
 8005958:	bf44      	itt	mi
 800595a:	2320      	movmi	r3, #32
 800595c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005960:	0711      	lsls	r1, r2, #28
 8005962:	bf44      	itt	mi
 8005964:	232b      	movmi	r3, #43	; 0x2b
 8005966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800596a:	f89a 3000 	ldrb.w	r3, [sl]
 800596e:	2b2a      	cmp	r3, #42	; 0x2a
 8005970:	d015      	beq.n	800599e <_svfiprintf_r+0xf6>
 8005972:	9a07      	ldr	r2, [sp, #28]
 8005974:	4654      	mov	r4, sl
 8005976:	2000      	movs	r0, #0
 8005978:	f04f 0c0a 	mov.w	ip, #10
 800597c:	4621      	mov	r1, r4
 800597e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005982:	3b30      	subs	r3, #48	; 0x30
 8005984:	2b09      	cmp	r3, #9
 8005986:	d94e      	bls.n	8005a26 <_svfiprintf_r+0x17e>
 8005988:	b1b0      	cbz	r0, 80059b8 <_svfiprintf_r+0x110>
 800598a:	9207      	str	r2, [sp, #28]
 800598c:	e014      	b.n	80059b8 <_svfiprintf_r+0x110>
 800598e:	eba0 0308 	sub.w	r3, r0, r8
 8005992:	fa09 f303 	lsl.w	r3, r9, r3
 8005996:	4313      	orrs	r3, r2
 8005998:	9304      	str	r3, [sp, #16]
 800599a:	46a2      	mov	sl, r4
 800599c:	e7d2      	b.n	8005944 <_svfiprintf_r+0x9c>
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	1d19      	adds	r1, r3, #4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	9103      	str	r1, [sp, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bfbb      	ittet	lt
 80059aa:	425b      	neglt	r3, r3
 80059ac:	f042 0202 	orrlt.w	r2, r2, #2
 80059b0:	9307      	strge	r3, [sp, #28]
 80059b2:	9307      	strlt	r3, [sp, #28]
 80059b4:	bfb8      	it	lt
 80059b6:	9204      	strlt	r2, [sp, #16]
 80059b8:	7823      	ldrb	r3, [r4, #0]
 80059ba:	2b2e      	cmp	r3, #46	; 0x2e
 80059bc:	d10c      	bne.n	80059d8 <_svfiprintf_r+0x130>
 80059be:	7863      	ldrb	r3, [r4, #1]
 80059c0:	2b2a      	cmp	r3, #42	; 0x2a
 80059c2:	d135      	bne.n	8005a30 <_svfiprintf_r+0x188>
 80059c4:	9b03      	ldr	r3, [sp, #12]
 80059c6:	1d1a      	adds	r2, r3, #4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	9203      	str	r2, [sp, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	bfb8      	it	lt
 80059d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80059d4:	3402      	adds	r4, #2
 80059d6:	9305      	str	r3, [sp, #20]
 80059d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005aa4 <_svfiprintf_r+0x1fc>
 80059dc:	7821      	ldrb	r1, [r4, #0]
 80059de:	2203      	movs	r2, #3
 80059e0:	4650      	mov	r0, sl
 80059e2:	f7fa fbfd 	bl	80001e0 <memchr>
 80059e6:	b140      	cbz	r0, 80059fa <_svfiprintf_r+0x152>
 80059e8:	2340      	movs	r3, #64	; 0x40
 80059ea:	eba0 000a 	sub.w	r0, r0, sl
 80059ee:	fa03 f000 	lsl.w	r0, r3, r0
 80059f2:	9b04      	ldr	r3, [sp, #16]
 80059f4:	4303      	orrs	r3, r0
 80059f6:	3401      	adds	r4, #1
 80059f8:	9304      	str	r3, [sp, #16]
 80059fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059fe:	4826      	ldr	r0, [pc, #152]	; (8005a98 <_svfiprintf_r+0x1f0>)
 8005a00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a04:	2206      	movs	r2, #6
 8005a06:	f7fa fbeb 	bl	80001e0 <memchr>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d038      	beq.n	8005a80 <_svfiprintf_r+0x1d8>
 8005a0e:	4b23      	ldr	r3, [pc, #140]	; (8005a9c <_svfiprintf_r+0x1f4>)
 8005a10:	bb1b      	cbnz	r3, 8005a5a <_svfiprintf_r+0x1b2>
 8005a12:	9b03      	ldr	r3, [sp, #12]
 8005a14:	3307      	adds	r3, #7
 8005a16:	f023 0307 	bic.w	r3, r3, #7
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	9303      	str	r3, [sp, #12]
 8005a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a20:	4433      	add	r3, r6
 8005a22:	9309      	str	r3, [sp, #36]	; 0x24
 8005a24:	e767      	b.n	80058f6 <_svfiprintf_r+0x4e>
 8005a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	2001      	movs	r0, #1
 8005a2e:	e7a5      	b.n	800597c <_svfiprintf_r+0xd4>
 8005a30:	2300      	movs	r3, #0
 8005a32:	3401      	adds	r4, #1
 8005a34:	9305      	str	r3, [sp, #20]
 8005a36:	4619      	mov	r1, r3
 8005a38:	f04f 0c0a 	mov.w	ip, #10
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a42:	3a30      	subs	r2, #48	; 0x30
 8005a44:	2a09      	cmp	r2, #9
 8005a46:	d903      	bls.n	8005a50 <_svfiprintf_r+0x1a8>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0c5      	beq.n	80059d8 <_svfiprintf_r+0x130>
 8005a4c:	9105      	str	r1, [sp, #20]
 8005a4e:	e7c3      	b.n	80059d8 <_svfiprintf_r+0x130>
 8005a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a54:	4604      	mov	r4, r0
 8005a56:	2301      	movs	r3, #1
 8005a58:	e7f0      	b.n	8005a3c <_svfiprintf_r+0x194>
 8005a5a:	ab03      	add	r3, sp, #12
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	462a      	mov	r2, r5
 8005a60:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <_svfiprintf_r+0x1f8>)
 8005a62:	a904      	add	r1, sp, #16
 8005a64:	4638      	mov	r0, r7
 8005a66:	f7fe f80d 	bl	8003a84 <_printf_float>
 8005a6a:	1c42      	adds	r2, r0, #1
 8005a6c:	4606      	mov	r6, r0
 8005a6e:	d1d6      	bne.n	8005a1e <_svfiprintf_r+0x176>
 8005a70:	89ab      	ldrh	r3, [r5, #12]
 8005a72:	065b      	lsls	r3, r3, #25
 8005a74:	f53f af2c 	bmi.w	80058d0 <_svfiprintf_r+0x28>
 8005a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a7a:	b01d      	add	sp, #116	; 0x74
 8005a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	462a      	mov	r2, r5
 8005a86:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <_svfiprintf_r+0x1f8>)
 8005a88:	a904      	add	r1, sp, #16
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f7fe fa9e 	bl	8003fcc <_printf_i>
 8005a90:	e7eb      	b.n	8005a6a <_svfiprintf_r+0x1c2>
 8005a92:	bf00      	nop
 8005a94:	08006a74 	.word	0x08006a74
 8005a98:	08006a7e 	.word	0x08006a7e
 8005a9c:	08003a85 	.word	0x08003a85
 8005aa0:	080057f1 	.word	0x080057f1
 8005aa4:	08006a7a 	.word	0x08006a7a

08005aa8 <_sbrk_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d06      	ldr	r5, [pc, #24]	; (8005ac4 <_sbrk_r+0x1c>)
 8005aac:	2300      	movs	r3, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	f7fb fba2 	bl	80011fc <_sbrk>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_sbrk_r+0x1a>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_sbrk_r+0x1a>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	200010b0 	.word	0x200010b0

08005ac8 <__assert_func>:
 8005ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005aca:	4614      	mov	r4, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <__assert_func+0x2c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4605      	mov	r5, r0
 8005ad4:	68d8      	ldr	r0, [r3, #12]
 8005ad6:	b14c      	cbz	r4, 8005aec <__assert_func+0x24>
 8005ad8:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <__assert_func+0x30>)
 8005ada:	9100      	str	r1, [sp, #0]
 8005adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ae0:	4906      	ldr	r1, [pc, #24]	; (8005afc <__assert_func+0x34>)
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	f000 f80e 	bl	8005b04 <fiprintf>
 8005ae8:	f000 faa4 	bl	8006034 <abort>
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <__assert_func+0x38>)
 8005aee:	461c      	mov	r4, r3
 8005af0:	e7f3      	b.n	8005ada <__assert_func+0x12>
 8005af2:	bf00      	nop
 8005af4:	20000018 	.word	0x20000018
 8005af8:	08006a85 	.word	0x08006a85
 8005afc:	08006a92 	.word	0x08006a92
 8005b00:	08006ac0 	.word	0x08006ac0

08005b04 <fiprintf>:
 8005b04:	b40e      	push	{r1, r2, r3}
 8005b06:	b503      	push	{r0, r1, lr}
 8005b08:	4601      	mov	r1, r0
 8005b0a:	ab03      	add	r3, sp, #12
 8005b0c:	4805      	ldr	r0, [pc, #20]	; (8005b24 <fiprintf+0x20>)
 8005b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b12:	6800      	ldr	r0, [r0, #0]
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	f000 f88f 	bl	8005c38 <_vfiprintf_r>
 8005b1a:	b002      	add	sp, #8
 8005b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b20:	b003      	add	sp, #12
 8005b22:	4770      	bx	lr
 8005b24:	20000018 	.word	0x20000018

08005b28 <__ascii_mbtowc>:
 8005b28:	b082      	sub	sp, #8
 8005b2a:	b901      	cbnz	r1, 8005b2e <__ascii_mbtowc+0x6>
 8005b2c:	a901      	add	r1, sp, #4
 8005b2e:	b142      	cbz	r2, 8005b42 <__ascii_mbtowc+0x1a>
 8005b30:	b14b      	cbz	r3, 8005b46 <__ascii_mbtowc+0x1e>
 8005b32:	7813      	ldrb	r3, [r2, #0]
 8005b34:	600b      	str	r3, [r1, #0]
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	1e10      	subs	r0, r2, #0
 8005b3a:	bf18      	it	ne
 8005b3c:	2001      	movne	r0, #1
 8005b3e:	b002      	add	sp, #8
 8005b40:	4770      	bx	lr
 8005b42:	4610      	mov	r0, r2
 8005b44:	e7fb      	b.n	8005b3e <__ascii_mbtowc+0x16>
 8005b46:	f06f 0001 	mvn.w	r0, #1
 8005b4a:	e7f8      	b.n	8005b3e <__ascii_mbtowc+0x16>

08005b4c <memmove>:
 8005b4c:	4288      	cmp	r0, r1
 8005b4e:	b510      	push	{r4, lr}
 8005b50:	eb01 0402 	add.w	r4, r1, r2
 8005b54:	d902      	bls.n	8005b5c <memmove+0x10>
 8005b56:	4284      	cmp	r4, r0
 8005b58:	4623      	mov	r3, r4
 8005b5a:	d807      	bhi.n	8005b6c <memmove+0x20>
 8005b5c:	1e43      	subs	r3, r0, #1
 8005b5e:	42a1      	cmp	r1, r4
 8005b60:	d008      	beq.n	8005b74 <memmove+0x28>
 8005b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b6a:	e7f8      	b.n	8005b5e <memmove+0x12>
 8005b6c:	4402      	add	r2, r0
 8005b6e:	4601      	mov	r1, r0
 8005b70:	428a      	cmp	r2, r1
 8005b72:	d100      	bne.n	8005b76 <memmove+0x2a>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b7e:	e7f7      	b.n	8005b70 <memmove+0x24>

08005b80 <__malloc_lock>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__malloc_lock+0x8>)
 8005b82:	f000 bc17 	b.w	80063b4 <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	200010b8 	.word	0x200010b8

08005b8c <__malloc_unlock>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__malloc_unlock+0x8>)
 8005b8e:	f000 bc12 	b.w	80063b6 <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	200010b8 	.word	0x200010b8

08005b98 <_realloc_r>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	4607      	mov	r7, r0
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	460e      	mov	r6, r1
 8005ba0:	b921      	cbnz	r1, 8005bac <_realloc_r+0x14>
 8005ba2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	f7ff bdc8 	b.w	800573c <_malloc_r>
 8005bac:	b922      	cbnz	r2, 8005bb8 <_realloc_r+0x20>
 8005bae:	f7ff fd75 	bl	800569c <_free_r>
 8005bb2:	4625      	mov	r5, r4
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bb8:	f000 fc62 	bl	8006480 <_malloc_usable_size_r>
 8005bbc:	42a0      	cmp	r0, r4
 8005bbe:	d20f      	bcs.n	8005be0 <_realloc_r+0x48>
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	f7ff fdba 	bl	800573c <_malloc_r>
 8005bc8:	4605      	mov	r5, r0
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d0f2      	beq.n	8005bb4 <_realloc_r+0x1c>
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	f7fd fea1 	bl	8003918 <memcpy>
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f7ff fd5f 	bl	800569c <_free_r>
 8005bde:	e7e9      	b.n	8005bb4 <_realloc_r+0x1c>
 8005be0:	4635      	mov	r5, r6
 8005be2:	e7e7      	b.n	8005bb4 <_realloc_r+0x1c>

08005be4 <__sfputc_r>:
 8005be4:	6893      	ldr	r3, [r2, #8]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	b410      	push	{r4}
 8005bec:	6093      	str	r3, [r2, #8]
 8005bee:	da08      	bge.n	8005c02 <__sfputc_r+0x1e>
 8005bf0:	6994      	ldr	r4, [r2, #24]
 8005bf2:	42a3      	cmp	r3, r4
 8005bf4:	db01      	blt.n	8005bfa <__sfputc_r+0x16>
 8005bf6:	290a      	cmp	r1, #10
 8005bf8:	d103      	bne.n	8005c02 <__sfputc_r+0x1e>
 8005bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bfe:	f000 b94b 	b.w	8005e98 <__swbuf_r>
 8005c02:	6813      	ldr	r3, [r2, #0]
 8005c04:	1c58      	adds	r0, r3, #1
 8005c06:	6010      	str	r0, [r2, #0]
 8005c08:	7019      	strb	r1, [r3, #0]
 8005c0a:	4608      	mov	r0, r1
 8005c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <__sfputs_r>:
 8005c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c14:	4606      	mov	r6, r0
 8005c16:	460f      	mov	r7, r1
 8005c18:	4614      	mov	r4, r2
 8005c1a:	18d5      	adds	r5, r2, r3
 8005c1c:	42ac      	cmp	r4, r5
 8005c1e:	d101      	bne.n	8005c24 <__sfputs_r+0x12>
 8005c20:	2000      	movs	r0, #0
 8005c22:	e007      	b.n	8005c34 <__sfputs_r+0x22>
 8005c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c28:	463a      	mov	r2, r7
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f7ff ffda 	bl	8005be4 <__sfputc_r>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d1f3      	bne.n	8005c1c <__sfputs_r+0xa>
 8005c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c38 <_vfiprintf_r>:
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	460d      	mov	r5, r1
 8005c3e:	b09d      	sub	sp, #116	; 0x74
 8005c40:	4614      	mov	r4, r2
 8005c42:	4698      	mov	r8, r3
 8005c44:	4606      	mov	r6, r0
 8005c46:	b118      	cbz	r0, 8005c50 <_vfiprintf_r+0x18>
 8005c48:	6983      	ldr	r3, [r0, #24]
 8005c4a:	b90b      	cbnz	r3, 8005c50 <_vfiprintf_r+0x18>
 8005c4c:	f000 fb14 	bl	8006278 <__sinit>
 8005c50:	4b89      	ldr	r3, [pc, #548]	; (8005e78 <_vfiprintf_r+0x240>)
 8005c52:	429d      	cmp	r5, r3
 8005c54:	d11b      	bne.n	8005c8e <_vfiprintf_r+0x56>
 8005c56:	6875      	ldr	r5, [r6, #4]
 8005c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c5a:	07d9      	lsls	r1, r3, #31
 8005c5c:	d405      	bmi.n	8005c6a <_vfiprintf_r+0x32>
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	059a      	lsls	r2, r3, #22
 8005c62:	d402      	bmi.n	8005c6a <_vfiprintf_r+0x32>
 8005c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c66:	f000 fba5 	bl	80063b4 <__retarget_lock_acquire_recursive>
 8005c6a:	89ab      	ldrh	r3, [r5, #12]
 8005c6c:	071b      	lsls	r3, r3, #28
 8005c6e:	d501      	bpl.n	8005c74 <_vfiprintf_r+0x3c>
 8005c70:	692b      	ldr	r3, [r5, #16]
 8005c72:	b9eb      	cbnz	r3, 8005cb0 <_vfiprintf_r+0x78>
 8005c74:	4629      	mov	r1, r5
 8005c76:	4630      	mov	r0, r6
 8005c78:	f000 f96e 	bl	8005f58 <__swsetup_r>
 8005c7c:	b1c0      	cbz	r0, 8005cb0 <_vfiprintf_r+0x78>
 8005c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c80:	07dc      	lsls	r4, r3, #31
 8005c82:	d50e      	bpl.n	8005ca2 <_vfiprintf_r+0x6a>
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	b01d      	add	sp, #116	; 0x74
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	4b7b      	ldr	r3, [pc, #492]	; (8005e7c <_vfiprintf_r+0x244>)
 8005c90:	429d      	cmp	r5, r3
 8005c92:	d101      	bne.n	8005c98 <_vfiprintf_r+0x60>
 8005c94:	68b5      	ldr	r5, [r6, #8]
 8005c96:	e7df      	b.n	8005c58 <_vfiprintf_r+0x20>
 8005c98:	4b79      	ldr	r3, [pc, #484]	; (8005e80 <_vfiprintf_r+0x248>)
 8005c9a:	429d      	cmp	r5, r3
 8005c9c:	bf08      	it	eq
 8005c9e:	68f5      	ldreq	r5, [r6, #12]
 8005ca0:	e7da      	b.n	8005c58 <_vfiprintf_r+0x20>
 8005ca2:	89ab      	ldrh	r3, [r5, #12]
 8005ca4:	0598      	lsls	r0, r3, #22
 8005ca6:	d4ed      	bmi.n	8005c84 <_vfiprintf_r+0x4c>
 8005ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005caa:	f000 fb84 	bl	80063b6 <__retarget_lock_release_recursive>
 8005cae:	e7e9      	b.n	8005c84 <_vfiprintf_r+0x4c>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cbe:	2330      	movs	r3, #48	; 0x30
 8005cc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e84 <_vfiprintf_r+0x24c>
 8005cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cc8:	f04f 0901 	mov.w	r9, #1
 8005ccc:	4623      	mov	r3, r4
 8005cce:	469a      	mov	sl, r3
 8005cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cd4:	b10a      	cbz	r2, 8005cda <_vfiprintf_r+0xa2>
 8005cd6:	2a25      	cmp	r2, #37	; 0x25
 8005cd8:	d1f9      	bne.n	8005cce <_vfiprintf_r+0x96>
 8005cda:	ebba 0b04 	subs.w	fp, sl, r4
 8005cde:	d00b      	beq.n	8005cf8 <_vfiprintf_r+0xc0>
 8005ce0:	465b      	mov	r3, fp
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7ff ff93 	bl	8005c12 <__sfputs_r>
 8005cec:	3001      	adds	r0, #1
 8005cee:	f000 80aa 	beq.w	8005e46 <_vfiprintf_r+0x20e>
 8005cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf4:	445a      	add	r2, fp
 8005cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8005cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80a2 	beq.w	8005e46 <_vfiprintf_r+0x20e>
 8005d02:	2300      	movs	r3, #0
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295
 8005d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d0c:	f10a 0a01 	add.w	sl, sl, #1
 8005d10:	9304      	str	r3, [sp, #16]
 8005d12:	9307      	str	r3, [sp, #28]
 8005d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d18:	931a      	str	r3, [sp, #104]	; 0x68
 8005d1a:	4654      	mov	r4, sl
 8005d1c:	2205      	movs	r2, #5
 8005d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d22:	4858      	ldr	r0, [pc, #352]	; (8005e84 <_vfiprintf_r+0x24c>)
 8005d24:	f7fa fa5c 	bl	80001e0 <memchr>
 8005d28:	9a04      	ldr	r2, [sp, #16]
 8005d2a:	b9d8      	cbnz	r0, 8005d64 <_vfiprintf_r+0x12c>
 8005d2c:	06d1      	lsls	r1, r2, #27
 8005d2e:	bf44      	itt	mi
 8005d30:	2320      	movmi	r3, #32
 8005d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d36:	0713      	lsls	r3, r2, #28
 8005d38:	bf44      	itt	mi
 8005d3a:	232b      	movmi	r3, #43	; 0x2b
 8005d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d40:	f89a 3000 	ldrb.w	r3, [sl]
 8005d44:	2b2a      	cmp	r3, #42	; 0x2a
 8005d46:	d015      	beq.n	8005d74 <_vfiprintf_r+0x13c>
 8005d48:	9a07      	ldr	r2, [sp, #28]
 8005d4a:	4654      	mov	r4, sl
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	f04f 0c0a 	mov.w	ip, #10
 8005d52:	4621      	mov	r1, r4
 8005d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d58:	3b30      	subs	r3, #48	; 0x30
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	d94e      	bls.n	8005dfc <_vfiprintf_r+0x1c4>
 8005d5e:	b1b0      	cbz	r0, 8005d8e <_vfiprintf_r+0x156>
 8005d60:	9207      	str	r2, [sp, #28]
 8005d62:	e014      	b.n	8005d8e <_vfiprintf_r+0x156>
 8005d64:	eba0 0308 	sub.w	r3, r0, r8
 8005d68:	fa09 f303 	lsl.w	r3, r9, r3
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	9304      	str	r3, [sp, #16]
 8005d70:	46a2      	mov	sl, r4
 8005d72:	e7d2      	b.n	8005d1a <_vfiprintf_r+0xe2>
 8005d74:	9b03      	ldr	r3, [sp, #12]
 8005d76:	1d19      	adds	r1, r3, #4
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	9103      	str	r1, [sp, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bfbb      	ittet	lt
 8005d80:	425b      	neglt	r3, r3
 8005d82:	f042 0202 	orrlt.w	r2, r2, #2
 8005d86:	9307      	strge	r3, [sp, #28]
 8005d88:	9307      	strlt	r3, [sp, #28]
 8005d8a:	bfb8      	it	lt
 8005d8c:	9204      	strlt	r2, [sp, #16]
 8005d8e:	7823      	ldrb	r3, [r4, #0]
 8005d90:	2b2e      	cmp	r3, #46	; 0x2e
 8005d92:	d10c      	bne.n	8005dae <_vfiprintf_r+0x176>
 8005d94:	7863      	ldrb	r3, [r4, #1]
 8005d96:	2b2a      	cmp	r3, #42	; 0x2a
 8005d98:	d135      	bne.n	8005e06 <_vfiprintf_r+0x1ce>
 8005d9a:	9b03      	ldr	r3, [sp, #12]
 8005d9c:	1d1a      	adds	r2, r3, #4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	9203      	str	r2, [sp, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	bfb8      	it	lt
 8005da6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005daa:	3402      	adds	r4, #2
 8005dac:	9305      	str	r3, [sp, #20]
 8005dae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e94 <_vfiprintf_r+0x25c>
 8005db2:	7821      	ldrb	r1, [r4, #0]
 8005db4:	2203      	movs	r2, #3
 8005db6:	4650      	mov	r0, sl
 8005db8:	f7fa fa12 	bl	80001e0 <memchr>
 8005dbc:	b140      	cbz	r0, 8005dd0 <_vfiprintf_r+0x198>
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	eba0 000a 	sub.w	r0, r0, sl
 8005dc4:	fa03 f000 	lsl.w	r0, r3, r0
 8005dc8:	9b04      	ldr	r3, [sp, #16]
 8005dca:	4303      	orrs	r3, r0
 8005dcc:	3401      	adds	r4, #1
 8005dce:	9304      	str	r3, [sp, #16]
 8005dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd4:	482c      	ldr	r0, [pc, #176]	; (8005e88 <_vfiprintf_r+0x250>)
 8005dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dda:	2206      	movs	r2, #6
 8005ddc:	f7fa fa00 	bl	80001e0 <memchr>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	d03f      	beq.n	8005e64 <_vfiprintf_r+0x22c>
 8005de4:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <_vfiprintf_r+0x254>)
 8005de6:	bb1b      	cbnz	r3, 8005e30 <_vfiprintf_r+0x1f8>
 8005de8:	9b03      	ldr	r3, [sp, #12]
 8005dea:	3307      	adds	r3, #7
 8005dec:	f023 0307 	bic.w	r3, r3, #7
 8005df0:	3308      	adds	r3, #8
 8005df2:	9303      	str	r3, [sp, #12]
 8005df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df6:	443b      	add	r3, r7
 8005df8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dfa:	e767      	b.n	8005ccc <_vfiprintf_r+0x94>
 8005dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e00:	460c      	mov	r4, r1
 8005e02:	2001      	movs	r0, #1
 8005e04:	e7a5      	b.n	8005d52 <_vfiprintf_r+0x11a>
 8005e06:	2300      	movs	r3, #0
 8005e08:	3401      	adds	r4, #1
 8005e0a:	9305      	str	r3, [sp, #20]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	f04f 0c0a 	mov.w	ip, #10
 8005e12:	4620      	mov	r0, r4
 8005e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e18:	3a30      	subs	r2, #48	; 0x30
 8005e1a:	2a09      	cmp	r2, #9
 8005e1c:	d903      	bls.n	8005e26 <_vfiprintf_r+0x1ee>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0c5      	beq.n	8005dae <_vfiprintf_r+0x176>
 8005e22:	9105      	str	r1, [sp, #20]
 8005e24:	e7c3      	b.n	8005dae <_vfiprintf_r+0x176>
 8005e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e7f0      	b.n	8005e12 <_vfiprintf_r+0x1da>
 8005e30:	ab03      	add	r3, sp, #12
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	462a      	mov	r2, r5
 8005e36:	4b16      	ldr	r3, [pc, #88]	; (8005e90 <_vfiprintf_r+0x258>)
 8005e38:	a904      	add	r1, sp, #16
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f7fd fe22 	bl	8003a84 <_printf_float>
 8005e40:	4607      	mov	r7, r0
 8005e42:	1c78      	adds	r0, r7, #1
 8005e44:	d1d6      	bne.n	8005df4 <_vfiprintf_r+0x1bc>
 8005e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e48:	07d9      	lsls	r1, r3, #31
 8005e4a:	d405      	bmi.n	8005e58 <_vfiprintf_r+0x220>
 8005e4c:	89ab      	ldrh	r3, [r5, #12]
 8005e4e:	059a      	lsls	r2, r3, #22
 8005e50:	d402      	bmi.n	8005e58 <_vfiprintf_r+0x220>
 8005e52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e54:	f000 faaf 	bl	80063b6 <__retarget_lock_release_recursive>
 8005e58:	89ab      	ldrh	r3, [r5, #12]
 8005e5a:	065b      	lsls	r3, r3, #25
 8005e5c:	f53f af12 	bmi.w	8005c84 <_vfiprintf_r+0x4c>
 8005e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e62:	e711      	b.n	8005c88 <_vfiprintf_r+0x50>
 8005e64:	ab03      	add	r3, sp, #12
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	462a      	mov	r2, r5
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <_vfiprintf_r+0x258>)
 8005e6c:	a904      	add	r1, sp, #16
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f7fe f8ac 	bl	8003fcc <_printf_i>
 8005e74:	e7e4      	b.n	8005e40 <_vfiprintf_r+0x208>
 8005e76:	bf00      	nop
 8005e78:	08006bec 	.word	0x08006bec
 8005e7c:	08006c0c 	.word	0x08006c0c
 8005e80:	08006bcc 	.word	0x08006bcc
 8005e84:	08006a74 	.word	0x08006a74
 8005e88:	08006a7e 	.word	0x08006a7e
 8005e8c:	08003a85 	.word	0x08003a85
 8005e90:	08005c13 	.word	0x08005c13
 8005e94:	08006a7a 	.word	0x08006a7a

08005e98 <__swbuf_r>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	460e      	mov	r6, r1
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	b118      	cbz	r0, 8005eaa <__swbuf_r+0x12>
 8005ea2:	6983      	ldr	r3, [r0, #24]
 8005ea4:	b90b      	cbnz	r3, 8005eaa <__swbuf_r+0x12>
 8005ea6:	f000 f9e7 	bl	8006278 <__sinit>
 8005eaa:	4b21      	ldr	r3, [pc, #132]	; (8005f30 <__swbuf_r+0x98>)
 8005eac:	429c      	cmp	r4, r3
 8005eae:	d12b      	bne.n	8005f08 <__swbuf_r+0x70>
 8005eb0:	686c      	ldr	r4, [r5, #4]
 8005eb2:	69a3      	ldr	r3, [r4, #24]
 8005eb4:	60a3      	str	r3, [r4, #8]
 8005eb6:	89a3      	ldrh	r3, [r4, #12]
 8005eb8:	071a      	lsls	r2, r3, #28
 8005eba:	d52f      	bpl.n	8005f1c <__swbuf_r+0x84>
 8005ebc:	6923      	ldr	r3, [r4, #16]
 8005ebe:	b36b      	cbz	r3, 8005f1c <__swbuf_r+0x84>
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	6820      	ldr	r0, [r4, #0]
 8005ec4:	1ac0      	subs	r0, r0, r3
 8005ec6:	6963      	ldr	r3, [r4, #20]
 8005ec8:	b2f6      	uxtb	r6, r6
 8005eca:	4283      	cmp	r3, r0
 8005ecc:	4637      	mov	r7, r6
 8005ece:	dc04      	bgt.n	8005eda <__swbuf_r+0x42>
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 f93c 	bl	8006150 <_fflush_r>
 8005ed8:	bb30      	cbnz	r0, 8005f28 <__swbuf_r+0x90>
 8005eda:	68a3      	ldr	r3, [r4, #8]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	60a3      	str	r3, [r4, #8]
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	6022      	str	r2, [r4, #0]
 8005ee6:	701e      	strb	r6, [r3, #0]
 8005ee8:	6963      	ldr	r3, [r4, #20]
 8005eea:	3001      	adds	r0, #1
 8005eec:	4283      	cmp	r3, r0
 8005eee:	d004      	beq.n	8005efa <__swbuf_r+0x62>
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	07db      	lsls	r3, r3, #31
 8005ef4:	d506      	bpl.n	8005f04 <__swbuf_r+0x6c>
 8005ef6:	2e0a      	cmp	r6, #10
 8005ef8:	d104      	bne.n	8005f04 <__swbuf_r+0x6c>
 8005efa:	4621      	mov	r1, r4
 8005efc:	4628      	mov	r0, r5
 8005efe:	f000 f927 	bl	8006150 <_fflush_r>
 8005f02:	b988      	cbnz	r0, 8005f28 <__swbuf_r+0x90>
 8005f04:	4638      	mov	r0, r7
 8005f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <__swbuf_r+0x9c>)
 8005f0a:	429c      	cmp	r4, r3
 8005f0c:	d101      	bne.n	8005f12 <__swbuf_r+0x7a>
 8005f0e:	68ac      	ldr	r4, [r5, #8]
 8005f10:	e7cf      	b.n	8005eb2 <__swbuf_r+0x1a>
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <__swbuf_r+0xa0>)
 8005f14:	429c      	cmp	r4, r3
 8005f16:	bf08      	it	eq
 8005f18:	68ec      	ldreq	r4, [r5, #12]
 8005f1a:	e7ca      	b.n	8005eb2 <__swbuf_r+0x1a>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f000 f81a 	bl	8005f58 <__swsetup_r>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d0cb      	beq.n	8005ec0 <__swbuf_r+0x28>
 8005f28:	f04f 37ff 	mov.w	r7, #4294967295
 8005f2c:	e7ea      	b.n	8005f04 <__swbuf_r+0x6c>
 8005f2e:	bf00      	nop
 8005f30:	08006bec 	.word	0x08006bec
 8005f34:	08006c0c 	.word	0x08006c0c
 8005f38:	08006bcc 	.word	0x08006bcc

08005f3c <__ascii_wctomb>:
 8005f3c:	b149      	cbz	r1, 8005f52 <__ascii_wctomb+0x16>
 8005f3e:	2aff      	cmp	r2, #255	; 0xff
 8005f40:	bf85      	ittet	hi
 8005f42:	238a      	movhi	r3, #138	; 0x8a
 8005f44:	6003      	strhi	r3, [r0, #0]
 8005f46:	700a      	strbls	r2, [r1, #0]
 8005f48:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f4c:	bf98      	it	ls
 8005f4e:	2001      	movls	r0, #1
 8005f50:	4770      	bx	lr
 8005f52:	4608      	mov	r0, r1
 8005f54:	4770      	bx	lr
	...

08005f58 <__swsetup_r>:
 8005f58:	4b32      	ldr	r3, [pc, #200]	; (8006024 <__swsetup_r+0xcc>)
 8005f5a:	b570      	push	{r4, r5, r6, lr}
 8005f5c:	681d      	ldr	r5, [r3, #0]
 8005f5e:	4606      	mov	r6, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	b125      	cbz	r5, 8005f6e <__swsetup_r+0x16>
 8005f64:	69ab      	ldr	r3, [r5, #24]
 8005f66:	b913      	cbnz	r3, 8005f6e <__swsetup_r+0x16>
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 f985 	bl	8006278 <__sinit>
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <__swsetup_r+0xd0>)
 8005f70:	429c      	cmp	r4, r3
 8005f72:	d10f      	bne.n	8005f94 <__swsetup_r+0x3c>
 8005f74:	686c      	ldr	r4, [r5, #4]
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f7c:	0719      	lsls	r1, r3, #28
 8005f7e:	d42c      	bmi.n	8005fda <__swsetup_r+0x82>
 8005f80:	06dd      	lsls	r5, r3, #27
 8005f82:	d411      	bmi.n	8005fa8 <__swsetup_r+0x50>
 8005f84:	2309      	movs	r3, #9
 8005f86:	6033      	str	r3, [r6, #0]
 8005f88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f92:	e03e      	b.n	8006012 <__swsetup_r+0xba>
 8005f94:	4b25      	ldr	r3, [pc, #148]	; (800602c <__swsetup_r+0xd4>)
 8005f96:	429c      	cmp	r4, r3
 8005f98:	d101      	bne.n	8005f9e <__swsetup_r+0x46>
 8005f9a:	68ac      	ldr	r4, [r5, #8]
 8005f9c:	e7eb      	b.n	8005f76 <__swsetup_r+0x1e>
 8005f9e:	4b24      	ldr	r3, [pc, #144]	; (8006030 <__swsetup_r+0xd8>)
 8005fa0:	429c      	cmp	r4, r3
 8005fa2:	bf08      	it	eq
 8005fa4:	68ec      	ldreq	r4, [r5, #12]
 8005fa6:	e7e6      	b.n	8005f76 <__swsetup_r+0x1e>
 8005fa8:	0758      	lsls	r0, r3, #29
 8005faa:	d512      	bpl.n	8005fd2 <__swsetup_r+0x7a>
 8005fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fae:	b141      	cbz	r1, 8005fc2 <__swsetup_r+0x6a>
 8005fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb4:	4299      	cmp	r1, r3
 8005fb6:	d002      	beq.n	8005fbe <__swsetup_r+0x66>
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f7ff fb6f 	bl	800569c <_free_r>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8005fc2:	89a3      	ldrh	r3, [r4, #12]
 8005fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	f043 0308 	orr.w	r3, r3, #8
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	b94b      	cbnz	r3, 8005ff2 <__swsetup_r+0x9a>
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe8:	d003      	beq.n	8005ff2 <__swsetup_r+0x9a>
 8005fea:	4621      	mov	r1, r4
 8005fec:	4630      	mov	r0, r6
 8005fee:	f000 fa07 	bl	8006400 <__smakebuf_r>
 8005ff2:	89a0      	ldrh	r0, [r4, #12]
 8005ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ff8:	f010 0301 	ands.w	r3, r0, #1
 8005ffc:	d00a      	beq.n	8006014 <__swsetup_r+0xbc>
 8005ffe:	2300      	movs	r3, #0
 8006000:	60a3      	str	r3, [r4, #8]
 8006002:	6963      	ldr	r3, [r4, #20]
 8006004:	425b      	negs	r3, r3
 8006006:	61a3      	str	r3, [r4, #24]
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	b943      	cbnz	r3, 800601e <__swsetup_r+0xc6>
 800600c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006010:	d1ba      	bne.n	8005f88 <__swsetup_r+0x30>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	0781      	lsls	r1, r0, #30
 8006016:	bf58      	it	pl
 8006018:	6963      	ldrpl	r3, [r4, #20]
 800601a:	60a3      	str	r3, [r4, #8]
 800601c:	e7f4      	b.n	8006008 <__swsetup_r+0xb0>
 800601e:	2000      	movs	r0, #0
 8006020:	e7f7      	b.n	8006012 <__swsetup_r+0xba>
 8006022:	bf00      	nop
 8006024:	20000018 	.word	0x20000018
 8006028:	08006bec 	.word	0x08006bec
 800602c:	08006c0c 	.word	0x08006c0c
 8006030:	08006bcc 	.word	0x08006bcc

08006034 <abort>:
 8006034:	b508      	push	{r3, lr}
 8006036:	2006      	movs	r0, #6
 8006038:	f000 fa52 	bl	80064e0 <raise>
 800603c:	2001      	movs	r0, #1
 800603e:	f7fb f8b9 	bl	80011b4 <_exit>
	...

08006044 <__sflush_r>:
 8006044:	898a      	ldrh	r2, [r1, #12]
 8006046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604a:	4605      	mov	r5, r0
 800604c:	0710      	lsls	r0, r2, #28
 800604e:	460c      	mov	r4, r1
 8006050:	d458      	bmi.n	8006104 <__sflush_r+0xc0>
 8006052:	684b      	ldr	r3, [r1, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	dc05      	bgt.n	8006064 <__sflush_r+0x20>
 8006058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	dc02      	bgt.n	8006064 <__sflush_r+0x20>
 800605e:	2000      	movs	r0, #0
 8006060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006066:	2e00      	cmp	r6, #0
 8006068:	d0f9      	beq.n	800605e <__sflush_r+0x1a>
 800606a:	2300      	movs	r3, #0
 800606c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006070:	682f      	ldr	r7, [r5, #0]
 8006072:	602b      	str	r3, [r5, #0]
 8006074:	d032      	beq.n	80060dc <__sflush_r+0x98>
 8006076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	075a      	lsls	r2, r3, #29
 800607c:	d505      	bpl.n	800608a <__sflush_r+0x46>
 800607e:	6863      	ldr	r3, [r4, #4]
 8006080:	1ac0      	subs	r0, r0, r3
 8006082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006084:	b10b      	cbz	r3, 800608a <__sflush_r+0x46>
 8006086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006088:	1ac0      	subs	r0, r0, r3
 800608a:	2300      	movs	r3, #0
 800608c:	4602      	mov	r2, r0
 800608e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006090:	6a21      	ldr	r1, [r4, #32]
 8006092:	4628      	mov	r0, r5
 8006094:	47b0      	blx	r6
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	d106      	bne.n	80060aa <__sflush_r+0x66>
 800609c:	6829      	ldr	r1, [r5, #0]
 800609e:	291d      	cmp	r1, #29
 80060a0:	d82c      	bhi.n	80060fc <__sflush_r+0xb8>
 80060a2:	4a2a      	ldr	r2, [pc, #168]	; (800614c <__sflush_r+0x108>)
 80060a4:	40ca      	lsrs	r2, r1
 80060a6:	07d6      	lsls	r6, r2, #31
 80060a8:	d528      	bpl.n	80060fc <__sflush_r+0xb8>
 80060aa:	2200      	movs	r2, #0
 80060ac:	6062      	str	r2, [r4, #4]
 80060ae:	04d9      	lsls	r1, r3, #19
 80060b0:	6922      	ldr	r2, [r4, #16]
 80060b2:	6022      	str	r2, [r4, #0]
 80060b4:	d504      	bpl.n	80060c0 <__sflush_r+0x7c>
 80060b6:	1c42      	adds	r2, r0, #1
 80060b8:	d101      	bne.n	80060be <__sflush_r+0x7a>
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	b903      	cbnz	r3, 80060c0 <__sflush_r+0x7c>
 80060be:	6560      	str	r0, [r4, #84]	; 0x54
 80060c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060c2:	602f      	str	r7, [r5, #0]
 80060c4:	2900      	cmp	r1, #0
 80060c6:	d0ca      	beq.n	800605e <__sflush_r+0x1a>
 80060c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060cc:	4299      	cmp	r1, r3
 80060ce:	d002      	beq.n	80060d6 <__sflush_r+0x92>
 80060d0:	4628      	mov	r0, r5
 80060d2:	f7ff fae3 	bl	800569c <_free_r>
 80060d6:	2000      	movs	r0, #0
 80060d8:	6360      	str	r0, [r4, #52]	; 0x34
 80060da:	e7c1      	b.n	8006060 <__sflush_r+0x1c>
 80060dc:	6a21      	ldr	r1, [r4, #32]
 80060de:	2301      	movs	r3, #1
 80060e0:	4628      	mov	r0, r5
 80060e2:	47b0      	blx	r6
 80060e4:	1c41      	adds	r1, r0, #1
 80060e6:	d1c7      	bne.n	8006078 <__sflush_r+0x34>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0c4      	beq.n	8006078 <__sflush_r+0x34>
 80060ee:	2b1d      	cmp	r3, #29
 80060f0:	d001      	beq.n	80060f6 <__sflush_r+0xb2>
 80060f2:	2b16      	cmp	r3, #22
 80060f4:	d101      	bne.n	80060fa <__sflush_r+0xb6>
 80060f6:	602f      	str	r7, [r5, #0]
 80060f8:	e7b1      	b.n	800605e <__sflush_r+0x1a>
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	e7ad      	b.n	8006060 <__sflush_r+0x1c>
 8006104:	690f      	ldr	r7, [r1, #16]
 8006106:	2f00      	cmp	r7, #0
 8006108:	d0a9      	beq.n	800605e <__sflush_r+0x1a>
 800610a:	0793      	lsls	r3, r2, #30
 800610c:	680e      	ldr	r6, [r1, #0]
 800610e:	bf08      	it	eq
 8006110:	694b      	ldreq	r3, [r1, #20]
 8006112:	600f      	str	r7, [r1, #0]
 8006114:	bf18      	it	ne
 8006116:	2300      	movne	r3, #0
 8006118:	eba6 0807 	sub.w	r8, r6, r7
 800611c:	608b      	str	r3, [r1, #8]
 800611e:	f1b8 0f00 	cmp.w	r8, #0
 8006122:	dd9c      	ble.n	800605e <__sflush_r+0x1a>
 8006124:	6a21      	ldr	r1, [r4, #32]
 8006126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006128:	4643      	mov	r3, r8
 800612a:	463a      	mov	r2, r7
 800612c:	4628      	mov	r0, r5
 800612e:	47b0      	blx	r6
 8006130:	2800      	cmp	r0, #0
 8006132:	dc06      	bgt.n	8006142 <__sflush_r+0xfe>
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	e78e      	b.n	8006060 <__sflush_r+0x1c>
 8006142:	4407      	add	r7, r0
 8006144:	eba8 0800 	sub.w	r8, r8, r0
 8006148:	e7e9      	b.n	800611e <__sflush_r+0xda>
 800614a:	bf00      	nop
 800614c:	20400001 	.word	0x20400001

08006150 <_fflush_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	690b      	ldr	r3, [r1, #16]
 8006154:	4605      	mov	r5, r0
 8006156:	460c      	mov	r4, r1
 8006158:	b913      	cbnz	r3, 8006160 <_fflush_r+0x10>
 800615a:	2500      	movs	r5, #0
 800615c:	4628      	mov	r0, r5
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	b118      	cbz	r0, 800616a <_fflush_r+0x1a>
 8006162:	6983      	ldr	r3, [r0, #24]
 8006164:	b90b      	cbnz	r3, 800616a <_fflush_r+0x1a>
 8006166:	f000 f887 	bl	8006278 <__sinit>
 800616a:	4b14      	ldr	r3, [pc, #80]	; (80061bc <_fflush_r+0x6c>)
 800616c:	429c      	cmp	r4, r3
 800616e:	d11b      	bne.n	80061a8 <_fflush_r+0x58>
 8006170:	686c      	ldr	r4, [r5, #4]
 8006172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0ef      	beq.n	800615a <_fflush_r+0xa>
 800617a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800617c:	07d0      	lsls	r0, r2, #31
 800617e:	d404      	bmi.n	800618a <_fflush_r+0x3a>
 8006180:	0599      	lsls	r1, r3, #22
 8006182:	d402      	bmi.n	800618a <_fflush_r+0x3a>
 8006184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006186:	f000 f915 	bl	80063b4 <__retarget_lock_acquire_recursive>
 800618a:	4628      	mov	r0, r5
 800618c:	4621      	mov	r1, r4
 800618e:	f7ff ff59 	bl	8006044 <__sflush_r>
 8006192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006194:	07da      	lsls	r2, r3, #31
 8006196:	4605      	mov	r5, r0
 8006198:	d4e0      	bmi.n	800615c <_fflush_r+0xc>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	059b      	lsls	r3, r3, #22
 800619e:	d4dd      	bmi.n	800615c <_fflush_r+0xc>
 80061a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061a2:	f000 f908 	bl	80063b6 <__retarget_lock_release_recursive>
 80061a6:	e7d9      	b.n	800615c <_fflush_r+0xc>
 80061a8:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <_fflush_r+0x70>)
 80061aa:	429c      	cmp	r4, r3
 80061ac:	d101      	bne.n	80061b2 <_fflush_r+0x62>
 80061ae:	68ac      	ldr	r4, [r5, #8]
 80061b0:	e7df      	b.n	8006172 <_fflush_r+0x22>
 80061b2:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <_fflush_r+0x74>)
 80061b4:	429c      	cmp	r4, r3
 80061b6:	bf08      	it	eq
 80061b8:	68ec      	ldreq	r4, [r5, #12]
 80061ba:	e7da      	b.n	8006172 <_fflush_r+0x22>
 80061bc:	08006bec 	.word	0x08006bec
 80061c0:	08006c0c 	.word	0x08006c0c
 80061c4:	08006bcc 	.word	0x08006bcc

080061c8 <std>:
 80061c8:	2300      	movs	r3, #0
 80061ca:	b510      	push	{r4, lr}
 80061cc:	4604      	mov	r4, r0
 80061ce:	e9c0 3300 	strd	r3, r3, [r0]
 80061d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061d6:	6083      	str	r3, [r0, #8]
 80061d8:	8181      	strh	r1, [r0, #12]
 80061da:	6643      	str	r3, [r0, #100]	; 0x64
 80061dc:	81c2      	strh	r2, [r0, #14]
 80061de:	6183      	str	r3, [r0, #24]
 80061e0:	4619      	mov	r1, r3
 80061e2:	2208      	movs	r2, #8
 80061e4:	305c      	adds	r0, #92	; 0x5c
 80061e6:	f7fd fba5 	bl	8003934 <memset>
 80061ea:	4b05      	ldr	r3, [pc, #20]	; (8006200 <std+0x38>)
 80061ec:	6263      	str	r3, [r4, #36]	; 0x24
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <std+0x3c>)
 80061f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <std+0x40>)
 80061f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <std+0x44>)
 80061f8:	6224      	str	r4, [r4, #32]
 80061fa:	6323      	str	r3, [r4, #48]	; 0x30
 80061fc:	bd10      	pop	{r4, pc}
 80061fe:	bf00      	nop
 8006200:	08006519 	.word	0x08006519
 8006204:	0800653b 	.word	0x0800653b
 8006208:	08006573 	.word	0x08006573
 800620c:	08006597 	.word	0x08006597

08006210 <_cleanup_r>:
 8006210:	4901      	ldr	r1, [pc, #4]	; (8006218 <_cleanup_r+0x8>)
 8006212:	f000 b8af 	b.w	8006374 <_fwalk_reent>
 8006216:	bf00      	nop
 8006218:	08006151 	.word	0x08006151

0800621c <__sfmoreglue>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	1e4a      	subs	r2, r1, #1
 8006220:	2568      	movs	r5, #104	; 0x68
 8006222:	4355      	muls	r5, r2
 8006224:	460e      	mov	r6, r1
 8006226:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800622a:	f7ff fa87 	bl	800573c <_malloc_r>
 800622e:	4604      	mov	r4, r0
 8006230:	b140      	cbz	r0, 8006244 <__sfmoreglue+0x28>
 8006232:	2100      	movs	r1, #0
 8006234:	e9c0 1600 	strd	r1, r6, [r0]
 8006238:	300c      	adds	r0, #12
 800623a:	60a0      	str	r0, [r4, #8]
 800623c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006240:	f7fd fb78 	bl	8003934 <memset>
 8006244:	4620      	mov	r0, r4
 8006246:	bd70      	pop	{r4, r5, r6, pc}

08006248 <__sfp_lock_acquire>:
 8006248:	4801      	ldr	r0, [pc, #4]	; (8006250 <__sfp_lock_acquire+0x8>)
 800624a:	f000 b8b3 	b.w	80063b4 <__retarget_lock_acquire_recursive>
 800624e:	bf00      	nop
 8006250:	200010bc 	.word	0x200010bc

08006254 <__sfp_lock_release>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__sfp_lock_release+0x8>)
 8006256:	f000 b8ae 	b.w	80063b6 <__retarget_lock_release_recursive>
 800625a:	bf00      	nop
 800625c:	200010bc 	.word	0x200010bc

08006260 <__sinit_lock_acquire>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__sinit_lock_acquire+0x8>)
 8006262:	f000 b8a7 	b.w	80063b4 <__retarget_lock_acquire_recursive>
 8006266:	bf00      	nop
 8006268:	200010b7 	.word	0x200010b7

0800626c <__sinit_lock_release>:
 800626c:	4801      	ldr	r0, [pc, #4]	; (8006274 <__sinit_lock_release+0x8>)
 800626e:	f000 b8a2 	b.w	80063b6 <__retarget_lock_release_recursive>
 8006272:	bf00      	nop
 8006274:	200010b7 	.word	0x200010b7

08006278 <__sinit>:
 8006278:	b510      	push	{r4, lr}
 800627a:	4604      	mov	r4, r0
 800627c:	f7ff fff0 	bl	8006260 <__sinit_lock_acquire>
 8006280:	69a3      	ldr	r3, [r4, #24]
 8006282:	b11b      	cbz	r3, 800628c <__sinit+0x14>
 8006284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006288:	f7ff bff0 	b.w	800626c <__sinit_lock_release>
 800628c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006290:	6523      	str	r3, [r4, #80]	; 0x50
 8006292:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <__sinit+0x68>)
 8006294:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <__sinit+0x6c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	62a2      	str	r2, [r4, #40]	; 0x28
 800629a:	42a3      	cmp	r3, r4
 800629c:	bf04      	itt	eq
 800629e:	2301      	moveq	r3, #1
 80062a0:	61a3      	streq	r3, [r4, #24]
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 f820 	bl	80062e8 <__sfp>
 80062a8:	6060      	str	r0, [r4, #4]
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 f81c 	bl	80062e8 <__sfp>
 80062b0:	60a0      	str	r0, [r4, #8]
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 f818 	bl	80062e8 <__sfp>
 80062b8:	2200      	movs	r2, #0
 80062ba:	60e0      	str	r0, [r4, #12]
 80062bc:	2104      	movs	r1, #4
 80062be:	6860      	ldr	r0, [r4, #4]
 80062c0:	f7ff ff82 	bl	80061c8 <std>
 80062c4:	68a0      	ldr	r0, [r4, #8]
 80062c6:	2201      	movs	r2, #1
 80062c8:	2109      	movs	r1, #9
 80062ca:	f7ff ff7d 	bl	80061c8 <std>
 80062ce:	68e0      	ldr	r0, [r4, #12]
 80062d0:	2202      	movs	r2, #2
 80062d2:	2112      	movs	r1, #18
 80062d4:	f7ff ff78 	bl	80061c8 <std>
 80062d8:	2301      	movs	r3, #1
 80062da:	61a3      	str	r3, [r4, #24]
 80062dc:	e7d2      	b.n	8006284 <__sinit+0xc>
 80062de:	bf00      	nop
 80062e0:	0800684c 	.word	0x0800684c
 80062e4:	08006211 	.word	0x08006211

080062e8 <__sfp>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	4607      	mov	r7, r0
 80062ec:	f7ff ffac 	bl	8006248 <__sfp_lock_acquire>
 80062f0:	4b1e      	ldr	r3, [pc, #120]	; (800636c <__sfp+0x84>)
 80062f2:	681e      	ldr	r6, [r3, #0]
 80062f4:	69b3      	ldr	r3, [r6, #24]
 80062f6:	b913      	cbnz	r3, 80062fe <__sfp+0x16>
 80062f8:	4630      	mov	r0, r6
 80062fa:	f7ff ffbd 	bl	8006278 <__sinit>
 80062fe:	3648      	adds	r6, #72	; 0x48
 8006300:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006304:	3b01      	subs	r3, #1
 8006306:	d503      	bpl.n	8006310 <__sfp+0x28>
 8006308:	6833      	ldr	r3, [r6, #0]
 800630a:	b30b      	cbz	r3, 8006350 <__sfp+0x68>
 800630c:	6836      	ldr	r6, [r6, #0]
 800630e:	e7f7      	b.n	8006300 <__sfp+0x18>
 8006310:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006314:	b9d5      	cbnz	r5, 800634c <__sfp+0x64>
 8006316:	4b16      	ldr	r3, [pc, #88]	; (8006370 <__sfp+0x88>)
 8006318:	60e3      	str	r3, [r4, #12]
 800631a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800631e:	6665      	str	r5, [r4, #100]	; 0x64
 8006320:	f000 f847 	bl	80063b2 <__retarget_lock_init_recursive>
 8006324:	f7ff ff96 	bl	8006254 <__sfp_lock_release>
 8006328:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800632c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006330:	6025      	str	r5, [r4, #0]
 8006332:	61a5      	str	r5, [r4, #24]
 8006334:	2208      	movs	r2, #8
 8006336:	4629      	mov	r1, r5
 8006338:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800633c:	f7fd fafa 	bl	8003934 <memset>
 8006340:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006344:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006348:	4620      	mov	r0, r4
 800634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634c:	3468      	adds	r4, #104	; 0x68
 800634e:	e7d9      	b.n	8006304 <__sfp+0x1c>
 8006350:	2104      	movs	r1, #4
 8006352:	4638      	mov	r0, r7
 8006354:	f7ff ff62 	bl	800621c <__sfmoreglue>
 8006358:	4604      	mov	r4, r0
 800635a:	6030      	str	r0, [r6, #0]
 800635c:	2800      	cmp	r0, #0
 800635e:	d1d5      	bne.n	800630c <__sfp+0x24>
 8006360:	f7ff ff78 	bl	8006254 <__sfp_lock_release>
 8006364:	230c      	movs	r3, #12
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	e7ee      	b.n	8006348 <__sfp+0x60>
 800636a:	bf00      	nop
 800636c:	0800684c 	.word	0x0800684c
 8006370:	ffff0001 	.word	0xffff0001

08006374 <_fwalk_reent>:
 8006374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006378:	4606      	mov	r6, r0
 800637a:	4688      	mov	r8, r1
 800637c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006380:	2700      	movs	r7, #0
 8006382:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006386:	f1b9 0901 	subs.w	r9, r9, #1
 800638a:	d505      	bpl.n	8006398 <_fwalk_reent+0x24>
 800638c:	6824      	ldr	r4, [r4, #0]
 800638e:	2c00      	cmp	r4, #0
 8006390:	d1f7      	bne.n	8006382 <_fwalk_reent+0xe>
 8006392:	4638      	mov	r0, r7
 8006394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006398:	89ab      	ldrh	r3, [r5, #12]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d907      	bls.n	80063ae <_fwalk_reent+0x3a>
 800639e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063a2:	3301      	adds	r3, #1
 80063a4:	d003      	beq.n	80063ae <_fwalk_reent+0x3a>
 80063a6:	4629      	mov	r1, r5
 80063a8:	4630      	mov	r0, r6
 80063aa:	47c0      	blx	r8
 80063ac:	4307      	orrs	r7, r0
 80063ae:	3568      	adds	r5, #104	; 0x68
 80063b0:	e7e9      	b.n	8006386 <_fwalk_reent+0x12>

080063b2 <__retarget_lock_init_recursive>:
 80063b2:	4770      	bx	lr

080063b4 <__retarget_lock_acquire_recursive>:
 80063b4:	4770      	bx	lr

080063b6 <__retarget_lock_release_recursive>:
 80063b6:	4770      	bx	lr

080063b8 <__swhatbuf_r>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	460e      	mov	r6, r1
 80063bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	b096      	sub	sp, #88	; 0x58
 80063c4:	4614      	mov	r4, r2
 80063c6:	461d      	mov	r5, r3
 80063c8:	da07      	bge.n	80063da <__swhatbuf_r+0x22>
 80063ca:	2300      	movs	r3, #0
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	89b3      	ldrh	r3, [r6, #12]
 80063d0:	061a      	lsls	r2, r3, #24
 80063d2:	d410      	bmi.n	80063f6 <__swhatbuf_r+0x3e>
 80063d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d8:	e00e      	b.n	80063f8 <__swhatbuf_r+0x40>
 80063da:	466a      	mov	r2, sp
 80063dc:	f000 f902 	bl	80065e4 <_fstat_r>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dbf2      	blt.n	80063ca <__swhatbuf_r+0x12>
 80063e4:	9a01      	ldr	r2, [sp, #4]
 80063e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063ee:	425a      	negs	r2, r3
 80063f0:	415a      	adcs	r2, r3
 80063f2:	602a      	str	r2, [r5, #0]
 80063f4:	e7ee      	b.n	80063d4 <__swhatbuf_r+0x1c>
 80063f6:	2340      	movs	r3, #64	; 0x40
 80063f8:	2000      	movs	r0, #0
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	b016      	add	sp, #88	; 0x58
 80063fe:	bd70      	pop	{r4, r5, r6, pc}

08006400 <__smakebuf_r>:
 8006400:	898b      	ldrh	r3, [r1, #12]
 8006402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006404:	079d      	lsls	r5, r3, #30
 8006406:	4606      	mov	r6, r0
 8006408:	460c      	mov	r4, r1
 800640a:	d507      	bpl.n	800641c <__smakebuf_r+0x1c>
 800640c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	2301      	movs	r3, #1
 8006416:	6163      	str	r3, [r4, #20]
 8006418:	b002      	add	sp, #8
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	ab01      	add	r3, sp, #4
 800641e:	466a      	mov	r2, sp
 8006420:	f7ff ffca 	bl	80063b8 <__swhatbuf_r>
 8006424:	9900      	ldr	r1, [sp, #0]
 8006426:	4605      	mov	r5, r0
 8006428:	4630      	mov	r0, r6
 800642a:	f7ff f987 	bl	800573c <_malloc_r>
 800642e:	b948      	cbnz	r0, 8006444 <__smakebuf_r+0x44>
 8006430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006434:	059a      	lsls	r2, r3, #22
 8006436:	d4ef      	bmi.n	8006418 <__smakebuf_r+0x18>
 8006438:	f023 0303 	bic.w	r3, r3, #3
 800643c:	f043 0302 	orr.w	r3, r3, #2
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	e7e3      	b.n	800640c <__smakebuf_r+0xc>
 8006444:	4b0d      	ldr	r3, [pc, #52]	; (800647c <__smakebuf_r+0x7c>)
 8006446:	62b3      	str	r3, [r6, #40]	; 0x28
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	6020      	str	r0, [r4, #0]
 800644c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	9b00      	ldr	r3, [sp, #0]
 8006454:	6163      	str	r3, [r4, #20]
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	6120      	str	r0, [r4, #16]
 800645a:	b15b      	cbz	r3, 8006474 <__smakebuf_r+0x74>
 800645c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006460:	4630      	mov	r0, r6
 8006462:	f000 f8d1 	bl	8006608 <_isatty_r>
 8006466:	b128      	cbz	r0, 8006474 <__smakebuf_r+0x74>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	f023 0303 	bic.w	r3, r3, #3
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	89a0      	ldrh	r0, [r4, #12]
 8006476:	4305      	orrs	r5, r0
 8006478:	81a5      	strh	r5, [r4, #12]
 800647a:	e7cd      	b.n	8006418 <__smakebuf_r+0x18>
 800647c:	08006211 	.word	0x08006211

08006480 <_malloc_usable_size_r>:
 8006480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006484:	1f18      	subs	r0, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfbc      	itt	lt
 800648a:	580b      	ldrlt	r3, [r1, r0]
 800648c:	18c0      	addlt	r0, r0, r3
 800648e:	4770      	bx	lr

08006490 <_raise_r>:
 8006490:	291f      	cmp	r1, #31
 8006492:	b538      	push	{r3, r4, r5, lr}
 8006494:	4604      	mov	r4, r0
 8006496:	460d      	mov	r5, r1
 8006498:	d904      	bls.n	80064a4 <_raise_r+0x14>
 800649a:	2316      	movs	r3, #22
 800649c:	6003      	str	r3, [r0, #0]
 800649e:	f04f 30ff 	mov.w	r0, #4294967295
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064a6:	b112      	cbz	r2, 80064ae <_raise_r+0x1e>
 80064a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064ac:	b94b      	cbnz	r3, 80064c2 <_raise_r+0x32>
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 f830 	bl	8006514 <_getpid_r>
 80064b4:	462a      	mov	r2, r5
 80064b6:	4601      	mov	r1, r0
 80064b8:	4620      	mov	r0, r4
 80064ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064be:	f000 b817 	b.w	80064f0 <_kill_r>
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d00a      	beq.n	80064dc <_raise_r+0x4c>
 80064c6:	1c59      	adds	r1, r3, #1
 80064c8:	d103      	bne.n	80064d2 <_raise_r+0x42>
 80064ca:	2316      	movs	r3, #22
 80064cc:	6003      	str	r3, [r0, #0]
 80064ce:	2001      	movs	r0, #1
 80064d0:	e7e7      	b.n	80064a2 <_raise_r+0x12>
 80064d2:	2400      	movs	r4, #0
 80064d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064d8:	4628      	mov	r0, r5
 80064da:	4798      	blx	r3
 80064dc:	2000      	movs	r0, #0
 80064de:	e7e0      	b.n	80064a2 <_raise_r+0x12>

080064e0 <raise>:
 80064e0:	4b02      	ldr	r3, [pc, #8]	; (80064ec <raise+0xc>)
 80064e2:	4601      	mov	r1, r0
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	f7ff bfd3 	b.w	8006490 <_raise_r>
 80064ea:	bf00      	nop
 80064ec:	20000018 	.word	0x20000018

080064f0 <_kill_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d07      	ldr	r5, [pc, #28]	; (8006510 <_kill_r+0x20>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	4611      	mov	r1, r2
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	f7fa fe51 	bl	80011a4 <_kill>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	d102      	bne.n	800650c <_kill_r+0x1c>
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	b103      	cbz	r3, 800650c <_kill_r+0x1c>
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	bd38      	pop	{r3, r4, r5, pc}
 800650e:	bf00      	nop
 8006510:	200010b0 	.word	0x200010b0

08006514 <_getpid_r>:
 8006514:	f7fa be44 	b.w	80011a0 <_getpid>

08006518 <__sread>:
 8006518:	b510      	push	{r4, lr}
 800651a:	460c      	mov	r4, r1
 800651c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006520:	f000 f894 	bl	800664c <_read_r>
 8006524:	2800      	cmp	r0, #0
 8006526:	bfab      	itete	ge
 8006528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800652a:	89a3      	ldrhlt	r3, [r4, #12]
 800652c:	181b      	addge	r3, r3, r0
 800652e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006532:	bfac      	ite	ge
 8006534:	6563      	strge	r3, [r4, #84]	; 0x54
 8006536:	81a3      	strhlt	r3, [r4, #12]
 8006538:	bd10      	pop	{r4, pc}

0800653a <__swrite>:
 800653a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653e:	461f      	mov	r7, r3
 8006540:	898b      	ldrh	r3, [r1, #12]
 8006542:	05db      	lsls	r3, r3, #23
 8006544:	4605      	mov	r5, r0
 8006546:	460c      	mov	r4, r1
 8006548:	4616      	mov	r6, r2
 800654a:	d505      	bpl.n	8006558 <__swrite+0x1e>
 800654c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006550:	2302      	movs	r3, #2
 8006552:	2200      	movs	r2, #0
 8006554:	f000 f868 	bl	8006628 <_lseek_r>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800655e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006562:	81a3      	strh	r3, [r4, #12]
 8006564:	4632      	mov	r2, r6
 8006566:	463b      	mov	r3, r7
 8006568:	4628      	mov	r0, r5
 800656a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800656e:	f000 b817 	b.w	80065a0 <_write_r>

08006572 <__sseek>:
 8006572:	b510      	push	{r4, lr}
 8006574:	460c      	mov	r4, r1
 8006576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657a:	f000 f855 	bl	8006628 <_lseek_r>
 800657e:	1c43      	adds	r3, r0, #1
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	bf15      	itete	ne
 8006584:	6560      	strne	r0, [r4, #84]	; 0x54
 8006586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800658a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800658e:	81a3      	strheq	r3, [r4, #12]
 8006590:	bf18      	it	ne
 8006592:	81a3      	strhne	r3, [r4, #12]
 8006594:	bd10      	pop	{r4, pc}

08006596 <__sclose>:
 8006596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800659a:	f000 b813 	b.w	80065c4 <_close_r>
	...

080065a0 <_write_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d07      	ldr	r5, [pc, #28]	; (80065c0 <_write_r+0x20>)
 80065a4:	4604      	mov	r4, r0
 80065a6:	4608      	mov	r0, r1
 80065a8:	4611      	mov	r1, r2
 80065aa:	2200      	movs	r2, #0
 80065ac:	602a      	str	r2, [r5, #0]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f7fa fe16 	bl	80011e0 <_write>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_write_r+0x1e>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_write_r+0x1e>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	200010b0 	.word	0x200010b0

080065c4 <_close_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d06      	ldr	r5, [pc, #24]	; (80065e0 <_close_r+0x1c>)
 80065c8:	2300      	movs	r3, #0
 80065ca:	4604      	mov	r4, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	602b      	str	r3, [r5, #0]
 80065d0:	f7fa fe32 	bl	8001238 <_close>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d102      	bne.n	80065de <_close_r+0x1a>
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	b103      	cbz	r3, 80065de <_close_r+0x1a>
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	200010b0 	.word	0x200010b0

080065e4 <_fstat_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4d07      	ldr	r5, [pc, #28]	; (8006604 <_fstat_r+0x20>)
 80065e8:	2300      	movs	r3, #0
 80065ea:	4604      	mov	r4, r0
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	602b      	str	r3, [r5, #0]
 80065f2:	f7fa fe24 	bl	800123e <_fstat>
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d102      	bne.n	8006600 <_fstat_r+0x1c>
 80065fa:	682b      	ldr	r3, [r5, #0]
 80065fc:	b103      	cbz	r3, 8006600 <_fstat_r+0x1c>
 80065fe:	6023      	str	r3, [r4, #0]
 8006600:	bd38      	pop	{r3, r4, r5, pc}
 8006602:	bf00      	nop
 8006604:	200010b0 	.word	0x200010b0

08006608 <_isatty_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4d06      	ldr	r5, [pc, #24]	; (8006624 <_isatty_r+0x1c>)
 800660c:	2300      	movs	r3, #0
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	f7fa fe18 	bl	8001248 <_isatty>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_isatty_r+0x1a>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_isatty_r+0x1a>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	200010b0 	.word	0x200010b0

08006628 <_lseek_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d07      	ldr	r5, [pc, #28]	; (8006648 <_lseek_r+0x20>)
 800662c:	4604      	mov	r4, r0
 800662e:	4608      	mov	r0, r1
 8006630:	4611      	mov	r1, r2
 8006632:	2200      	movs	r2, #0
 8006634:	602a      	str	r2, [r5, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f7fa fe08 	bl	800124c <_lseek>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_lseek_r+0x1e>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_lseek_r+0x1e>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	200010b0 	.word	0x200010b0

0800664c <_read_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	; (800666c <_read_r+0x20>)
 8006650:	4604      	mov	r4, r0
 8006652:	4608      	mov	r0, r1
 8006654:	4611      	mov	r1, r2
 8006656:	2200      	movs	r2, #0
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fa fdb0 	bl	80011c0 <_read>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_read_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_read_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	200010b0 	.word	0x200010b0

08006670 <_init>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	bf00      	nop
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr

0800667c <_fini>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	bf00      	nop
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr
