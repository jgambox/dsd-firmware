
dsd_parkingMeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006500  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08006690  08006690  00016690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c40  08006c40  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08006c40  08006c40  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c40  08006c40  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006c40  08006c40  00016c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006c48  08006c48  00016c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08006c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed8  200001e8  08006e38  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c0  08006e38  000210c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016341  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002713  00000000  00000000  00036559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000ae66  00000000  00000000  00038c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  00043ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00044738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e8f  00000000  00000000  00045328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e95  00000000  00000000  0006c1b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8142  00000000  00000000  0007f04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016718e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033a0  00000000  00000000  001671e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006678 	.word	0x08006678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08006678 	.word	0x08006678

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	2400      	movs	r4, #0
 8000bb0:	9403      	str	r4, [sp, #12]
 8000bb2:	9404      	str	r4, [sp, #16]
 8000bb4:	9405      	str	r4, [sp, #20]
 8000bb6:	9406      	str	r4, [sp, #24]
 8000bb8:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bbe:	f042 0210 	orr.w	r2, r2, #16
 8000bc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc6:	f002 0210 	and.w	r2, r2, #16
 8000bca:	9200      	str	r2, [sp, #0]
 8000bcc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd0:	f042 0202 	orr.w	r2, r2, #2
 8000bd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd8:	f002 0202 	and.w	r2, r2, #2
 8000bdc:	9201      	str	r2, [sp, #4]
 8000bde:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000be2:	f042 0204 	orr.w	r2, r2, #4
 8000be6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WIFI_RESET_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 8000bf2:	4e21      	ldr	r6, [pc, #132]	; (8000c78 <MX_GPIO_Init+0xd0>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f240 1101 	movw	r1, #257	; 0x101
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	f000 ff83 	bl	8001b06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TOF_RESET_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c00:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000c80 <MX_GPIO_Init+0xd8>
 8000c04:	4622      	mov	r2, r4
 8000c06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c0a:	4640      	mov	r0, r8
 8000c0c:	f000 ff7b 	bl	8001b06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WIFI_RESET_Pin */
  GPIO_InitStruct.Pin = WIFI_RESET_Pin;
 8000c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c14:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2501      	movs	r5, #1
 8000c18:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1c:	2702      	movs	r7, #2
 8000c1e:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(WIFI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c20:	a903      	add	r1, sp, #12
 8000c22:	4630      	mov	r0, r6
 8000c24:	f000 fe82 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_RESET_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = TOF_RESET_Pin|LED_BLUE_Pin;
 8000c28:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c2c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	a903      	add	r1, sp, #12
 8000c36:	4640      	mov	r0, r8
 8000c38:	f000 fe78 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_CS_Pin */
  GPIO_InitStruct.Pin = WIFI_CS_Pin;
 8000c3c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(WIFI_CS_GPIO_Port, &GPIO_InitStruct);
 8000c44:	a903      	add	r1, sp, #12
 8000c46:	4630      	mov	r0, r6
 8000c48:	f000 fe70 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_INT_Pin */
  GPIO_InitStruct.Pin = WIFI_INT_Pin;
 8000c4c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_GPIO_Init+0xd4>)
 8000c50:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(WIFI_INT_GPIO_Port, &GPIO_InitStruct);
 8000c54:	a903      	add	r1, sp, #12
 8000c56:	4630      	mov	r0, r6
 8000c58:	f000 fe68 	bl	800192c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c5c:	4622      	mov	r2, r4
 8000c5e:	4621      	mov	r1, r4
 8000c60:	2007      	movs	r0, #7
 8000c62:	f000 fe0b 	bl	800187c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c66:	2007      	movs	r0, #7
 8000c68:	f000 fe3c 	bl	80018e4 <HAL_NVIC_EnableIRQ>

}
 8000c6c:	b008      	add	sp, #32
 8000c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	48001000 	.word	0x48001000
 8000c7c:	10110000 	.word	0x10110000
 8000c80:	48000800 	.word	0x48000800

08000c84 <current_parking_state>:
PARKING_STATES parking_states, status;
GENERAL_APP_STATE general_states;

PARKING_STATES current_parking_state(float distance_value) {

	switch (parking_states) {
 8000c84:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <current_parking_state+0xe4>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d80d      	bhi.n	8000ca8 <current_parking_state+0x24>
 8000c8c:	e8df f003 	tbb	[pc, r3]
 8000c90:	5b260f02 	.word	0x5b260f02

	case Init_state: {
		status = parking_states;
 8000c94:	4a35      	ldr	r2, [pc, #212]	; (8000d6c <current_parking_state+0xe8>)
 8000c96:	7013      	strb	r3, [r2, #0]
		parking_states = Avaible_state;
 8000c98:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <current_parking_state+0xe4>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
		sensorTOF.sensorTOFValues = 0;
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <current_parking_state+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
		sensorTOF.objectDetected = false;
 8000ca4:	701a      	strb	r2, [r3, #0]
		sensorTOF.numberSamples = 0;
 8000ca6:	605a      	str	r2, [r3, #4]
		break;
	}
	}

	return status;
}
 8000ca8:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <current_parking_state+0xe8>)
 8000caa:	7818      	ldrb	r0, [r3, #0]
 8000cac:	4770      	bx	lr
		parking_states = Avaible_state;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <current_parking_state+0xe4>)
 8000cb2:	7013      	strb	r3, [r2, #0]
		status = Avaible_state;
 8000cb4:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <current_parking_state+0xe8>)
 8000cb6:	7013      	strb	r3, [r2, #0]
		if (distance_value >= thresholdMeterMax
 8000cb8:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8000d74 <current_parking_state+0xf0>
 8000cbc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc4:	dbf0      	blt.n	8000ca8 <current_parking_state+0x24>
				&& distance_value <= thresholdMeterMin) {
 8000cc6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8000d78 <current_parking_state+0xf4>
 8000cca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd2:	d8e9      	bhi.n	8000ca8 <current_parking_state+0x24>
			parking_states = Possible_Car_state;
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <current_parking_state+0xe4>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e7e5      	b.n	8000ca8 <current_parking_state+0x24>
		parking_states = Possible_Car_state;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <current_parking_state+0xe4>)
 8000ce0:	7013      	strb	r3, [r2, #0]
		status = Possible_Car_state;
 8000ce2:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <current_parking_state+0xe8>)
 8000ce4:	7013      	strb	r3, [r2, #0]
		sensorTOF.sensorTOFValues += distance_value;
 8000ce6:	4922      	ldr	r1, [pc, #136]	; (8000d70 <current_parking_state+0xec>)
 8000ce8:	edd1 7a02 	vldr	s15, [r1, #8]
 8000cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf0:	ee77 7a80 	vadd.f32	s15, s15, s0
 8000cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cf8:	edc1 7a02 	vstr	s15, [r1, #8]
		sensorTOF.numberSamples++;
 8000cfc:	684a      	ldr	r2, [r1, #4]
 8000cfe:	3201      	adds	r2, #1
 8000d00:	604a      	str	r2, [r1, #4]
		if (sensorTOF.numberSamples >= maxMeasureSamples) {
 8000d02:	2a03      	cmp	r2, #3
 8000d04:	ddd0      	ble.n	8000ca8 <current_parking_state+0x24>
			if (distance_value >= thresholdMeterMax
 8000d06:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8000d74 <current_parking_state+0xf0>
 8000d0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	db0f      	blt.n	8000d34 <current_parking_state+0xb0>
					&& distance_value <= thresholdMeterMin) {
 8000d14:	eddf 7a18 	vldr	s15, [pc, #96]	; 8000d78 <current_parking_state+0xf4>
 8000d18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d20:	d808      	bhi.n	8000d34 <current_parking_state+0xb0>
				sensorTOF.objectDetected = true;
 8000d22:	2201      	movs	r2, #1
 8000d24:	700a      	strb	r2, [r1, #0]
				sensorTOF.numberSamples = 0;
 8000d26:	2200      	movs	r2, #0
 8000d28:	604a      	str	r2, [r1, #4]
				sensorTOF.sensorTOFValues = 0;
 8000d2a:	608a      	str	r2, [r1, #8]
				parking_states = Car_state;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <current_parking_state+0xe4>)
 8000d2e:	2203      	movs	r2, #3
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	e7b9      	b.n	8000ca8 <current_parking_state+0x24>
				parking_states = Avaible_state;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <current_parking_state+0xe4>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
				sensorTOF.objectDetected = false;
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <current_parking_state+0xec>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
				sensorTOF.numberSamples = 0;
 8000d40:	605a      	str	r2, [r3, #4]
				sensorTOF.sensorTOFValues = 0;
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	e7b0      	b.n	8000ca8 <current_parking_state+0x24>
		parking_states = Car_state;
 8000d46:	2303      	movs	r3, #3
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <current_parking_state+0xe4>)
 8000d4a:	7013      	strb	r3, [r2, #0]
		status = Car_state;
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <current_parking_state+0xe8>)
 8000d4e:	7013      	strb	r3, [r2, #0]
		if (distance_value > thresholdMeterMin) {
 8000d50:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000d78 <current_parking_state+0xf4>
 8000d54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5c:	dda4      	ble.n	8000ca8 <current_parking_state+0x24>
			parking_states = Possible_Car_state;
 8000d5e:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <current_parking_state+0xe4>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e7a0      	b.n	8000ca8 <current_parking_state+0x24>
 8000d66:	bf00      	nop
 8000d68:	200002fc 	.word	0x200002fc
 8000d6c:	200002fd 	.word	0x200002fd
 8000d70:	200002f0 	.word	0x200002f0
 8000d74:	433e0000 	.word	0x433e0000
 8000d78:	43c80000 	.word	0x43c80000

08000d7c <APP_Initialize>:

void APP_Initialize(void) {

	general_states = INIT_STATE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <APP_Initialize+0x10>)
 8000d80:	7013      	strb	r3, [r2, #0]
	current_state = Init_state;
 8000d82:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <APP_Initialize+0x14>)
 8000d84:	6013      	str	r3, [r2, #0]
	previus_state = Init_state;
 8000d86:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <APP_Initialize+0x18>)
 8000d88:	6013      	str	r3, [r2, #0]
}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000234 	.word	0x20000234
 8000d90:	20000238 	.word	0x20000238
 8000d94:	20000288 	.word	0x20000288

08000d98 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <Error_Handler+0x2>

08000d9c <MX_SPI3_Init>:
{
 8000d9c:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8000d9e:	480f      	ldr	r0, [pc, #60]	; (8000ddc <MX_SPI3_Init+0x40>)
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_SPI3_Init+0x44>)
 8000da2:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000da4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000da8:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000daa:	2300      	movs	r3, #0
 8000dac:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000db2:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db4:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db6:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dbc:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dbe:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc0:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dca:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dd0:	f002 fb73 	bl	80034ba <HAL_SPI_Init>
 8000dd4:	b900      	cbnz	r0, 8000dd8 <MX_SPI3_Init+0x3c>
}
 8000dd6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000dd8:	f7ff ffde 	bl	8000d98 <Error_Handler>
 8000ddc:	2000028c 	.word	0x2000028c
 8000de0:	40003c00 	.word	0x40003c00

08000de4 <MX_I2C2_Init>:
{
 8000de4:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8000de6:	4811      	ldr	r0, [pc, #68]	; (8000e2c <MX_I2C2_Init+0x48>)
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_I2C2_Init+0x4c>)
 8000dea:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000dec:	f640 6314 	movw	r3, #3604	; 0xe14
 8000df0:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df6:	2201      	movs	r2, #1
 8000df8:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfa:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000dfc:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dfe:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e00:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e02:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e04:	f000 ffda 	bl	8001dbc <HAL_I2C_Init>
 8000e08:	b950      	cbnz	r0, 8000e20 <MX_I2C2_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_I2C2_Init+0x48>)
 8000e0e:	f001 f9af 	bl	8002170 <HAL_I2CEx_ConfigAnalogFilter>
 8000e12:	b938      	cbnz	r0, 8000e24 <MX_I2C2_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e14:	2100      	movs	r1, #0
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_I2C2_Init+0x48>)
 8000e18:	f001 f9d8 	bl	80021cc <HAL_I2CEx_ConfigDigitalFilter>
 8000e1c:	b920      	cbnz	r0, 8000e28 <MX_I2C2_Init+0x44>
}
 8000e1e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e20:	f7ff ffba 	bl	8000d98 <Error_Handler>
    Error_Handler();
 8000e24:	f7ff ffb8 	bl	8000d98 <Error_Handler>
    Error_Handler();
 8000e28:	f7ff ffb6 	bl	8000d98 <Error_Handler>
 8000e2c:	2000023c 	.word	0x2000023c
 8000e30:	40005800 	.word	0x40005800

08000e34 <SystemClock_Config>:
{
 8000e34:	b500      	push	{lr}
 8000e36:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e38:	2240      	movs	r2, #64	; 0x40
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	a828      	add	r0, sp, #160	; 0xa0
 8000e3e:	f002 fd7d 	bl	800393c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e42:	2100      	movs	r1, #0
 8000e44:	9122      	str	r1, [sp, #136]	; 0x88
 8000e46:	9123      	str	r1, [sp, #140]	; 0x8c
 8000e48:	9124      	str	r1, [sp, #144]	; 0x90
 8000e4a:	9125      	str	r1, [sp, #148]	; 0x94
 8000e4c:	9126      	str	r1, [sp, #152]	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e4e:	2288      	movs	r2, #136	; 0x88
 8000e50:	4668      	mov	r0, sp
 8000e52:	f002 fd73 	bl	800393c <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e56:	2310      	movs	r3, #16
 8000e58:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	932d      	str	r3, [sp, #180]	; 0xb4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e5e:	2360      	movs	r3, #96	; 0x60
 8000e60:	932f      	str	r3, [sp, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e62:	a827      	add	r0, sp, #156	; 0x9c
 8000e64:	f001 fad0 	bl	8002408 <HAL_RCC_OscConfig>
 8000e68:	b9d0      	cbnz	r0, 8000ea0 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e6e:	2100      	movs	r1, #0
 8000e70:	9123      	str	r1, [sp, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	9124      	str	r1, [sp, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e74:	9125      	str	r1, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e76:	9126      	str	r1, [sp, #152]	; 0x98
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e78:	a822      	add	r0, sp, #136	; 0x88
 8000e7a:	f001 fddd 	bl	8002a38 <HAL_RCC_ClockConfig>
 8000e7e:	b988      	cbnz	r0, 8000ea4 <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e88:	4668      	mov	r0, sp
 8000e8a:	f001 ffe1 	bl	8002e50 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	b958      	cbnz	r0, 8000ea8 <SystemClock_Config+0x74>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e94:	f001 f9ce 	bl	8002234 <HAL_PWREx_ControlVoltageScaling>
 8000e98:	b940      	cbnz	r0, 8000eac <SystemClock_Config+0x78>
}
 8000e9a:	b039      	add	sp, #228	; 0xe4
 8000e9c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000ea0:	f7ff ff7a 	bl	8000d98 <Error_Handler>
    Error_Handler();
 8000ea4:	f7ff ff78 	bl	8000d98 <Error_Handler>
    Error_Handler();
 8000ea8:	f7ff ff76 	bl	8000d98 <Error_Handler>
    Error_Handler();
 8000eac:	f7ff ff74 	bl	8000d98 <Error_Handler>

08000eb0 <main>:
{
 8000eb0:	b510      	push	{r4, lr}
 8000eb2:	b082      	sub	sp, #8
  HAL_Init();
 8000eb4:	f000 fc9a 	bl	80017ec <HAL_Init>
  SystemClock_Config();
 8000eb8:	f7ff ffbc 	bl	8000e34 <SystemClock_Config>
  MX_GPIO_Init();
 8000ebc:	f7ff fe74 	bl	8000ba8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000ec0:	f7ff ff6c 	bl	8000d9c <MX_SPI3_Init>
  MX_I2C2_Init();
 8000ec4:	f7ff ff8e 	bl	8000de4 <MX_I2C2_Init>
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port,WIFI_RESET_Pin,GPIO_PIN_RESET);
 8000ec8:	4c3b      	ldr	r4, [pc, #236]	; (8000fb8 <main+0x108>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f000 fe18 	bl	8001b06 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f000 fca9 	bl	8001830 <HAL_Delay>
  HAL_GPIO_WritePin(WIFI_RESET_GPIO_Port,WIFI_RESET_Pin,GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f000 fe0e 	bl	8001b06 <HAL_GPIO_WritePin>
   result=getWifiModuleReady();
 8000eea:	f000 f9e7 	bl	80012bc <getWifiModuleReady>
  }while(!result);
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d0fb      	beq.n	8000eea <main+0x3a>
  startWifi();
 8000ef2:	f000 fc29 	bl	8001748 <startWifi>
  HAL_GPIO_WritePin(TOF_RESET_GPIO_Port,TOF_RESET_Pin,GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2140      	movs	r1, #64	; 0x40
 8000efa:	4830      	ldr	r0, [pc, #192]	; (8000fbc <main+0x10c>)
 8000efc:	f000 fe03 	bl	8001b06 <HAL_GPIO_WritePin>
  startToF();
 8000f00:	f000 f86a 	bl	8000fd8 <startToF>
  HAL_Delay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f000 fc93 	bl	8001830 <HAL_Delay>
  int distance=0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	9301      	str	r3, [sp, #4]
  APP_Initialize();
 8000f0e:	f7ff ff35 	bl	8000d7c <APP_Initialize>
 8000f12:	e005      	b.n	8000f20 <main+0x70>
			general_states = PROCEED_STATE;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <main+0x110>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
			parking_states = Init_state;
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <main+0x114>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
		switch (general_states) {
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <main+0x110>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d8fb      	bhi.n	8000f20 <main+0x70>
 8000f28:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <main+0x80>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f15 	.word	0x08000f15
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f8b 	.word	0x08000f8b
 8000f3c:	08000f93 	.word	0x08000f93
 8000f40:	08000f9b 	.word	0x08000f9b
			general_states = PROCEED_STATE;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <main+0x110>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
			getDistance(&distance);
 8000f4a:	a801      	add	r0, sp, #4
 8000f4c:	f000 f858 	bl	8001000 <getDistance>
			current_state = current_parking_state(distance);
 8000f50:	eddd 7a01 	vldr	s15, [sp, #4]
 8000f54:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8000f58:	f7ff fe94 	bl	8000c84 <current_parking_state>
 8000f5c:	4c1a      	ldr	r4, [pc, #104]	; (8000fc8 <main+0x118>)
 8000f5e:	6020      	str	r0, [r4, #0]
			HAL_GPIO_TogglePin(GPIOC, LED_BLUE_Pin);
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	4815      	ldr	r0, [pc, #84]	; (8000fbc <main+0x10c>)
 8000f66:	f000 fdd3 	bl	8001b10 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000f6a:	2064      	movs	r0, #100	; 0x64
 8000f6c:	f000 fc60 	bl	8001830 <HAL_Delay>
			startToF();
 8000f70:	f000 f832 	bl	8000fd8 <startToF>
			if (previus_state != current_state) {
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <main+0x11c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	6823      	ldr	r3, [r4, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d0d0      	beq.n	8000f20 <main+0x70>
				previus_state = current_state;
 8000f7e:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <main+0x11c>)
 8000f80:	6013      	str	r3, [r2, #0]
				general_states = REPORT_STATE;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <main+0x110>)
 8000f84:	2204      	movs	r2, #4
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e7ca      	b.n	8000f20 <main+0x70>
			general_states = PROCEED_STATE;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <main+0x110>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
			break;
 8000f90:	e7c6      	b.n	8000f20 <main+0x70>
			general_states = PROCEED_STATE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <main+0x110>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	701a      	strb	r2, [r3, #0]
			break;
 8000f98:	e7c2      	b.n	8000f20 <main+0x70>
			setSensor("ToF_value");
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <main+0x120>)
 8000f9c:	f000 fa7c 	bl	8001498 <setSensor>
			setDataInt("parking_State", current_state);
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <main+0x118>)
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <main+0x124>)
 8000fa6:	f000 fad5 	bl	8001554 <setDataInt>
			sendData();
 8000faa:	f000 fb2f 	bl	800160c <sendData>
			general_states = PROCEED_STATE;
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <main+0x110>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
			break;
 8000fb4:	e7b4      	b.n	8000f20 <main+0x70>
 8000fb6:	bf00      	nop
 8000fb8:	48001000 	.word	0x48001000
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	20000234 	.word	0x20000234
 8000fc4:	200002fc 	.word	0x200002fc
 8000fc8:	20000238 	.word	0x20000238
 8000fcc:	20000288 	.word	0x20000288
 8000fd0:	080066d8 	.word	0x080066d8
 8000fd4:	080066e4 	.word	0x080066e4

08000fd8 <startToF>:

    *temperature=T_C0+m*temp;
}


void startToF(){
 8000fd8:	b500      	push	{lr}
 8000fda:	b085      	sub	sp, #20

	 uint8_t addressWrite=0x52;
	 uint8_t turnOn[]={0x00,0x01};
 8000fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe0:	f8ad 300c 	strh.w	r3, [sp, #12]
	 HAL_I2C_Master_Transmit(&hi2c2,addressWrite,turnOn,2,1);
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	aa03      	add	r2, sp, #12
 8000fec:	2152      	movs	r1, #82	; 0x52
 8000fee:	4803      	ldr	r0, [pc, #12]	; (8000ffc <startToF+0x24>)
 8000ff0:	f000 ff42 	bl	8001e78 <HAL_I2C_Master_Transmit>
}
 8000ff4:	b005      	add	sp, #20
 8000ff6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ffa:	bf00      	nop
 8000ffc:	2000023c 	.word	0x2000023c

08001000 <getDistance>:

void getDistance(int *distance){
 8001000:	b570      	push	{r4, r5, r6, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	4604      	mov	r4, r0
	 uint8_t addressWrite=0x52;
	  uint8_t addressRead=0x53;
	  uint8_t resultAddress[]={0x1e};
 8001006:	231e      	movs	r3, #30
 8001008:	f88d 300c 	strb.w	r3, [sp, #12]
	  uint8_t rawData[]={0,0};
 800100c:	2300      	movs	r3, #0
 800100e:	f8ad 3008 	strh.w	r3, [sp, #8]

	  HAL_I2C_Master_Transmit(&hi2c2,addressWrite,resultAddress,1,1);
 8001012:	4e13      	ldr	r6, [pc, #76]	; (8001060 <getDistance+0x60>)
 8001014:	2501      	movs	r5, #1
 8001016:	9500      	str	r5, [sp, #0]
 8001018:	462b      	mov	r3, r5
 800101a:	aa03      	add	r2, sp, #12
 800101c:	2152      	movs	r1, #82	; 0x52
 800101e:	4630      	mov	r0, r6
 8001020:	f000 ff2a 	bl	8001e78 <HAL_I2C_Master_Transmit>

	  HAL_I2C_Master_Receive(&hi2c2,addressRead,rawData,2,1);
 8001024:	9500      	str	r5, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	aa02      	add	r2, sp, #8
 800102a:	2153      	movs	r1, #83	; 0x53
 800102c:	4630      	mov	r0, r6
 800102e:	f000 ffe1 	bl	8001ff4 <HAL_I2C_Master_Receive>
	  *distance=(rawData[0]<<8)+rawData[1]-20;
 8001032:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001036:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800103a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800103e:	3b14      	subs	r3, #20
 8001040:	6023      	str	r3, [r4, #0]

	  if(*distance<0){
 8001042:	2b00      	cmp	r3, #0
 8001044:	db08      	blt.n	8001058 <getDistance+0x58>
		  *distance=0;
	  }
	  if(*distance>2000){
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800104c:	dd02      	ble.n	8001054 <getDistance+0x54>
		  *distance=2000;
 800104e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001052:	6023      	str	r3, [r4, #0]
	  }
}
 8001054:	b004      	add	sp, #16
 8001056:	bd70      	pop	{r4, r5, r6, pc}
		  *distance=0;
 8001058:	2300      	movs	r3, #0
 800105a:	6023      	str	r3, [r4, #0]
 800105c:	e7f3      	b.n	8001046 <getDistance+0x46>
 800105e:	bf00      	nop
 8001060:	2000023c 	.word	0x2000023c

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_MspInit+0x2c>)
 8001068:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800106a:	f042 0201 	orr.w	r2, r2, #1
 800106e:	661a      	str	r2, [r3, #96]	; 0x60
 8001070:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001072:	f002 0201 	and.w	r2, r2, #1
 8001076:	9200      	str	r2, [sp, #0]
 8001078:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800107c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001080:	659a      	str	r2, [r3, #88]	; 0x58
 8001082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108c:	b002      	add	sp, #8
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001094:	b510      	push	{r4, lr}
 8001096:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	2300      	movs	r3, #0
 800109a:	9303      	str	r3, [sp, #12]
 800109c:	9304      	str	r3, [sp, #16]
 800109e:	9305      	str	r3, [sp, #20]
 80010a0:	9306      	str	r3, [sp, #24]
 80010a2:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 80010a4:	6802      	ldr	r2, [r0, #0]
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_I2C_MspInit+0x64>)
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d001      	beq.n	80010b0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010ac:	b008      	add	sp, #32
 80010ae:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4c12      	ldr	r4, [pc, #72]	; (80010fc <HAL_I2C_MspInit+0x68>)
 80010b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80010ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ca:	2312      	movs	r3, #18
 80010cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010d6:	2304      	movs	r3, #4
 80010d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	a903      	add	r1, sp, #12
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <HAL_I2C_MspInit+0x6c>)
 80010de:	f000 fc25 	bl	800192c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80010ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	9b02      	ldr	r3, [sp, #8]
}
 80010f4:	e7da      	b.n	80010ac <HAL_I2C_MspInit+0x18>
 80010f6:	bf00      	nop
 80010f8:	40005800 	.word	0x40005800
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400

08001104 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001104:	b500      	push	{lr}
 8001106:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	2300      	movs	r3, #0
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	9304      	str	r3, [sp, #16]
 800110e:	9305      	str	r3, [sp, #20]
 8001110:	9306      	str	r3, [sp, #24]
 8001112:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI3)
 8001114:	6802      	ldr	r2, [r0, #0]
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_SPI_MspInit+0x68>)
 8001118:	429a      	cmp	r2, r3
 800111a:	d002      	beq.n	8001122 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800111c:	b009      	add	sp, #36	; 0x24
 800111e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001122:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001126:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800112c:	659a      	str	r2, [r3, #88]	; 0x58
 800112e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001130:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001134:	9201      	str	r2, [sp, #4]
 8001136:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800113a:	f042 0204 	orr.w	r2, r2, #4
 800113e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800114a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800114e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800115c:	2306      	movs	r3, #6
 800115e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	a903      	add	r1, sp, #12
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <HAL_SPI_MspInit+0x6c>)
 8001164:	f000 fbe2 	bl	800192c <HAL_GPIO_Init>
}
 8001168:	e7d8      	b.n	800111c <HAL_SPI_MspInit+0x18>
 800116a:	bf00      	nop
 800116c:	40003c00 	.word	0x40003c00
 8001170:	48000800 	.word	0x48000800

08001174 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler>

08001176 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler>

08001178 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler>

0800117a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler>

0800117c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler>

0800117e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117e:	4770      	bx	lr

08001180 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	4770      	bx	lr

08001184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001184:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001186:	f000 fb41 	bl	800180c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118a:	bd08      	pop	{r3, pc}

0800118c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800118c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800118e:	2002      	movs	r0, #2
 8001190:	f000 fcc8 	bl	8001b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

		flagData=1;
 8001194:	4b01      	ldr	r3, [pc, #4]	; (800119c <EXTI1_IRQHandler+0x10>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]




  /* USER CODE END EXTI1_IRQn 1 */
}
 800119a:	bd08      	pop	{r3, pc}
 800119c:	2000020c 	.word	0x2000020c

080011a0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80011a0:	2001      	movs	r0, #1
 80011a2:	4770      	bx	lr

080011a4 <_kill>:

int _kill(int pid, int sig)
{
 80011a4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80011a6:	f002 fb91 	bl	80038cc <__errno>
 80011aa:	2316      	movs	r3, #22
 80011ac:	6003      	str	r3, [r0, #0]
	return -1;
}
 80011ae:	f04f 30ff 	mov.w	r0, #4294967295
 80011b2:	bd08      	pop	{r3, pc}

080011b4 <_exit>:

void _exit (int status)
{
 80011b4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80011b6:	f04f 31ff 	mov.w	r1, #4294967295
 80011ba:	f7ff fff3 	bl	80011a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011be:	e7fe      	b.n	80011be <_exit+0xa>

080011c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c0:	b570      	push	{r4, r5, r6, lr}
 80011c2:	460c      	mov	r4, r1
 80011c4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	2500      	movs	r5, #0
 80011c8:	42b5      	cmp	r5, r6
 80011ca:	da07      	bge.n	80011dc <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 80011cc:	f3af 8000 	nop.w
 80011d0:	4621      	mov	r1, r4
 80011d2:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80011d8:	460c      	mov	r4, r1
 80011da:	e7f5      	b.n	80011c8 <_read+0x8>
	}

return len;
}
 80011dc:	4630      	mov	r0, r6
 80011de:	bd70      	pop	{r4, r5, r6, pc}

080011e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	460c      	mov	r4, r1
 80011e4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	2500      	movs	r5, #0
 80011e8:	42b5      	cmp	r5, r6
 80011ea:	da05      	bge.n	80011f8 <_write+0x18>
	{
		__io_putchar(*ptr++);
 80011ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80011f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f4:	3501      	adds	r5, #1
 80011f6:	e7f7      	b.n	80011e8 <_write+0x8>
	}
	return len;
}
 80011f8:	4630      	mov	r0, r6
 80011fa:	bd70      	pop	{r4, r5, r6, pc}

080011fc <_sbrk>:

caddr_t _sbrk(int incr)
{
 80011fc:	b508      	push	{r3, lr}
 80011fe:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <_sbrk+0x34>)
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	b142      	cbz	r2, 8001218 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <_sbrk+0x34>)
 8001208:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800120a:	4403      	add	r3, r0
 800120c:	466a      	mov	r2, sp
 800120e:	4293      	cmp	r3, r2
 8001210:	d806      	bhi.n	8001220 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <_sbrk+0x34>)
 8001214:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001216:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x34>)
 800121a:	4906      	ldr	r1, [pc, #24]	; (8001234 <_sbrk+0x38>)
 800121c:	6011      	str	r1, [r2, #0]
 800121e:	e7f2      	b.n	8001206 <_sbrk+0xa>
		errno = ENOMEM;
 8001220:	f002 fb54 	bl	80038cc <__errno>
 8001224:	230c      	movs	r3, #12
 8001226:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	e7f3      	b.n	8001216 <_sbrk+0x1a>
 800122e:	bf00      	nop
 8001230:	20000204 	.word	0x20000204
 8001234:	200010c0 	.word	0x200010c0

08001238 <_close>:

int _close(int file)
{
	return -1;
}
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	4770      	bx	lr

0800123e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800123e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001242:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001244:	2000      	movs	r0, #0
 8001246:	4770      	bx	lr

08001248 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001248:	2001      	movs	r0, #1
 800124a:	4770      	bx	lr

0800124c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800124c:	2000      	movs	r0, #0
 800124e:	4770      	bx	lr

08001250 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	490f      	ldr	r1, [pc, #60]	; (8001290 <SystemInit+0x40>)
 8001252:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001256:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <SystemInit+0x44>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001268:	2000      	movs	r0, #0
 800126a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001272:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001276:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001284:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001286:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800128c:	608b      	str	r3, [r1, #8]
#endif
}
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	40021000 	.word	0x40021000

08001298 <checkWifiEvent>:


int checkWifiEvent(uint8_t * input, uint8_t *event, int size){

	int i=0;
	for(i=0;i<size;i++){
 8001298:	2300      	movs	r3, #0
 800129a:	4293      	cmp	r3, r2
 800129c:	da0c      	bge.n	80012b8 <checkWifiEvent+0x20>
int checkWifiEvent(uint8_t * input, uint8_t *event, int size){
 800129e:	b430      	push	{r4, r5}
    if(input[i]!=event[i]){
 80012a0:	5cc5      	ldrb	r5, [r0, r3]
 80012a2:	5ccc      	ldrb	r4, [r1, r3]
 80012a4:	42a5      	cmp	r5, r4
 80012a6:	d105      	bne.n	80012b4 <checkWifiEvent+0x1c>
	for(i=0;i<size;i++){
 80012a8:	3301      	adds	r3, #1
 80012aa:	4293      	cmp	r3, r2
 80012ac:	dbf8      	blt.n	80012a0 <checkWifiEvent+0x8>
    	return 0;
    }


	}
	return 1;
 80012ae:	2001      	movs	r0, #1

}
 80012b0:	bc30      	pop	{r4, r5}
 80012b2:	4770      	bx	lr
    	return 0;
 80012b4:	2000      	movs	r0, #0
 80012b6:	e7fb      	b.n	80012b0 <checkWifiEvent+0x18>
	return 1;
 80012b8:	2001      	movs	r0, #1
}
 80012ba:	4770      	bx	lr

080012bc <getWifiModuleReady>:


int getWifiModuleReady(){
 80012bc:	b510      	push	{r4, lr}
 80012be:	b082      	sub	sp, #8

  while(!flagData);
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <getWifiModuleReady+0x74>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0fb      	beq.n	80012c0 <getWifiModuleReady+0x4>
  flagData=0;
 80012c8:	2400      	movs	r4, #0
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <getWifiModuleReady+0x74>)
 80012cc:	601c      	str	r4, [r3, #0]
  memset(buffer,0,sizeof(buffer));
 80012ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d2:	4621      	mov	r1, r4
 80012d4:	4817      	ldr	r0, [pc, #92]	; (8001334 <getWifiModuleReady+0x78>)
 80012d6:	f002 fb31 	bl	800393c <memset>
  HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_RESET);
 80012da:	4622      	mov	r2, r4
 80012dc:	2101      	movs	r1, #1
 80012de:	4816      	ldr	r0, [pc, #88]	; (8001338 <getWifiModuleReady+0x7c>)
 80012e0:	f000 fc11 	bl	8001b06 <HAL_GPIO_WritePin>
  do{

	  HAL_SPI_TransmitReceive(&hspi3,dummy,buffer+myIndex,2,1);
 80012e4:	4c12      	ldr	r4, [pc, #72]	; (8001330 <getWifiModuleReady+0x74>)
 80012e6:	6862      	ldr	r2, [r4, #4]
 80012e8:	2301      	movs	r3, #1
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2302      	movs	r3, #2
 80012ee:	4911      	ldr	r1, [pc, #68]	; (8001334 <getWifiModuleReady+0x78>)
 80012f0:	440a      	add	r2, r1
 80012f2:	4912      	ldr	r1, [pc, #72]	; (800133c <getWifiModuleReady+0x80>)
 80012f4:	4812      	ldr	r0, [pc, #72]	; (8001340 <getWifiModuleReady+0x84>)
 80012f6:	f002 f94f 	bl	8003598 <HAL_SPI_TransmitReceive>
	  myIndex+=2;
 80012fa:	6863      	ldr	r3, [r4, #4]
 80012fc:	3302      	adds	r3, #2
 80012fe:	6063      	str	r3, [r4, #4]

  }while(HAL_GPIO_ReadPin(WIFI_INT_GPIO_Port,WIFI_INT_Pin)==1);
 8001300:	2102      	movs	r1, #2
 8001302:	480d      	ldr	r0, [pc, #52]	; (8001338 <getWifiModuleReady+0x7c>)
 8001304:	f000 fbf8 	bl	8001af8 <HAL_GPIO_ReadPin>
 8001308:	2801      	cmp	r0, #1
 800130a:	d0eb      	beq.n	80012e4 <getWifiModuleReady+0x28>
  HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	4611      	mov	r1, r2
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <getWifiModuleReady+0x7c>)
 8001312:	f000 fbf8 	bl	8001b06 <HAL_GPIO_WritePin>

  if(checkWifiEvent(buffer,ready,sizeof(ready))){
 8001316:	2206      	movs	r2, #6
 8001318:	490a      	ldr	r1, [pc, #40]	; (8001344 <getWifiModuleReady+0x88>)
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <getWifiModuleReady+0x78>)
 800131c:	f7ff ffbc 	bl	8001298 <checkWifiEvent>
 8001320:	b918      	cbnz	r0, 800132a <getWifiModuleReady+0x6e>
	  return 1;
  }
  myIndex=0;
 8001322:	2200      	movs	r2, #0
 8001324:	6062      	str	r2, [r4, #4]
  return 0;

}
 8001326:	b002      	add	sp, #8
 8001328:	bd10      	pop	{r4, pc}
	  return 1;
 800132a:	2001      	movs	r0, #1
 800132c:	e7fb      	b.n	8001326 <getWifiModuleReady+0x6a>
 800132e:	bf00      	nop
 8001330:	2000020c 	.word	0x2000020c
 8001334:	20000cc4 	.word	0x20000cc4
 8001338:	48001000 	.word	0x48001000
 800133c:	20000004 	.word	0x20000004
 8001340:	2000028c 	.word	0x2000028c
 8001344:	20000008 	.word	0x20000008

08001348 <littleToBig>:


void littleToBig(uint8_t *input, uint8_t *output, int size){

	int temp,i;
	for(i=0;i<size;i+=2){
 8001348:	2300      	movs	r3, #0
 800134a:	4293      	cmp	r3, r2
 800134c:	da0a      	bge.n	8001364 <littleToBig+0x1c>
void littleToBig(uint8_t *input, uint8_t *output, int size){
 800134e:	b430      	push	{r4, r5}
		output[i]=input[i+1];
 8001350:	1c5c      	adds	r4, r3, #1
 8001352:	5d05      	ldrb	r5, [r0, r4]
 8001354:	54cd      	strb	r5, [r1, r3]
		output[i+1]=input[i];
 8001356:	5cc5      	ldrb	r5, [r0, r3]
 8001358:	550d      	strb	r5, [r1, r4]
	for(i=0;i<size;i+=2){
 800135a:	3302      	adds	r3, #2
 800135c:	4293      	cmp	r3, r2
 800135e:	dbf7      	blt.n	8001350 <littleToBig+0x8>

	}


}
 8001360:	bc30      	pop	{r4, r5}
 8001362:	4770      	bx	lr
 8001364:	4770      	bx	lr

08001366 <bigToLittle>:

void bigToLittle(uint8_t *input, uint8_t *output, int size){

	int temp,i;
	for(i=0;i<size;i+=2){
 8001366:	2300      	movs	r3, #0
 8001368:	4293      	cmp	r3, r2
 800136a:	da0a      	bge.n	8001382 <bigToLittle+0x1c>
void bigToLittle(uint8_t *input, uint8_t *output, int size){
 800136c:	b430      	push	{r4, r5}
		output[i]=input[i+1];
 800136e:	1c5c      	adds	r4, r3, #1
 8001370:	5d05      	ldrb	r5, [r0, r4]
 8001372:	54cd      	strb	r5, [r1, r3]
		output[i+1]=input[i];
 8001374:	5cc5      	ldrb	r5, [r0, r3]
 8001376:	550d      	strb	r5, [r1, r4]
	for(i=0;i<size;i+=2){
 8001378:	3302      	adds	r3, #2
 800137a:	4293      	cmp	r3, r2
 800137c:	dbf7      	blt.n	800136e <bigToLittle+0x8>

	}


}
 800137e:	bc30      	pop	{r4, r5}
 8001380:	4770      	bx	lr
 8001382:	4770      	bx	lr

08001384 <sendCommand>:
void sendCommand(uint8_t *command,int size){
 8001384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	4607      	mov	r7, r0
 800138c:	460d      	mov	r5, r1
	while(!flagData);
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <sendCommand+0xf8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0fb      	beq.n	800138e <sendCommand+0xa>
	flagData=0;
 8001396:	4e39      	ldr	r6, [pc, #228]	; (800147c <sendCommand+0xf8>)
 8001398:	2400      	movs	r4, #0
 800139a:	6034      	str	r4, [r6, #0]
    myIndex=0;
 800139c:	6074      	str	r4, [r6, #4]
	memset(buffer,0,sizeof(buffer));
 800139e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013a2:	4621      	mov	r1, r4
 80013a4:	4836      	ldr	r0, [pc, #216]	; (8001480 <sendCommand+0xfc>)
 80013a6:	f002 fac9 	bl	800393c <memset>
	memset(commandbuffer,0x0a,sizeof(commandbuffer));
 80013aa:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8001488 <sendCommand+0x104>
 80013ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013b2:	210a      	movs	r1, #10
 80013b4:	4640      	mov	r0, r8
 80013b6:	f002 fac1 	bl	800393c <memset>
	bigToLittle(command,commandbuffer,size);
 80013ba:	462a      	mov	r2, r5
 80013bc:	4641      	mov	r1, r8
 80013be:	4638      	mov	r0, r7
 80013c0:	f7ff ffd1 	bl	8001366 <bigToLittle>
	myIndex=0;
 80013c4:	6074      	str	r4, [r6, #4]
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_RESET);
 80013c6:	4622      	mov	r2, r4
 80013c8:	2101      	movs	r1, #1
 80013ca:	482e      	ldr	r0, [pc, #184]	; (8001484 <sendCommand+0x100>)
 80013cc:	f000 fb9b 	bl	8001b06 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3,commandbuffer+myIndex,buffer+myIndex,2,1);
 80013d0:	4c2a      	ldr	r4, [pc, #168]	; (800147c <sendCommand+0xf8>)
 80013d2:	6860      	ldr	r0, [r4, #4]
 80013d4:	2301      	movs	r3, #1
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2302      	movs	r3, #2
 80013da:	4a29      	ldr	r2, [pc, #164]	; (8001480 <sendCommand+0xfc>)
 80013dc:	4402      	add	r2, r0
 80013de:	492a      	ldr	r1, [pc, #168]	; (8001488 <sendCommand+0x104>)
 80013e0:	4401      	add	r1, r0
 80013e2:	482a      	ldr	r0, [pc, #168]	; (800148c <sendCommand+0x108>)
 80013e4:	f002 f8d8 	bl	8003598 <HAL_SPI_TransmitReceive>
	myIndex+=2;
 80013e8:	6863      	ldr	r3, [r4, #4]
 80013ea:	3302      	adds	r3, #2
 80013ec:	6063      	str	r3, [r4, #4]
	}while(myIndex<size);
 80013ee:	42ab      	cmp	r3, r5
 80013f0:	dbee      	blt.n	80013d0 <sendCommand+0x4c>
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	4611      	mov	r1, r2
 80013f6:	4823      	ldr	r0, [pc, #140]	; (8001484 <sendCommand+0x100>)
 80013f8:	f000 fb85 	bl	8001b06 <HAL_GPIO_WritePin>
	while(!flagData);
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <sendCommand+0xf8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0fb      	beq.n	80013fc <sendCommand+0x78>
	flagData=0;
 8001404:	4b1d      	ldr	r3, [pc, #116]	; (800147c <sendCommand+0xf8>)
 8001406:	2400      	movs	r4, #0
 8001408:	601c      	str	r4, [r3, #0]
	myIndex=0;
 800140a:	605c      	str	r4, [r3, #4]
	memset(buffer,0,sizeof(buffer));
 800140c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001410:	4621      	mov	r1, r4
 8001412:	481b      	ldr	r0, [pc, #108]	; (8001480 <sendCommand+0xfc>)
 8001414:	f002 fa92 	bl	800393c <memset>
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_RESET);
 8001418:	4622      	mov	r2, r4
 800141a:	2101      	movs	r1, #1
 800141c:	4819      	ldr	r0, [pc, #100]	; (8001484 <sendCommand+0x100>)
 800141e:	f000 fb72 	bl	8001b06 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3,dummy,buffer+myIndex,2,1);
 8001422:	4c16      	ldr	r4, [pc, #88]	; (800147c <sendCommand+0xf8>)
 8001424:	6862      	ldr	r2, [r4, #4]
 8001426:	2301      	movs	r3, #1
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2302      	movs	r3, #2
 800142c:	4914      	ldr	r1, [pc, #80]	; (8001480 <sendCommand+0xfc>)
 800142e:	440a      	add	r2, r1
 8001430:	4917      	ldr	r1, [pc, #92]	; (8001490 <sendCommand+0x10c>)
 8001432:	4816      	ldr	r0, [pc, #88]	; (800148c <sendCommand+0x108>)
 8001434:	f002 f8b0 	bl	8003598 <HAL_SPI_TransmitReceive>
	myIndex+=2;
 8001438:	6863      	ldr	r3, [r4, #4]
 800143a:	3302      	adds	r3, #2
 800143c:	6063      	str	r3, [r4, #4]
	}while(HAL_GPIO_ReadPin(WIFI_INT_GPIO_Port,WIFI_INT_Pin)==1);
 800143e:	2102      	movs	r1, #2
 8001440:	4810      	ldr	r0, [pc, #64]	; (8001484 <sendCommand+0x100>)
 8001442:	f000 fb59 	bl	8001af8 <HAL_GPIO_ReadPin>
 8001446:	2801      	cmp	r0, #1
 8001448:	d0eb      	beq.n	8001422 <sendCommand+0x9e>
	HAL_GPIO_WritePin(WIFI_CS_GPIO_Port,WIFI_CS_Pin,GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	4611      	mov	r1, r2
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <sendCommand+0x100>)
 8001450:	f000 fb59 	bl	8001b06 <HAL_GPIO_WritePin>
	memset(bufferBig,0,sizeof(bufferBig));
 8001454:	4c0f      	ldr	r4, [pc, #60]	; (8001494 <sendCommand+0x110>)
 8001456:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800145a:	462a      	mov	r2, r5
 800145c:	2100      	movs	r1, #0
 800145e:	4620      	mov	r0, r4
 8001460:	f002 fa6c 	bl	800393c <memset>
	littleToBig(buffer,bufferBig,sizeof(buffer));
 8001464:	462a      	mov	r2, r5
 8001466:	4621      	mov	r1, r4
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <sendCommand+0xfc>)
 800146a:	f7ff ff6d 	bl	8001348 <littleToBig>
	HAL_Delay(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f000 f9de 	bl	8001830 <HAL_Delay>
}
 8001474:	b002      	add	sp, #8
 8001476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800147a:	bf00      	nop
 800147c:	2000020c 	.word	0x2000020c
 8001480:	20000cc4 	.word	0x20000cc4
 8001484:	48001000 	.word	0x48001000
 8001488:	200006e8 	.word	0x200006e8
 800148c:	2000028c 	.word	0x2000028c
 8001490:	20000004 	.word	0x20000004
 8001494:	20000300 	.word	0x20000300

08001498 <setSensor>:

void setSensor(uint8_t *name){
 8001498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149a:	4605      	mov	r5, r0
	uint8_t value[50];
	if(indexsensor!=0){
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <setSensor+0xa8>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	b37b      	cbz	r3, 8001502 <setSensor+0x6a>
	strcat(payloadsensors,"} ] },{ \"sensor\":");
 80014a2:	4c28      	ldr	r4, [pc, #160]	; (8001544 <setSensor+0xac>)
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7fe fe93 	bl	80001d0 <strlen>
 80014aa:	4684      	mov	ip, r0
 80014ac:	1907      	adds	r7, r0, r4
 80014ae:	4e26      	ldr	r6, [pc, #152]	; (8001548 <setSensor+0xb0>)
 80014b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014b2:	f84c 0004 	str.w	r0, [ip, r4]
 80014b6:	6079      	str	r1, [r7, #4]
 80014b8:	60ba      	str	r2, [r7, #8]
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	8833      	ldrh	r3, [r6, #0]
 80014be:	823b      	strh	r3, [r7, #16]
	strcat(payloadsensors,"\"");
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7fe fe85 	bl	80001d0 <strlen>
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <setSensor+0xb4>)
 80014c8:	881e      	ldrh	r6, [r3, #0]
 80014ca:	5226      	strh	r6, [r4, r0]
	strcat(payloadsensors,name);
 80014cc:	4629      	mov	r1, r5
 80014ce:	4620      	mov	r0, r4
 80014d0:	f002 fec6 	bl	8004260 <strcat>
	strcat(payloadsensors,"\"");
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7fe fe7b 	bl	80001d0 <strlen>
 80014da:	5226      	strh	r6, [r4, r0]
	strcat(payloadsensors,", \"data\": [ {");
 80014dc:	4620      	mov	r0, r4
 80014de:	f7fe fe77 	bl	80001d0 <strlen>
 80014e2:	4605      	mov	r5, r0
 80014e4:	1906      	adds	r6, r0, r4
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <setSensor+0xb8>)
 80014e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014ea:	5128      	str	r0, [r5, r4]
 80014ec:	6071      	str	r1, [r6, #4]
 80014ee:	60b2      	str	r2, [r6, #8]
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	81b3      	strh	r3, [r6, #12]
	strcpy(payloadsensors,"\"");
	strcat(payloadsensors,name);
	strcat(payloadsensors,"\"");
	strcat(payloadsensors,", \"data\": [ {");
	}
	indexsensor++;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <setSensor+0xa8>)
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	3201      	adds	r2, #1
 80014fa:	609a      	str	r2, [r3, #8]
	indexdata=0;
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]

}
 8001500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	memset(payloadsensors,0,sizeof(payloadsensors));
 8001502:	4c10      	ldr	r4, [pc, #64]	; (8001544 <setSensor+0xac>)
 8001504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001508:	2100      	movs	r1, #0
 800150a:	4620      	mov	r0, r4
 800150c:	f002 fa16 	bl	800393c <memset>
	strcpy(payloadsensors,"\"");
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <setSensor+0xb4>)
 8001512:	881e      	ldrh	r6, [r3, #0]
 8001514:	8026      	strh	r6, [r4, #0]
	strcat(payloadsensors,name);
 8001516:	4629      	mov	r1, r5
 8001518:	4620      	mov	r0, r4
 800151a:	f002 fea1 	bl	8004260 <strcat>
	strcat(payloadsensors,"\"");
 800151e:	4620      	mov	r0, r4
 8001520:	f7fe fe56 	bl	80001d0 <strlen>
 8001524:	5226      	strh	r6, [r4, r0]
	strcat(payloadsensors,", \"data\": [ {");
 8001526:	4620      	mov	r0, r4
 8001528:	f7fe fe52 	bl	80001d0 <strlen>
 800152c:	4605      	mov	r5, r0
 800152e:	1906      	adds	r6, r0, r4
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <setSensor+0xb8>)
 8001532:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001534:	5128      	str	r0, [r5, r4]
 8001536:	6071      	str	r1, [r6, #4]
 8001538:	60b2      	str	r2, [r6, #8]
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	81b3      	strh	r3, [r6, #12]
 800153e:	e7d9      	b.n	80014f4 <setSensor+0x5c>
 8001540:	2000020c 	.word	0x2000020c
 8001544:	200008dc 	.word	0x200008dc
 8001548:	080066f4 	.word	0x080066f4
 800154c:	08006708 	.word	0x08006708
 8001550:	0800670c 	.word	0x0800670c

08001554 <setDataInt>:

void setDataInt(uint8_t *payload, int data){
 8001554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001556:	b085      	sub	sp, #20
 8001558:	4606      	mov	r6, r0
 800155a:	460d      	mov	r5, r1
	uint8_t value[10];
	if(indexdata!=0){
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <setDataInt+0xa4>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	b353      	cbz	r3, 80015b8 <setDataInt+0x64>
		sprintf(value,",");
 8001562:	232c      	movs	r3, #44	; 0x2c
 8001564:	f8ad 3004 	strh.w	r3, [sp, #4]
		strcat(payloadsensors,value);
 8001568:	4c24      	ldr	r4, [pc, #144]	; (80015fc <setDataInt+0xa8>)
 800156a:	a901      	add	r1, sp, #4
 800156c:	4620      	mov	r0, r4
 800156e:	f002 fe77 	bl	8004260 <strcat>
		strcat(payloadsensors,"\"");
 8001572:	4620      	mov	r0, r4
 8001574:	f7fe fe2c 	bl	80001d0 <strlen>
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <setDataInt+0xac>)
 800157a:	881f      	ldrh	r7, [r3, #0]
 800157c:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,payload);
 800157e:	4631      	mov	r1, r6
 8001580:	4620      	mov	r0, r4
 8001582:	f002 fe6d 	bl	8004260 <strcat>
		strcat(payloadsensors,"\"");
 8001586:	4620      	mov	r0, r4
 8001588:	f7fe fe22 	bl	80001d0 <strlen>
 800158c:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,":");
 800158e:	4620      	mov	r0, r4
 8001590:	f7fe fe1e 	bl	80001d0 <strlen>
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <setDataInt+0xb0>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	5223      	strh	r3, [r4, r0]
		sprintf(value,"\"%d\"",data);
 800159a:	462a      	mov	r2, r5
 800159c:	491a      	ldr	r1, [pc, #104]	; (8001608 <setDataInt+0xb4>)
 800159e:	a801      	add	r0, sp, #4
 80015a0:	f002 fe3e 	bl	8004220 <siprintf>
		strcat(payloadsensors,value);
 80015a4:	a901      	add	r1, sp, #4
 80015a6:	4620      	mov	r0, r4
 80015a8:	f002 fe5a 	bl	8004260 <strcat>
		strcat(payloadsensors,":");
		sprintf(value,"\"%d\"",data);
		strcat(payloadsensors,value);

	}
	indexdata++;
 80015ac:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <setDataInt+0xa4>)
 80015ae:	68d3      	ldr	r3, [r2, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60d3      	str	r3, [r2, #12]


}
 80015b4:	b005      	add	sp, #20
 80015b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(payloadsensors,"\"");
 80015b8:	4c10      	ldr	r4, [pc, #64]	; (80015fc <setDataInt+0xa8>)
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7fe fe08 	bl	80001d0 <strlen>
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <setDataInt+0xac>)
 80015c2:	881f      	ldrh	r7, [r3, #0]
 80015c4:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,payload);
 80015c6:	4631      	mov	r1, r6
 80015c8:	4620      	mov	r0, r4
 80015ca:	f002 fe49 	bl	8004260 <strcat>
		strcat(payloadsensors,"\"");
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7fe fdfe 	bl	80001d0 <strlen>
 80015d4:	5227      	strh	r7, [r4, r0]
		strcat(payloadsensors,":");
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7fe fdfa 	bl	80001d0 <strlen>
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <setDataInt+0xb0>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	5223      	strh	r3, [r4, r0]
		sprintf(value,"\"%d\"",data);
 80015e2:	462a      	mov	r2, r5
 80015e4:	4908      	ldr	r1, [pc, #32]	; (8001608 <setDataInt+0xb4>)
 80015e6:	a801      	add	r0, sp, #4
 80015e8:	f002 fe1a 	bl	8004220 <siprintf>
		strcat(payloadsensors,value);
 80015ec:	a901      	add	r1, sp, #4
 80015ee:	4620      	mov	r0, r4
 80015f0:	f002 fe36 	bl	8004260 <strcat>
 80015f4:	e7da      	b.n	80015ac <setDataInt+0x58>
 80015f6:	bf00      	nop
 80015f8:	2000020c 	.word	0x2000020c
 80015fc:	200008dc 	.word	0x200008dc
 8001600:	08006708 	.word	0x08006708
 8001604:	080067c0 	.word	0x080067c0
 8001608:	0800671c 	.word	0x0800671c

0800160c <sendData>:
	indexdata++;


}

void sendData(){
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	f2ad 7de4 	subw	sp, sp, #2020	; 0x7e4
	 sendCommand((uint8_t*)STARTTCPcommand, strlen(STARTTCPcommand));
 8001612:	2106      	movs	r1, #6
 8001614:	4843      	ldr	r0, [pc, #268]	; (8001724 <sendData+0x118>)
 8001616:	f7ff feb5 	bl	8001384 <sendCommand>


	 int payloadsize=strlen(POSTmid)+strlen(payloadsensors)+strlen(POSTclose)-4;
 800161a:	4843      	ldr	r0, [pc, #268]	; (8001728 <sendData+0x11c>)
 800161c:	f7fe fdd8 	bl	80001d0 <strlen>
 8001620:	f100 044f 	add.w	r4, r0, #79	; 0x4f
	  uint8_t DATAcommand[1000];
	  uint8_t DATAsend[1000];
	  memset(DATAcommand,0,sizeof(DATAcommand));
 8001624:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001628:	462a      	mov	r2, r5
 800162a:	2100      	movs	r1, #0
 800162c:	a8fe      	add	r0, sp, #1016	; 0x3f8
 800162e:	f002 f985 	bl	800393c <memset>
	  memset(DATAsend,0,sizeof(DATAsend));
 8001632:	462a      	mov	r2, r5
 8001634:	2100      	movs	r1, #0
 8001636:	a804      	add	r0, sp, #16
 8001638:	f002 f980 	bl	800393c <memset>
	  strcpy(DATAcommand,POSTinit);
 800163c:	2262      	movs	r2, #98	; 0x62
 800163e:	493b      	ldr	r1, [pc, #236]	; (800172c <sendData+0x120>)
 8001640:	a8fe      	add	r0, sp, #1016	; 0x3f8
 8001642:	f002 f96d 	bl	8003920 <memcpy>
	  uint8_t data[10];
	  memset(data,0,sizeof(data));
 8001646:	2300      	movs	r3, #0
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	f8ad 300c 	strh.w	r3, [sp, #12]
	  sprintf(data,"%d",payloadsize);
 8001650:	4622      	mov	r2, r4
 8001652:	4937      	ldr	r1, [pc, #220]	; (8001730 <sendData+0x124>)
 8001654:	a801      	add	r0, sp, #4
 8001656:	f002 fde3 	bl	8004220 <siprintf>
	  strcat(DATAcommand,data);
 800165a:	a901      	add	r1, sp, #4
 800165c:	a8fe      	add	r0, sp, #1016	; 0x3f8
 800165e:	f002 fdff 	bl	8004260 <strcat>
	  strcat(DATAcommand,POSTmid);
 8001662:	a8fe      	add	r0, sp, #1016	; 0x3f8
 8001664:	f7fe fdb4 	bl	80001d0 <strlen>
 8001668:	4d32      	ldr	r5, [pc, #200]	; (8001734 <sendData+0x128>)
 800166a:	abfe      	add	r3, sp, #1016	; 0x3f8
 800166c:	181c      	adds	r4, r3, r0
 800166e:	f105 0720 	add.w	r7, r5, #32
 8001672:	462e      	mov	r6, r5
 8001674:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001676:	6020      	str	r0, [r4, #0]
 8001678:	6061      	str	r1, [r4, #4]
 800167a:	60a2      	str	r2, [r4, #8]
 800167c:	60e3      	str	r3, [r4, #12]
 800167e:	4635      	mov	r5, r6
 8001680:	3410      	adds	r4, #16
 8001682:	42be      	cmp	r6, r7
 8001684:	d1f5      	bne.n	8001672 <sendData+0x66>
 8001686:	6830      	ldr	r0, [r6, #0]
 8001688:	6020      	str	r0, [r4, #0]
 800168a:	88b3      	ldrh	r3, [r6, #4]
 800168c:	80a3      	strh	r3, [r4, #4]
	  strcat(DATAcommand,payloadsensors);
 800168e:	4926      	ldr	r1, [pc, #152]	; (8001728 <sendData+0x11c>)
 8001690:	a8fe      	add	r0, sp, #1016	; 0x3f8
 8001692:	f002 fde5 	bl	8004260 <strcat>
	  strcat(DATAcommand,POSTclose);
 8001696:	a8fe      	add	r0, sp, #1016	; 0x3f8
 8001698:	f7fe fd9a 	bl	80001d0 <strlen>
 800169c:	4d26      	ldr	r5, [pc, #152]	; (8001738 <sendData+0x12c>)
 800169e:	abfe      	add	r3, sp, #1016	; 0x3f8
 80016a0:	181c      	adds	r4, r3, r0
 80016a2:	f105 0720 	add.w	r7, r5, #32
 80016a6:	462e      	mov	r6, r5
 80016a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016aa:	6020      	str	r0, [r4, #0]
 80016ac:	6061      	str	r1, [r4, #4]
 80016ae:	60a2      	str	r2, [r4, #8]
 80016b0:	60e3      	str	r3, [r4, #12]
 80016b2:	4635      	mov	r5, r6
 80016b4:	3410      	adds	r4, #16
 80016b6:	42be      	cmp	r6, r7
 80016b8:	d1f5      	bne.n	80016a6 <sendData+0x9a>
 80016ba:	4633      	mov	r3, r6
 80016bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80016be:	6020      	str	r0, [r4, #0]
 80016c0:	6061      	str	r1, [r4, #4]
 80016c2:	60a2      	str	r2, [r4, #8]
 80016c4:	881a      	ldrh	r2, [r3, #0]
 80016c6:	789b      	ldrb	r3, [r3, #2]
 80016c8:	81a2      	strh	r2, [r4, #12]
 80016ca:	73a3      	strb	r3, [r4, #14]
	  strcpy(DATAsend,TCPSENDcommand);
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <sendData+0x130>)
 80016ce:	9304      	str	r3, [sp, #16]
	  memset(data,0,sizeof(data));
 80016d0:	2400      	movs	r4, #0
 80016d2:	9401      	str	r4, [sp, #4]
 80016d4:	9402      	str	r4, [sp, #8]
 80016d6:	f8ad 400c 	strh.w	r4, [sp, #12]
	  sprintf(data,"%d",strlen(DATAcommand)-1);
 80016da:	a8fe      	add	r0, sp, #1016	; 0x3f8
 80016dc:	f7fe fd78 	bl	80001d0 <strlen>
 80016e0:	1e42      	subs	r2, r0, #1
 80016e2:	4913      	ldr	r1, [pc, #76]	; (8001730 <sendData+0x124>)
 80016e4:	a801      	add	r0, sp, #4
 80016e6:	f002 fd9b 	bl	8004220 <siprintf>
	  strcat(DATAsend,data);
 80016ea:	a901      	add	r1, sp, #4
 80016ec:	a804      	add	r0, sp, #16
 80016ee:	f002 fdb7 	bl	8004260 <strcat>
	  strcat(DATAsend,DATAcommand);
 80016f2:	a9fe      	add	r1, sp, #1016	; 0x3f8
 80016f4:	a804      	add	r0, sp, #16
 80016f6:	f002 fdb3 	bl	8004260 <strcat>
	  sendCommand(DATAsend,strlen(DATAsend));
 80016fa:	a804      	add	r0, sp, #16
 80016fc:	f7fe fd68 	bl	80001d0 <strlen>
 8001700:	4601      	mov	r1, r0
 8001702:	a804      	add	r0, sp, #16
 8001704:	f7ff fe3e 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*)CLOSETCPcommand, strlen(CLOSETCPcommand));
 8001708:	2106      	movs	r1, #6
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <sendData+0x134>)
 800170c:	f7ff fe3a 	bl	8001384 <sendCommand>
	  HAL_Delay(TIME_INTERVAL);
 8001710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001714:	f000 f88c 	bl	8001830 <HAL_Delay>
	  indexdata=0;
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <sendData+0x138>)
 800171a:	60dc      	str	r4, [r3, #12]
	  indexsensor=0;
 800171c:	609c      	str	r4, [r3, #8]
}
 800171e:	f20d 7de4 	addw	sp, sp, #2020	; 0x7e4
 8001722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001724:	0800672c 	.word	0x0800672c
 8001728:	200008dc 	.word	0x200008dc
 800172c:	08006734 	.word	0x08006734
 8001730:	08006798 	.word	0x08006798
 8001734:	0800679c 	.word	0x0800679c
 8001738:	080067c4 	.word	0x080067c4
 800173c:	003d3353 	.word	0x003d3353
 8001740:	080067f4 	.word	0x080067f4
 8001744:	2000020c 	.word	0x2000020c

08001748 <startWifi>:

void startWifi(){
 8001748:	b508      	push	{r3, lr}
	  //let's set the wifi settings
	  sendCommand((uint8_t*) SSIDcommand,strlen(SSIDcommand));
 800174a:	2110      	movs	r1, #16
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <startWifi+0x3c>)
 800174e:	f7ff fe19 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*) PSWcommand,strlen(PSWcommand));
 8001752:	210d      	movs	r1, #13
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <startWifi+0x40>)
 8001756:	f7ff fe15 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*) SECcommad,strlen(SECcommad));
 800175a:	2106      	movs	r1, #6
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <startWifi+0x44>)
 800175e:	f7ff fe11 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*) CONNECTcommand,strlen(CONNECTcommand));
 8001762:	2104      	movs	r1, #4
 8001764:	480a      	ldr	r0, [pc, #40]	; (8001790 <startWifi+0x48>)
 8001766:	f7ff fe0d 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*)TCPcommand,strlen(TCPcommand));
 800176a:	2106      	movs	r1, #6
 800176c:	4809      	ldr	r0, [pc, #36]	; (8001794 <startWifi+0x4c>)
 800176e:	f7ff fe09 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*)IPcommand, strlen(IPcommand));
 8001772:	2111      	movs	r1, #17
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <startWifi+0x50>)
 8001776:	f7ff fe05 	bl	8001384 <sendCommand>
	  sendCommand((uint8_t*)PORTcommand, strlen(PORTcommand));
 800177a:	210a      	movs	r1, #10
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <startWifi+0x54>)
 800177e:	f7ff fe01 	bl	8001384 <sendCommand>
}
 8001782:	bd08      	pop	{r3, pc}
 8001784:	080067fc 	.word	0x080067fc
 8001788:	08006810 	.word	0x08006810
 800178c:	08006820 	.word	0x08006820
 8001790:	08006828 	.word	0x08006828
 8001794:	08006830 	.word	0x08006830
 8001798:	08006838 	.word	0x08006838
 800179c:	0800684c 	.word	0x0800684c

080017a0 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_InitTick+0x44>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b90b      	cbnz	r3, 80017aa <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80017a8:	4770      	bx	lr
{
 80017aa:	b510      	push	{r4, lr}
 80017ac:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b6:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <HAL_InitTick+0x48>)
 80017b8:	6810      	ldr	r0, [r2, #0]
 80017ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80017be:	f000 f89f 	bl	8001900 <HAL_SYSTICK_Config>
 80017c2:	b968      	cbnz	r0, 80017e0 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c4:	2c0f      	cmp	r4, #15
 80017c6:	d901      	bls.n	80017cc <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80017c8:	2001      	movs	r0, #1
 80017ca:	e00a      	b.n	80017e2 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	4621      	mov	r1, r4
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f852 	bl	800187c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <HAL_InitTick+0x44>)
 80017da:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017dc:	2000      	movs	r0, #0
 80017de:	e000      	b.n	80017e2 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
}
 80017e2:	bd10      	pop	{r4, pc}
 80017e4:	20000010 	.word	0x20000010
 80017e8:	20000000 	.word	0x20000000

080017ec <HAL_Init>:
{
 80017ec:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ee:	2003      	movs	r0, #3
 80017f0:	f000 f832 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff ffd3 	bl	80017a0 <HAL_InitTick>
 80017fa:	b110      	cbz	r0, 8001802 <HAL_Init+0x16>
    status = HAL_ERROR;
 80017fc:	2401      	movs	r4, #1
}
 80017fe:	4620      	mov	r0, r4
 8001800:	bd10      	pop	{r4, pc}
 8001802:	4604      	mov	r4, r0
    HAL_MspInit();
 8001804:	f7ff fc2e 	bl	8001064 <HAL_MspInit>
 8001808:	e7f9      	b.n	80017fe <HAL_Init+0x12>
	...

0800180c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_IncTick+0x10>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4a03      	ldr	r2, [pc, #12]	; (8001820 <HAL_IncTick+0x14>)
 8001812:	6811      	ldr	r1, [r2, #0]
 8001814:	440b      	add	r3, r1
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000010 	.word	0x20000010
 8001820:	200010ac 	.word	0x200010ac

08001824 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001824:	4b01      	ldr	r3, [pc, #4]	; (800182c <HAL_GetTick+0x8>)
 8001826:	6818      	ldr	r0, [r3, #0]
}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	200010ac 	.word	0x200010ac

08001830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001830:	b538      	push	{r3, r4, r5, lr}
 8001832:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff fff6 	bl	8001824 <HAL_GetTick>
 8001838:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800183e:	d002      	beq.n	8001846 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HAL_Delay+0x24>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001846:	f7ff ffed 	bl	8001824 <HAL_GetTick>
 800184a:	1b40      	subs	r0, r0, r5
 800184c:	42a0      	cmp	r0, r4
 800184e:	d3fa      	bcc.n	8001846 <HAL_Delay+0x16>
  {
  }
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}
 8001852:	bf00      	nop
 8001854:	20000010 	.word	0x20000010

08001858 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800185a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001860:	041b      	lsls	r3, r3, #16
 8001862:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	0200      	lsls	r0, r0, #8
 8001866:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001874:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_NVIC_SetPriority+0x60>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001886:	f1c3 0407 	rsb	r4, r3, #7
 800188a:	2c04      	cmp	r4, #4
 800188c:	bf28      	it	cs
 800188e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001890:	1d1d      	adds	r5, r3, #4
 8001892:	2d06      	cmp	r5, #6
 8001894:	d918      	bls.n	80018c8 <HAL_NVIC_SetPriority+0x4c>
 8001896:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 35ff 	mov.w	r5, #4294967295
 800189c:	fa05 f404 	lsl.w	r4, r5, r4
 80018a0:	ea21 0104 	bic.w	r1, r1, r4
 80018a4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a6:	fa05 f303 	lsl.w	r3, r5, r3
 80018aa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80018b0:	2800      	cmp	r0, #0
 80018b2:	db0b      	blt.n	80018cc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	0109      	lsls	r1, r1, #4
 80018b6:	b2c9      	uxtb	r1, r1
 80018b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018c0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018c4:	bc30      	pop	{r4, r5}
 80018c6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c8:	2300      	movs	r3, #0
 80018ca:	e7e5      	b.n	8001898 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	f000 000f 	and.w	r0, r0, #15
 80018d0:	0109      	lsls	r1, r1, #4
 80018d2:	b2c9      	uxtb	r1, r1
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <HAL_NVIC_SetPriority+0x64>)
 80018d6:	5419      	strb	r1, [r3, r0]
 80018d8:	e7f4      	b.n	80018c4 <HAL_NVIC_SetPriority+0x48>
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00
 80018e0:	e000ed14 	.word	0xe000ed14

080018e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80018e4:	2800      	cmp	r0, #0
 80018e6:	db07      	blt.n	80018f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e8:	f000 021f 	and.w	r2, r0, #31
 80018ec:	0940      	lsrs	r0, r0, #5
 80018ee:	2301      	movs	r3, #1
 80018f0:	4093      	lsls	r3, r2
 80018f2:	4a02      	ldr	r2, [pc, #8]	; (80018fc <HAL_NVIC_EnableIRQ+0x18>)
 80018f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	3801      	subs	r0, #1
 8001902:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001906:	d20a      	bcs.n	800191e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_SYSTICK_Config+0x24>)
 800190a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_SYSTICK_Config+0x28>)
 800190e:	21f0      	movs	r1, #240	; 0xf0
 8001910:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	2000      	movs	r0, #0
 8001916:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8001930:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e03f      	b.n	80019b4 <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001934:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001936:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800193a:	f3c5 04c0 	ubfx	r4, r5, #3, #1
 800193e:	409c      	lsls	r4, r3
 8001940:	4334      	orrs	r4, r6
        GPIOx->ASCR = temp;
 8001942:	62c4      	str	r4, [r0, #44]	; 0x2c
 8001944:	e05f      	b.n	8001a06 <HAL_GPIO_Init+0xda>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001946:	2406      	movs	r4, #6
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x20>
 800194a:	2400      	movs	r4, #0
 800194c:	40b4      	lsls	r4, r6
 800194e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001950:	3502      	adds	r5, #2
 8001952:	4e65      	ldr	r6, [pc, #404]	; (8001ae8 <HAL_GPIO_Init+0x1bc>)
 8001954:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001958:	4c64      	ldr	r4, [pc, #400]	; (8001aec <HAL_GPIO_Init+0x1c0>)
 800195a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800195c:	43d4      	mvns	r4, r2
 800195e:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001962:	684f      	ldr	r7, [r1, #4]
 8001964:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001968:	d001      	beq.n	800196e <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 800196a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 800196e:	4d5f      	ldr	r5, [pc, #380]	; (8001aec <HAL_GPIO_Init+0x1c0>)
 8001970:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8001972:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001974:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001978:	684f      	ldr	r7, [r1, #4]
 800197a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800197e:	d001      	beq.n	8001984 <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8001980:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001984:	4d59      	ldr	r5, [pc, #356]	; (8001aec <HAL_GPIO_Init+0x1c0>)
 8001986:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001988:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 800198a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800198e:	684f      	ldr	r7, [r1, #4]
 8001990:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001994:	d001      	beq.n	800199a <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 8001996:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800199a:	4d54      	ldr	r5, [pc, #336]	; (8001aec <HAL_GPIO_Init+0x1c0>)
 800199c:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800199e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80019a0:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a2:	684e      	ldr	r6, [r1, #4]
 80019a4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80019a8:	d001      	beq.n	80019ae <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 80019aa:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80019ae:	4a4f      	ldr	r2, [pc, #316]	; (8001aec <HAL_GPIO_Init+0x1c0>)
 80019b0:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80019b2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b4:	680a      	ldr	r2, [r1, #0]
 80019b6:	fa32 f403 	lsrs.w	r4, r2, r3
 80019ba:	f000 8092 	beq.w	8001ae2 <HAL_GPIO_Init+0x1b6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019be:	2401      	movs	r4, #1
 80019c0:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80019c2:	4022      	ands	r2, r4
 80019c4:	d0f5      	beq.n	80019b2 <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c6:	684d      	ldr	r5, [r1, #4]
 80019c8:	1e6e      	subs	r6, r5, #1
 80019ca:	2e01      	cmp	r6, #1
 80019cc:	d903      	bls.n	80019d6 <HAL_GPIO_Init+0xaa>
 80019ce:	2d11      	cmp	r5, #17
 80019d0:	d001      	beq.n	80019d6 <HAL_GPIO_Init+0xaa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d2:	2d12      	cmp	r5, #18
 80019d4:	d112      	bne.n	80019fc <HAL_GPIO_Init+0xd0>
        temp = GPIOx->OSPEEDR;
 80019d6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019d8:	005f      	lsls	r7, r3, #1
 80019da:	2503      	movs	r5, #3
 80019dc:	40bd      	lsls	r5, r7
 80019de:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019e2:	68cd      	ldr	r5, [r1, #12]
 80019e4:	40bd      	lsls	r5, r7
 80019e6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80019e8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80019ea:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ec:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019f0:	684d      	ldr	r5, [r1, #4]
 80019f2:	f3c5 1500 	ubfx	r5, r5, #4, #1
 80019f6:	409d      	lsls	r5, r3
 80019f8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80019fa:	6045      	str	r5, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019fc:	684d      	ldr	r5, [r1, #4]
 80019fe:	f005 0603 	and.w	r6, r5, #3
 8001a02:	2e03      	cmp	r6, #3
 8001a04:	d096      	beq.n	8001934 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 8001a06:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a08:	005e      	lsls	r6, r3, #1
 8001a0a:	2503      	movs	r5, #3
 8001a0c:	40b5      	lsls	r5, r6
 8001a0e:	43ec      	mvns	r4, r5
 8001a10:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a14:	688d      	ldr	r5, [r1, #8]
 8001a16:	40b5      	lsls	r5, r6
 8001a18:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001a1a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1c:	684d      	ldr	r5, [r1, #4]
 8001a1e:	2d02      	cmp	r5, #2
 8001a20:	d001      	beq.n	8001a26 <HAL_GPIO_Init+0xfa>
 8001a22:	2d12      	cmp	r5, #18
 8001a24:	d113      	bne.n	8001a4e <HAL_GPIO_Init+0x122>
        temp = GPIOx->AFR[position >> 3u];
 8001a26:	08df      	lsrs	r7, r3, #3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a2e:	f003 0507 	and.w	r5, r3, #7
 8001a32:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8001a36:	250f      	movs	r5, #15
 8001a38:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a3c:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a40:	690d      	ldr	r5, [r1, #16]
 8001a42:	fa05 f50c 	lsl.w	r5, r5, ip
 8001a46:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001a4a:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8001a4e:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a50:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a52:	684c      	ldr	r4, [r1, #4]
 8001a54:	f004 0403 	and.w	r4, r4, #3
 8001a58:	40b4      	lsls	r4, r6
 8001a5a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001a5c:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5e:	684c      	ldr	r4, [r1, #4]
 8001a60:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001a64:	d0a5      	beq.n	80019b2 <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4c22      	ldr	r4, [pc, #136]	; (8001af0 <HAL_GPIO_Init+0x1c4>)
 8001a68:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001a6a:	f045 0501 	orr.w	r5, r5, #1
 8001a6e:	6625      	str	r5, [r4, #96]	; 0x60
 8001a70:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8001a72:	f004 0401 	and.w	r4, r4, #1
 8001a76:	9401      	str	r4, [sp, #4]
 8001a78:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7a:	089d      	lsrs	r5, r3, #2
 8001a7c:	1cae      	adds	r6, r5, #2
 8001a7e:	4c1a      	ldr	r4, [pc, #104]	; (8001ae8 <HAL_GPIO_Init+0x1bc>)
 8001a80:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a84:	f003 0403 	and.w	r4, r3, #3
 8001a88:	00a6      	lsls	r6, r4, #2
 8001a8a:	240f      	movs	r4, #15
 8001a8c:	40b4      	lsls	r4, r6
 8001a8e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a92:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001a96:	f43f af58 	beq.w	800194a <HAL_GPIO_Init+0x1e>
 8001a9a:	4c16      	ldr	r4, [pc, #88]	; (8001af4 <HAL_GPIO_Init+0x1c8>)
 8001a9c:	42a0      	cmp	r0, r4
 8001a9e:	d016      	beq.n	8001ace <HAL_GPIO_Init+0x1a2>
 8001aa0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001aa4:	42a0      	cmp	r0, r4
 8001aa6:	d014      	beq.n	8001ad2 <HAL_GPIO_Init+0x1a6>
 8001aa8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001aac:	42a0      	cmp	r0, r4
 8001aae:	d012      	beq.n	8001ad6 <HAL_GPIO_Init+0x1aa>
 8001ab0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ab4:	42a0      	cmp	r0, r4
 8001ab6:	d010      	beq.n	8001ada <HAL_GPIO_Init+0x1ae>
 8001ab8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001abc:	42a0      	cmp	r0, r4
 8001abe:	d00e      	beq.n	8001ade <HAL_GPIO_Init+0x1b2>
 8001ac0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ac4:	42a0      	cmp	r0, r4
 8001ac6:	f43f af3e 	beq.w	8001946 <HAL_GPIO_Init+0x1a>
 8001aca:	2407      	movs	r4, #7
 8001acc:	e73e      	b.n	800194c <HAL_GPIO_Init+0x20>
 8001ace:	2401      	movs	r4, #1
 8001ad0:	e73c      	b.n	800194c <HAL_GPIO_Init+0x20>
 8001ad2:	2402      	movs	r4, #2
 8001ad4:	e73a      	b.n	800194c <HAL_GPIO_Init+0x20>
 8001ad6:	2403      	movs	r4, #3
 8001ad8:	e738      	b.n	800194c <HAL_GPIO_Init+0x20>
 8001ada:	2404      	movs	r4, #4
 8001adc:	e736      	b.n	800194c <HAL_GPIO_Init+0x20>
 8001ade:	2405      	movs	r4, #5
 8001ae0:	e734      	b.n	800194c <HAL_GPIO_Init+0x20>
  }
}
 8001ae2:	b003      	add	sp, #12
 8001ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	40010400 	.word	0x40010400
 8001af0:	40021000 	.word	0x40021000
 8001af4:	48000400 	.word	0x48000400

08001af8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001af8:	6903      	ldr	r3, [r0, #16]
 8001afa:	4219      	tst	r1, r3
 8001afc:	d001      	beq.n	8001b02 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001afe:	2001      	movs	r0, #1
 8001b00:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b02:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001b04:	4770      	bx	lr

08001b06 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b06:	b10a      	cbz	r2, 8001b0c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b08:	6181      	str	r1, [r0, #24]
 8001b0a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b10:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b12:	ea01 0203 	and.w	r2, r1, r3
 8001b16:	ea21 0103 	bic.w	r1, r1, r3
 8001b1a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b1e:	6181      	str	r1, [r0, #24]
}
 8001b20:	4770      	bx	lr

08001b22 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b22:	4770      	bx	lr

08001b24 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001b24:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	4203      	tst	r3, r0
 8001b2c:	d100      	bne.n	8001b30 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8001b2e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001b32:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b34:	f7ff fff5 	bl	8001b22 <HAL_GPIO_EXTI_Callback>
}
 8001b38:	e7f9      	b.n	8001b2e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001b3a:	bf00      	nop
 8001b3c:	40010400 	.word	0x40010400

08001b40 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b40:	6803      	ldr	r3, [r0, #0]
 8001b42:	699a      	ldr	r2, [r3, #24]
 8001b44:	f012 0f02 	tst.w	r2, #2
 8001b48:	d001      	beq.n	8001b4e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b4e:	6803      	ldr	r3, [r0, #0]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	f012 0f01 	tst.w	r2, #1
 8001b56:	d103      	bne.n	8001b60 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	619a      	str	r2, [r3, #24]
  }
}
 8001b60:	4770      	bx	lr

08001b62 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b62:	b470      	push	{r4, r5, r6}
 8001b64:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001b66:	6805      	ldr	r5, [r0, #0]
 8001b68:	6868      	ldr	r0, [r5, #4]
 8001b6a:	0d74      	lsrs	r4, r6, #21
 8001b6c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001b70:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001b74:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001b78:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001b7c:	f044 0403 	orr.w	r4, r4, #3
 8001b80:	ea20 0004 	bic.w	r0, r0, r4
 8001b84:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001b88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b8c:	4319      	orrs	r1, r3
 8001b8e:	4331      	orrs	r1, r6
 8001b90:	4301      	orrs	r1, r0
 8001b92:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b94:	bc70      	pop	{r4, r5, r6}
 8001b96:	4770      	bx	lr

08001b98 <I2C_IsAcknowledgeFailed>:
{
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9a:	4605      	mov	r5, r0
 8001b9c:	460e      	mov	r6, r1
 8001b9e:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ba0:	6803      	ldr	r3, [r0, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f013 0f10 	tst.w	r3, #16
 8001ba8:	d101      	bne.n	8001bae <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8001baa:	2000      	movs	r0, #0
}
 8001bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bae:	682b      	ldr	r3, [r5, #0]
 8001bb0:	699c      	ldr	r4, [r3, #24]
 8001bb2:	f014 0f20 	tst.w	r4, #32
 8001bb6:	d117      	bne.n	8001be8 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8001bb8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001bbc:	d0f7      	beq.n	8001bae <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbe:	f7ff fe31 	bl	8001824 <HAL_GetTick>
 8001bc2:	1bc0      	subs	r0, r0, r7
 8001bc4:	42b0      	cmp	r0, r6
 8001bc6:	d801      	bhi.n	8001bcc <I2C_IsAcknowledgeFailed+0x34>
 8001bc8:	2e00      	cmp	r6, #0
 8001bca:	d1f0      	bne.n	8001bae <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bcc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001bce:	f043 0320 	orr.w	r3, r3, #32
 8001bd2:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8001be0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8001be4:	2001      	movs	r0, #1
 8001be6:	e7e1      	b.n	8001bac <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001be8:	2210      	movs	r2, #16
 8001bea:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bec:	682b      	ldr	r3, [r5, #0]
 8001bee:	2420      	movs	r4, #32
 8001bf0:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f7ff ffa4 	bl	8001b40 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001bf8:	682a      	ldr	r2, [r5, #0]
 8001bfa:	6853      	ldr	r3, [r2, #4]
 8001bfc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001c00:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001c04:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c0e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001c20:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8001c24:	2001      	movs	r0, #1
 8001c26:	e7c1      	b.n	8001bac <I2C_IsAcknowledgeFailed+0x14>

08001c28 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001c28:	b570      	push	{r4, r5, r6, lr}
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	460d      	mov	r5, r1
 8001c2e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f013 0f02 	tst.w	r3, #2
 8001c38:	d11d      	bne.n	8001c76 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	4632      	mov	r2, r6
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff ffaa 	bl	8001b98 <I2C_IsAcknowledgeFailed>
 8001c44:	b9c8      	cbnz	r0, 8001c7a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001c46:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001c4a:	d0f1      	beq.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4c:	f7ff fdea 	bl	8001824 <HAL_GetTick>
 8001c50:	1b80      	subs	r0, r0, r6
 8001c52:	42a8      	cmp	r0, r5
 8001c54:	d801      	bhi.n	8001c5a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001c56:	2d00      	cmp	r5, #0
 8001c58:	d1ea      	bne.n	8001c30 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c5c:	f043 0320 	orr.w	r3, r3, #32
 8001c60:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c62:	2320      	movs	r3, #32
 8001c64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001c6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001c72:	2001      	movs	r0, #1
 8001c74:	e000      	b.n	8001c78 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001c76:	2000      	movs	r0, #0
}
 8001c78:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	e7fc      	b.n	8001c78 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08001c7e <I2C_WaitOnFlagUntilTimeout>:
{
 8001c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c82:	4606      	mov	r6, r0
 8001c84:	4688      	mov	r8, r1
 8001c86:	4617      	mov	r7, r2
 8001c88:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c8a:	6834      	ldr	r4, [r6, #0]
 8001c8c:	69a4      	ldr	r4, [r4, #24]
 8001c8e:	ea38 0304 	bics.w	r3, r8, r4
 8001c92:	bf0c      	ite	eq
 8001c94:	2401      	moveq	r4, #1
 8001c96:	2400      	movne	r4, #0
 8001c98:	42bc      	cmp	r4, r7
 8001c9a:	d118      	bne.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001c9c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001ca0:	d0f3      	beq.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca2:	f7ff fdbf 	bl	8001824 <HAL_GetTick>
 8001ca6:	9b06      	ldr	r3, [sp, #24]
 8001ca8:	1ac0      	subs	r0, r0, r3
 8001caa:	42a8      	cmp	r0, r5
 8001cac:	d801      	bhi.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0x34>
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	d1eb      	bne.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cb2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001cc6:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8001cca:	2001      	movs	r0, #1
 8001ccc:	e000      	b.n	8001cd0 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8001cce:	2000      	movs	r0, #0
}
 8001cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001cd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	4605      	mov	r5, r0
 8001cd8:	460c      	mov	r4, r1
 8001cda:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cdc:	682b      	ldr	r3, [r5, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f013 0f20 	tst.w	r3, #32
 8001ce4:	d11a      	bne.n	8001d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce6:	4632      	mov	r2, r6
 8001ce8:	4621      	mov	r1, r4
 8001cea:	4628      	mov	r0, r5
 8001cec:	f7ff ff54 	bl	8001b98 <I2C_IsAcknowledgeFailed>
 8001cf0:	b9b0      	cbnz	r0, 8001d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf2:	f7ff fd97 	bl	8001824 <HAL_GetTick>
 8001cf6:	1b80      	subs	r0, r0, r6
 8001cf8:	42a0      	cmp	r0, r4
 8001cfa:	d801      	bhi.n	8001d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001cfc:	2c00      	cmp	r4, #0
 8001cfe:	d1ed      	bne.n	8001cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d00:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001d02:	f043 0320 	orr.w	r3, r3, #32
 8001d06:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d08:	2320      	movs	r3, #32
 8001d0a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d14:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8001d18:	2001      	movs	r0, #1
}
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	e7fc      	b.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8001d20:	2001      	movs	r0, #1
 8001d22:	e7fa      	b.n	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08001d24 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	4604      	mov	r4, r0
 8001d28:	460d      	mov	r5, r1
 8001d2a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f013 0f04 	tst.w	r3, #4
 8001d34:	d13e      	bne.n	8001db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d36:	4632      	mov	r2, r6
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff ff2c 	bl	8001b98 <I2C_IsAcknowledgeFailed>
 8001d40:	4601      	mov	r1, r0
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d138      	bne.n	8001db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	f012 0f20 	tst.w	r2, #32
 8001d4e:	d113      	bne.n	8001d78 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d50:	f7ff fd68 	bl	8001824 <HAL_GetTick>
 8001d54:	1b80      	subs	r0, r0, r6
 8001d56:	42a8      	cmp	r0, r5
 8001d58:	d801      	bhi.n	8001d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8001d5a:	2d00      	cmp	r5, #0
 8001d5c:	d1e6      	bne.n	8001d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	2320      	movs	r3, #32
 8001d68:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001d72:	2101      	movs	r1, #1
}
 8001d74:	4608      	mov	r0, r1
 8001d76:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	f012 0f04 	tst.w	r2, #4
 8001d7e:	d002      	beq.n	8001d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001d80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d1f6      	bne.n	8001d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d86:	2220      	movs	r2, #32
 8001d88:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001d8a:	6821      	ldr	r1, [r4, #0]
 8001d8c:	684b      	ldr	r3, [r1, #4]
 8001d8e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001d92:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001d96:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	604b      	str	r3, [r1, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001dac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001db0:	2101      	movs	r1, #1
 8001db2:	e7df      	b.n	8001d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
  return HAL_OK;
 8001db4:	2100      	movs	r1, #0
 8001db6:	e7dd      	b.n	8001d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8001db8:	2101      	movs	r1, #1
 8001dba:	e7db      	b.n	8001d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08001dbc <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d059      	beq.n	8001e74 <HAL_I2C_Init+0xb8>
{
 8001dc0:	b510      	push	{r4, lr}
 8001dc2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d043      	beq.n	8001e54 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dcc:	2324      	movs	r3, #36	; 0x24
 8001dce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001dd2:	6822      	ldr	r2, [r4, #0]
 8001dd4:	6813      	ldr	r3, [r2, #0]
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ddc:	6863      	ldr	r3, [r4, #4]
 8001dde:	6822      	ldr	r2, [r4, #0]
 8001de0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001de4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001de6:	6822      	ldr	r2, [r4, #0]
 8001de8:	6893      	ldr	r3, [r2, #8]
 8001dea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001dee:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df0:	68e3      	ldr	r3, [r4, #12]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d033      	beq.n	8001e5e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001df6:	68a3      	ldr	r3, [r4, #8]
 8001df8:	6822      	ldr	r2, [r4, #0]
 8001dfa:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001dfe:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e00:	68e3      	ldr	r3, [r4, #12]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d031      	beq.n	8001e6a <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e06:	6822      	ldr	r2, [r4, #0]
 8001e08:	6853      	ldr	r3, [r2, #4]
 8001e0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e12:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	68d3      	ldr	r3, [r2, #12]
 8001e18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e1c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e1e:	6923      	ldr	r3, [r4, #16]
 8001e20:	6962      	ldr	r2, [r4, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	69a1      	ldr	r1, [r4, #24]
 8001e26:	6822      	ldr	r2, [r4, #0]
 8001e28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e2c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e2e:	69e3      	ldr	r3, [r4, #28]
 8001e30:	6a21      	ldr	r1, [r4, #32]
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001e38:	6822      	ldr	r2, [r4, #0]
 8001e3a:	6813      	ldr	r3, [r2, #0]
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e42:	2000      	movs	r0, #0
 8001e44:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	2320      	movs	r3, #32
 8001e48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001e52:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001e54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001e58:	f7ff f91c 	bl	8001094 <HAL_I2C_MspInit>
 8001e5c:	e7b6      	b.n	8001dcc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e5e:	68a3      	ldr	r3, [r4, #8]
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e66:	6093      	str	r3, [r2, #8]
 8001e68:	e7ca      	b.n	8001e00 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	e7c8      	b.n	8001e06 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001e74:	2001      	movs	r0, #1
}
 8001e76:	4770      	bx	lr

08001e78 <HAL_I2C_Master_Transmit>:
{
 8001e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	460f      	mov	r7, r1
 8001e80:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e82:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001e86:	b2c9      	uxtb	r1, r1
 8001e88:	2920      	cmp	r1, #32
 8001e8a:	f040 80a3 	bne.w	8001fd4 <HAL_I2C_Master_Transmit+0x15c>
 8001e8e:	4604      	mov	r4, r0
 8001e90:	4690      	mov	r8, r2
 8001e92:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8001e94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	f000 809f 	beq.w	8001fdc <HAL_I2C_Master_Transmit+0x164>
 8001e9e:	f04f 0a01 	mov.w	sl, #1
 8001ea2:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001ea6:	f7ff fcbd 	bl	8001824 <HAL_GetTick>
 8001eaa:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eac:	9000      	str	r0, [sp, #0]
 8001eae:	2319      	movs	r3, #25
 8001eb0:	4652      	mov	r2, sl
 8001eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7ff fee1 	bl	8001c7e <I2C_WaitOnFlagUntilTimeout>
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	f040 808f 	bne.w	8001fe0 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ec2:	2321      	movs	r3, #33	; 0x21
 8001ec4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ec8:	2310      	movs	r3, #16
 8001eca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001ed2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ed6:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001eda:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001edc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2bff      	cmp	r3, #255	; 0xff
 8001ee2:	d90a      	bls.n	8001efa <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee4:	22ff      	movs	r2, #255	; 0xff
 8001ee6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ee8:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_I2C_Master_Transmit+0x178>)
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef0:	4639      	mov	r1, r7
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7ff fe35 	bl	8001b62 <I2C_TransferConfig>
 8001ef8:	e018      	b.n	8001f2c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8001efa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001efc:	b292      	uxth	r2, r2
 8001efe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001f00:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <HAL_I2C_Master_Transmit+0x178>)
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	4639      	mov	r1, r7
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff fe28 	bl	8001b62 <I2C_TransferConfig>
 8001f12:	e00b      	b.n	8001f2c <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8001f14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f16:	b292      	uxth	r2, r2
 8001f18:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	4639      	mov	r1, r7
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff fe1b 	bl	8001b62 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d033      	beq.n	8001f9c <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f34:	462a      	mov	r2, r5
 8001f36:	4631      	mov	r1, r6
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7ff fe75 	bl	8001c28 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d150      	bne.n	8001fe4 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	7812      	ldrb	r2, [r2, #0]
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001f50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f64:	b292      	uxth	r2, r2
 8001f66:	2a00      	cmp	r2, #0
 8001f68:	d0e0      	beq.n	8001f2c <HAL_I2C_Master_Transmit+0xb4>
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1de      	bne.n	8001f2c <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f6e:	9500      	str	r5, [sp, #0]
 8001f70:	4633      	mov	r3, r6
 8001f72:	2200      	movs	r2, #0
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7ff fe81 	bl	8001c7e <I2C_WaitOnFlagUntilTimeout>
 8001f7c:	bba0      	cbnz	r0, 8001fe8 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2bff      	cmp	r3, #255	; 0xff
 8001f84:	d9c6      	bls.n	8001f14 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f86:	22ff      	movs	r2, #255	; 0xff
 8001f88:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f92:	4639      	mov	r1, r7
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff fde4 	bl	8001b62 <I2C_TransferConfig>
 8001f9a:	e7c7      	b.n	8001f2c <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9c:	462a      	mov	r2, r5
 8001f9e:	4631      	mov	r1, r6
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff fe97 	bl	8001cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fa6:	bb08      	cbnz	r0, 8001fec <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	2220      	movs	r2, #32
 8001fac:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001fae:	6821      	ldr	r1, [r4, #0]
 8001fb0:	684b      	ldr	r3, [r1, #4]
 8001fb2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001fb6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001fba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001fce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001fd2:	e000      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8001fd4:	2002      	movs	r0, #2
}
 8001fd6:	b002      	add	sp, #8
 8001fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8001fdc:	2002      	movs	r0, #2
 8001fde:	e7fa      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	e7f8      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	e7f6      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8001fe8:	2001      	movs	r0, #1
 8001fea:	e7f4      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8001fec:	2001      	movs	r0, #1
 8001fee:	e7f2      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x15e>
 8001ff0:	80002000 	.word	0x80002000

08001ff4 <HAL_I2C_Master_Receive>:
{
 8001ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	460f      	mov	r7, r1
 8001ffc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffe:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002002:	b2c9      	uxtb	r1, r1
 8002004:	2920      	cmp	r1, #32
 8002006:	f040 80a2 	bne.w	800214e <HAL_I2C_Master_Receive+0x15a>
 800200a:	4604      	mov	r4, r0
 800200c:	4690      	mov	r8, r2
 800200e:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002010:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002014:	2b01      	cmp	r3, #1
 8002016:	f000 809e 	beq.w	8002156 <HAL_I2C_Master_Receive+0x162>
 800201a:	f04f 0a01 	mov.w	sl, #1
 800201e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002022:	f7ff fbff 	bl	8001824 <HAL_GetTick>
 8002026:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002028:	9000      	str	r0, [sp, #0]
 800202a:	2319      	movs	r3, #25
 800202c:	4652      	mov	r2, sl
 800202e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002032:	4620      	mov	r0, r4
 8002034:	f7ff fe23 	bl	8001c7e <I2C_WaitOnFlagUntilTimeout>
 8002038:	2800      	cmp	r0, #0
 800203a:	f040 808e 	bne.w	800215a <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800203e:	2322      	movs	r3, #34	; 0x22
 8002040:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002044:	2310      	movs	r3, #16
 8002046:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204a:	2300      	movs	r3, #0
 800204c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800204e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002052:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002056:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002058:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	2bff      	cmp	r3, #255	; 0xff
 800205e:	d90a      	bls.n	8002076 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002060:	22ff      	movs	r2, #255	; 0xff
 8002062:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002064:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_I2C_Master_Receive+0x178>)
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800206c:	4639      	mov	r1, r7
 800206e:	4620      	mov	r0, r4
 8002070:	f7ff fd77 	bl	8001b62 <I2C_TransferConfig>
 8002074:	e018      	b.n	80020a8 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8002076:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002078:	b292      	uxth	r2, r2
 800207a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800207c:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_I2C_Master_Receive+0x178>)
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	4639      	mov	r1, r7
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff fd6a 	bl	8001b62 <I2C_TransferConfig>
 800208e:	e00b      	b.n	80020a8 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8002090:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002092:	b292      	uxth	r2, r2
 8002094:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002096:	2300      	movs	r3, #0
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	4639      	mov	r1, r7
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff fd5d 	bl	8001b62 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d032      	beq.n	8002116 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b0:	462a      	mov	r2, r5
 80020b2:	4631      	mov	r1, r6
 80020b4:	4620      	mov	r0, r4
 80020b6:	f7ff fe35 	bl	8001d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ba:	2800      	cmp	r0, #0
 80020bc:	d14f      	bne.n	800215e <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020c4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80020c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020c8:	3301      	adds	r3, #1
 80020ca:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80020cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80020ce:	3a01      	subs	r2, #1
 80020d0:	b292      	uxth	r2, r2
 80020d2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80020d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29b      	uxth	r3, r3
 80020dc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0e0      	beq.n	80020a8 <HAL_I2C_Master_Receive+0xb4>
 80020e6:	2a00      	cmp	r2, #0
 80020e8:	d1de      	bne.n	80020a8 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ea:	9500      	str	r5, [sp, #0]
 80020ec:	4633      	mov	r3, r6
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7ff fdc4 	bl	8001c7e <I2C_WaitOnFlagUntilTimeout>
 80020f6:	bba0      	cbnz	r0, 8002162 <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2bff      	cmp	r3, #255	; 0xff
 80020fe:	d9c7      	bls.n	8002090 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002100:	22ff      	movs	r2, #255	; 0xff
 8002102:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002104:	2300      	movs	r3, #0
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800210c:	4639      	mov	r1, r7
 800210e:	4620      	mov	r0, r4
 8002110:	f7ff fd27 	bl	8001b62 <I2C_TransferConfig>
 8002114:	e7c8      	b.n	80020a8 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002116:	462a      	mov	r2, r5
 8002118:	4631      	mov	r1, r6
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff fdda 	bl	8001cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002120:	bb08      	cbnz	r0, 8002166 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	2220      	movs	r2, #32
 8002126:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002128:	6821      	ldr	r1, [r4, #0]
 800212a:	684b      	ldr	r3, [r1, #4]
 800212c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002130:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002134:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800213e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002142:	2300      	movs	r3, #0
 8002144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002148:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800214c:	e000      	b.n	8002150 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 800214e:	2002      	movs	r0, #2
}
 8002150:	b002      	add	sp, #8
 8002152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002156:	2002      	movs	r0, #2
 8002158:	e7fa      	b.n	8002150 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800215a:	2001      	movs	r0, #1
 800215c:	e7f8      	b.n	8002150 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 800215e:	2001      	movs	r0, #1
 8002160:	e7f6      	b.n	8002150 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 8002162:	2001      	movs	r0, #1
 8002164:	e7f4      	b.n	8002150 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 8002166:	2001      	movs	r0, #1
 8002168:	e7f2      	b.n	8002150 <HAL_I2C_Master_Receive+0x15c>
 800216a:	bf00      	nop
 800216c:	80002400 	.word	0x80002400

08002170 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002170:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b20      	cmp	r3, #32
 8002178:	d124      	bne.n	80021c4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800217e:	2b01      	cmp	r3, #1
 8002180:	d022      	beq.n	80021c8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002182:	2301      	movs	r3, #1
 8002184:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002188:	2324      	movs	r3, #36	; 0x24
 800218a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800218e:	6802      	ldr	r2, [r0, #0]
 8002190:	6813      	ldr	r3, [r2, #0]
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	6813      	ldr	r3, [r2, #0]
 800219c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021a0:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021a2:	6802      	ldr	r2, [r0, #0]
 80021a4:	6813      	ldr	r3, [r2, #0]
 80021a6:	4319      	orrs	r1, r3
 80021a8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021aa:	6802      	ldr	r2, [r0, #0]
 80021ac:	6813      	ldr	r3, [r2, #0]
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b4:	2320      	movs	r3, #32
 80021b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ba:	2300      	movs	r3, #0
 80021bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80021c0:	4618      	mov	r0, r3
 80021c2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2002      	movs	r0, #2
 80021c6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80021c8:	2002      	movs	r0, #2
  }
}
 80021ca:	4770      	bx	lr

080021cc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d122      	bne.n	800221c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d020      	beq.n	8002220 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80021de:	2301      	movs	r3, #1
 80021e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021e4:	2324      	movs	r3, #36	; 0x24
 80021e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ea:	6802      	ldr	r2, [r0, #0]
 80021ec:	6813      	ldr	r3, [r2, #0]
 80021ee:	f023 0301 	bic.w	r3, r3, #1
 80021f2:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021f4:	6802      	ldr	r2, [r0, #0]
 80021f6:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021fc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002200:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002202:	6802      	ldr	r2, [r0, #0]
 8002204:	6813      	ldr	r3, [r2, #0]
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800220c:	2320      	movs	r3, #32
 800220e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002212:	2300      	movs	r3, #0
 8002214:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002218:	4618      	mov	r0, r3
 800221a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800221c:	2002      	movs	r0, #2
 800221e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002220:	2002      	movs	r0, #2
  }
}
 8002222:	4770      	bx	lr

08002224 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002224:	4b02      	ldr	r3, [pc, #8]	; (8002230 <HAL_PWREx_GetVoltageRange+0xc>)
 8002226:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002228:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000

08002234 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002234:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002238:	d00f      	beq.n	800225a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002246:	d034      	beq.n	80022b2 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002248:	4a1b      	ldr	r2, [pc, #108]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002254:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002256:	2000      	movs	r0, #0
 8002258:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002266:	d020      	beq.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002268:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800226a:	6813      	ldr	r3, [r2, #0]
 800226c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002274:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2332      	movs	r3, #50	; 0x32
 800227c:	fb03 f302 	mul.w	r3, r3, r2
 8002280:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9b      	lsrs	r3, r3, #18
 8002288:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228a:	e000      	b.n	800228e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800228c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002290:	6952      	ldr	r2, [r2, #20]
 8002292:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002296:	d001      	beq.n	800229c <HAL_PWREx_ControlVoltageScaling+0x68>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f7      	bne.n	800228c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022a4:	d103      	bne.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 80022a6:	2000      	movs	r0, #0
 80022a8:	4770      	bx	lr
 80022aa:	2000      	movs	r0, #0
 80022ac:	4770      	bx	lr
        return HAL_TIMEOUT;
 80022ae:	2003      	movs	r0, #3
 80022b0:	4770      	bx	lr
  return HAL_OK;
 80022b2:	2000      	movs	r0, #0
}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40007000 	.word	0x40007000
 80022bc:	20000000 	.word	0x20000000
 80022c0:	431bde83 	.word	0x431bde83

080022c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022c4:	b530      	push	{r4, r5, lr}
 80022c6:	b083      	sub	sp, #12
 80022c8:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022d2:	d00b      	beq.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022d4:	f7ff ffa6 	bl	8002224 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80022dc:	d017      	beq.n	800230e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022de:	2c80      	cmp	r4, #128	; 0x80
 80022e0:	d81f      	bhi.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022e2:	d02d      	beq.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022e4:	2c70      	cmp	r4, #112	; 0x70
 80022e6:	d02d      	beq.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022e8:	2100      	movs	r1, #0
 80022ea:	e01b      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	4d17      	ldr	r5, [pc, #92]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80022ee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f4:	65ab      	str	r3, [r5, #88]	; 0x58
 80022f6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002300:	f7ff ff90 	bl	8002224 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002304:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230a:	65ab      	str	r3, [r5, #88]	; 0x58
 800230c:	e7e4      	b.n	80022d8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800230e:	2c80      	cmp	r4, #128	; 0x80
 8002310:	d903      	bls.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8002312:	2ca0      	cmp	r4, #160	; 0xa0
 8002314:	d903      	bls.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002316:	2102      	movs	r1, #2
 8002318:	e004      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800231a:	2100      	movs	r1, #0
 800231c:	e002      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800231e:	2101      	movs	r1, #1
 8002320:	e000      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002322:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002326:	6813      	ldr	r3, [r2, #0]
 8002328:	f023 0307 	bic.w	r3, r3, #7
 800232c:	430b      	orrs	r3, r1
 800232e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002330:	6813      	ldr	r3, [r2, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	428b      	cmp	r3, r1
 8002338:	d106      	bne.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800233a:	2000      	movs	r0, #0
}
 800233c:	b003      	add	sp, #12
 800233e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002340:	2102      	movs	r1, #2
 8002342:	e7ef      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002344:	2101      	movs	r1, #1
 8002346:	e7ed      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8002348:	2001      	movs	r0, #1
 800234a:	e7f7      	b.n	800233c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800234c:	40021000 	.word	0x40021000
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002354:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002356:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002358:	68d2      	ldr	r2, [r2, #12]
 800235a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235e:	f013 030c 	ands.w	r3, r3, #12
 8002362:	d00a      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x26>
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d006      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002368:	2b04      	cmp	r3, #4
 800236a:	d01f      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800236c:	2b08      	cmp	r3, #8
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002370:	2000      	movs	r0, #0
 8002372:	4602      	mov	r2, r0
 8002374:	e010      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002376:	2a01      	cmp	r2, #1
 8002378:	d1f6      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800237a:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	f012 0f08 	tst.w	r2, #8
 8002382:	d10c      	bne.n	800239e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002386:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800238a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800238e:	491b      	ldr	r1, [pc, #108]	; (80023fc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002390:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002394:	b143      	cbz	r3, 80023a8 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002396:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d00d      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x64>
}
 800239c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800239e:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80023a6:	e7f2      	b.n	800238e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 80023a8:	4610      	mov	r0, r2
 80023aa:	e7f5      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 80023ac:	4814      	ldr	r0, [pc, #80]	; (8002400 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023ae:	2200      	movs	r2, #0
 80023b0:	e7f2      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 80023b2:	4814      	ldr	r0, [pc, #80]	; (8002404 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023b4:	2200      	movs	r2, #0
 80023b6:	e7ef      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d016      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x9e>
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d100      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023cc:	68d8      	ldr	r0, [r3, #12]
 80023ce:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80023d2:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023d4:	68d9      	ldr	r1, [r3, #12]
 80023d6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80023da:	fb02 f201 	mul.w	r2, r2, r1
 80023de:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023e2:	68d8      	ldr	r0, [r3, #12]
 80023e4:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80023e8:	3001      	adds	r0, #1
 80023ea:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 80023ec:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80023f0:	e7d4      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80023f2:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_RCC_GetSysClockFreq+0xac>)
 80023f4:	e7e9      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x76>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08006690 	.word	0x08006690
 8002400:	00f42400 	.word	0x00f42400
 8002404:	007a1200 	.word	0x007a1200

08002408 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002408:	2800      	cmp	r0, #0
 800240a:	f000 82ff 	beq.w	8002a0c <HAL_RCC_OscConfig+0x604>
{
 800240e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002410:	b083      	sub	sp, #12
 8002412:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002414:	4bae      	ldr	r3, [pc, #696]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002416:	689d      	ldr	r5, [r3, #8]
 8002418:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800241c:	68de      	ldr	r6, [r3, #12]
 800241e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002422:	6803      	ldr	r3, [r0, #0]
 8002424:	f013 0f10 	tst.w	r3, #16
 8002428:	d05a      	beq.n	80024e0 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800242a:	b1e5      	cbz	r5, 8002466 <HAL_RCC_OscConfig+0x5e>
 800242c:	2d0c      	cmp	r5, #12
 800242e:	d018      	beq.n	8002462 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002430:	69a3      	ldr	r3, [r4, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80bb 	beq.w	80025ae <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8002438:	4aa5      	ldr	r2, [pc, #660]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002442:	f7ff f9ef 	bl	8001824 <HAL_GetTick>
 8002446:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002448:	4ba1      	ldr	r3, [pc, #644]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f013 0f02 	tst.w	r3, #2
 8002450:	f040 809a 	bne.w	8002588 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002454:	f7ff f9e6 	bl	8001824 <HAL_GetTick>
 8002458:	1bc0      	subs	r0, r0, r7
 800245a:	2802      	cmp	r0, #2
 800245c:	d9f4      	bls.n	8002448 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800245e:	2003      	movs	r0, #3
 8002460:	e2df      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002462:	2e01      	cmp	r6, #1
 8002464:	d1e4      	bne.n	8002430 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002466:	4b9a      	ldr	r3, [pc, #616]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f013 0f02 	tst.w	r3, #2
 800246e:	d003      	beq.n	8002478 <HAL_RCC_OscConfig+0x70>
 8002470:	69a3      	ldr	r3, [r4, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 82cc 	beq.w	8002a10 <HAL_RCC_OscConfig+0x608>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002478:	6a20      	ldr	r0, [r4, #32]
 800247a:	4b95      	ldr	r3, [pc, #596]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f013 0f08 	tst.w	r3, #8
 8002482:	d05b      	beq.n	800253c <HAL_RCC_OscConfig+0x134>
 8002484:	4b92      	ldr	r3, [pc, #584]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248c:	4298      	cmp	r0, r3
 800248e:	d85c      	bhi.n	800254a <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002490:	4b8f      	ldr	r3, [pc, #572]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f042 0208 	orr.w	r2, r2, #8
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024a0:	6a21      	ldr	r1, [r4, #32]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80024ac:	69e1      	ldr	r1, [r4, #28]
 80024ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024b2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d060      	beq.n	800257a <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b8:	f7ff ff4c 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 80024bc:	4b84      	ldr	r3, [pc, #528]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024c4:	4a83      	ldr	r2, [pc, #524]	; (80026d4 <HAL_RCC_OscConfig+0x2cc>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	40d8      	lsrs	r0, r3
 80024ce:	4b82      	ldr	r3, [pc, #520]	; (80026d8 <HAL_RCC_OscConfig+0x2d0>)
 80024d0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x2d4>)
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	f7ff f963 	bl	80017a0 <HAL_InitTick>
        if(status != HAL_OK)
 80024da:	2800      	cmp	r0, #0
 80024dc:	f040 82a1 	bne.w	8002a22 <HAL_RCC_OscConfig+0x61a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	f013 0f01 	tst.w	r3, #1
 80024e6:	f000 8081 	beq.w	80025ec <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024ea:	2d08      	cmp	r5, #8
 80024ec:	d075      	beq.n	80025da <HAL_RCC_OscConfig+0x1d2>
 80024ee:	2d0c      	cmp	r5, #12
 80024f0:	d071      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f2:	6863      	ldr	r3, [r4, #4]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	f000 8097 	beq.w	800262a <HAL_RCC_OscConfig+0x222>
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002500:	f000 8099 	beq.w	8002636 <HAL_RCC_OscConfig+0x22e>
 8002504:	4b72      	ldr	r3, [pc, #456]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002514:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002516:	6863      	ldr	r3, [r4, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8099 	beq.w	8002650 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800251e:	f7ff f981 	bl	8001824 <HAL_GetTick>
 8002522:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002524:	4b6a      	ldr	r3, [pc, #424]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800252c:	d15e      	bne.n	80025ec <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252e:	f7ff f979 	bl	8001824 <HAL_GetTick>
 8002532:	1bc0      	subs	r0, r0, r7
 8002534:	2864      	cmp	r0, #100	; 0x64
 8002536:	d9f5      	bls.n	8002524 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8002538:	2003      	movs	r0, #3
 800253a:	e272      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800253c:	4b64      	ldr	r3, [pc, #400]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002548:	e7a0      	b.n	800248c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800254a:	f7ff febb 	bl	80022c4 <RCC_SetFlashLatencyFromMSIRange>
 800254e:	2800      	cmp	r0, #0
 8002550:	f040 8260 	bne.w	8002a14 <HAL_RCC_OscConfig+0x60c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	f042 0208 	orr.w	r2, r2, #8
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002564:	6a21      	ldr	r1, [r4, #32]
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002570:	69e1      	ldr	r1, [r4, #28]
 8002572:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	e79e      	b.n	80024b8 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800257a:	6a20      	ldr	r0, [r4, #32]
 800257c:	f7ff fea2 	bl	80022c4 <RCC_SetFlashLatencyFromMSIRange>
 8002580:	2800      	cmp	r0, #0
 8002582:	d099      	beq.n	80024b8 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8002584:	2001      	movs	r0, #1
 8002586:	e24c      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002588:	4b51      	ldr	r3, [pc, #324]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f042 0208 	orr.w	r2, r2, #8
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002598:	6a21      	ldr	r1, [r4, #32]
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80025a4:	69e1      	ldr	r1, [r4, #28]
 80025a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	e798      	b.n	80024e0 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80025ae:	4a48      	ldr	r2, [pc, #288]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 80025b0:	6813      	ldr	r3, [r2, #0]
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80025b8:	f7ff f934 	bl	8001824 <HAL_GetTick>
 80025bc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f013 0f02 	tst.w	r3, #2
 80025c6:	d08b      	beq.n	80024e0 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c8:	f7ff f92c 	bl	8001824 <HAL_GetTick>
 80025cc:	1bc0      	subs	r0, r0, r7
 80025ce:	2802      	cmp	r0, #2
 80025d0:	d9f5      	bls.n	80025be <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80025d2:	2003      	movs	r0, #3
 80025d4:	e225      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025d6:	2e03      	cmp	r6, #3
 80025d8:	d18b      	bne.n	80024f2 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025da:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025e2:	d003      	beq.n	80025ec <HAL_RCC_OscConfig+0x1e4>
 80025e4:	6863      	ldr	r3, [r4, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8216 	beq.w	8002a18 <HAL_RCC_OscConfig+0x610>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	f013 0f02 	tst.w	r3, #2
 80025f2:	d04f      	beq.n	8002694 <HAL_RCC_OscConfig+0x28c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025f4:	2d04      	cmp	r5, #4
 80025f6:	d03c      	beq.n	8002672 <HAL_RCC_OscConfig+0x26a>
 80025f8:	2d0c      	cmp	r5, #12
 80025fa:	d038      	beq.n	800266e <HAL_RCC_OscConfig+0x266>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fc:	68e3      	ldr	r3, [r4, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d077      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8002602:	4a33      	ldr	r2, [pc, #204]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002604:	6813      	ldr	r3, [r2, #0]
 8002606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800260c:	f7ff f90a 	bl	8001824 <HAL_GetTick>
 8002610:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002612:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800261a:	d161      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261c:	f7ff f902 	bl	8001824 <HAL_GetTick>
 8002620:	1b80      	subs	r0, r0, r6
 8002622:	2802      	cmp	r0, #2
 8002624:	d9f5      	bls.n	8002612 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8002626:	2003      	movs	r0, #3
 8002628:	e1fb      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262a:	4a29      	ldr	r2, [pc, #164]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 800262c:	6813      	ldr	r3, [r2, #0]
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e76f      	b.n	8002516 <HAL_RCC_OscConfig+0x10e>
 8002636:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800263a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e762      	b.n	8002516 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8002650:	f7ff f8e8 	bl	8001824 <HAL_GetTick>
 8002654:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800265e:	d0c5      	beq.n	80025ec <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff f8e0 	bl	8001824 <HAL_GetTick>
 8002664:	1bc0      	subs	r0, r0, r7
 8002666:	2864      	cmp	r0, #100	; 0x64
 8002668:	d9f5      	bls.n	8002656 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800266a:	2003      	movs	r0, #3
 800266c:	e1d9      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800266e:	2e02      	cmp	r6, #2
 8002670:	d1c4      	bne.n	80025fc <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800267a:	d003      	beq.n	8002684 <HAL_RCC_OscConfig+0x27c>
 800267c:	68e3      	ldr	r3, [r4, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 81cc 	beq.w	8002a1c <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 8002686:	6853      	ldr	r3, [r2, #4]
 8002688:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800268c:	6921      	ldr	r1, [r4, #16]
 800268e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002692:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	f013 0f08 	tst.w	r3, #8
 800269a:	d055      	beq.n	8002748 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269c:	6963      	ldr	r3, [r4, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d03b      	beq.n	800271a <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 80026a4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80026b0:	f7ff f8b8 	bl	8001824 <HAL_GetTick>
 80026b4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RCC_OscConfig+0x2c8>)
 80026b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026bc:	f013 0f02 	tst.w	r3, #2
 80026c0:	d142      	bne.n	8002748 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c2:	f7ff f8af 	bl	8001824 <HAL_GetTick>
 80026c6:	1b80      	subs	r0, r0, r6
 80026c8:	2802      	cmp	r0, #2
 80026ca:	d9f4      	bls.n	80026b6 <HAL_RCC_OscConfig+0x2ae>
          return HAL_TIMEOUT;
 80026cc:	2003      	movs	r0, #3
 80026ce:	e1a8      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
 80026d0:	40021000 	.word	0x40021000
 80026d4:	080066c0 	.word	0x080066c0
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000014 	.word	0x20000014
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e0:	4ab8      	ldr	r2, [pc, #736]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 80026e2:	6853      	ldr	r3, [r2, #4]
 80026e4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80026e8:	6921      	ldr	r1, [r4, #16]
 80026ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80026ee:	6053      	str	r3, [r2, #4]
 80026f0:	e7d0      	b.n	8002694 <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_HSI_DISABLE();
 80026f2:	4ab4      	ldr	r2, [pc, #720]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 80026f4:	6813      	ldr	r3, [r2, #0]
 80026f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026fc:	f7ff f892 	bl	8001824 <HAL_GetTick>
 8002700:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002702:	4bb0      	ldr	r3, [pc, #704]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800270a:	d0c3      	beq.n	8002694 <HAL_RCC_OscConfig+0x28c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7ff f88a 	bl	8001824 <HAL_GetTick>
 8002710:	1b80      	subs	r0, r0, r6
 8002712:	2802      	cmp	r0, #2
 8002714:	d9f5      	bls.n	8002702 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8002716:	2003      	movs	r0, #3
 8002718:	e183      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_LSI_DISABLE();
 800271a:	4aaa      	ldr	r2, [pc, #680]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 800271c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002728:	f7ff f87c 	bl	8001824 <HAL_GetTick>
 800272c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800272e:	4ba5      	ldr	r3, [pc, #660]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 8002730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002734:	f013 0f02 	tst.w	r3, #2
 8002738:	d006      	beq.n	8002748 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273a:	f7ff f873 	bl	8001824 <HAL_GetTick>
 800273e:	1b80      	subs	r0, r0, r6
 8002740:	2802      	cmp	r0, #2
 8002742:	d9f4      	bls.n	800272e <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8002744:	2003      	movs	r0, #3
 8002746:	e16c      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	f013 0f04 	tst.w	r3, #4
 800274e:	d07a      	beq.n	8002846 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002750:	4b9c      	ldr	r3, [pc, #624]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002758:	d136      	bne.n	80027c8 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	4b9a      	ldr	r3, [pc, #616]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 800275c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800275e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002762:	659a      	str	r2, [r3, #88]	; 0x58
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800276e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002770:	4b95      	ldr	r3, [pc, #596]	; (80029c8 <HAL_RCC_OscConfig+0x5c0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002778:	d028      	beq.n	80027cc <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277a:	68a3      	ldr	r3, [r4, #8]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d039      	beq.n	80027f4 <HAL_RCC_OscConfig+0x3ec>
 8002780:	2b05      	cmp	r3, #5
 8002782:	d03f      	beq.n	8002804 <HAL_RCC_OscConfig+0x3fc>
 8002784:	4b8f      	ldr	r3, [pc, #572]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 8002786:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002792:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002796:	f022 0204 	bic.w	r2, r2, #4
 800279a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279e:	68a3      	ldr	r3, [r4, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d03d      	beq.n	8002820 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 80027a4:	f7ff f83e 	bl	8001824 <HAL_GetTick>
 80027a8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027aa:	4b86      	ldr	r3, [pc, #536]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 80027ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b0:	f013 0f02 	tst.w	r3, #2
 80027b4:	d146      	bne.n	8002844 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7ff f835 	bl	8001824 <HAL_GetTick>
 80027ba:	1bc0      	subs	r0, r0, r7
 80027bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80027c0:	4298      	cmp	r0, r3
 80027c2:	d9f2      	bls.n	80027aa <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80027c4:	2003      	movs	r0, #3
 80027c6:	e12c      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
    FlagStatus       pwrclkchanged = RESET;
 80027c8:	2600      	movs	r6, #0
 80027ca:	e7d1      	b.n	8002770 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027cc:	4a7e      	ldr	r2, [pc, #504]	; (80029c8 <HAL_RCC_OscConfig+0x5c0>)
 80027ce:	6813      	ldr	r3, [r2, #0]
 80027d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80027d6:	f7ff f825 	bl	8001824 <HAL_GetTick>
 80027da:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027dc:	4b7a      	ldr	r3, [pc, #488]	; (80029c8 <HAL_RCC_OscConfig+0x5c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027e4:	d1c9      	bne.n	800277a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7ff f81d 	bl	8001824 <HAL_GetTick>
 80027ea:	1bc0      	subs	r0, r0, r7
 80027ec:	2802      	cmp	r0, #2
 80027ee:	d9f5      	bls.n	80027dc <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 80027f0:	2003      	movs	r0, #3
 80027f2:	e116      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	4a73      	ldr	r2, [pc, #460]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 80027f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002802:	e7cc      	b.n	800279e <HAL_RCC_OscConfig+0x396>
 8002804:	4b6f      	ldr	r3, [pc, #444]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 8002806:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800280a:	f042 0204 	orr.w	r2, r2, #4
 800280e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002812:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800281e:	e7be      	b.n	800279e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002820:	f7ff f800 	bl	8001824 <HAL_GetTick>
 8002824:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002826:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	f013 0f02 	tst.w	r3, #2
 8002830:	d008      	beq.n	8002844 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe fff7 	bl	8001824 <HAL_GetTick>
 8002836:	1bc0      	subs	r0, r0, r7
 8002838:	f241 3388 	movw	r3, #5000	; 0x1388
 800283c:	4298      	cmp	r0, r3
 800283e:	d9f2      	bls.n	8002826 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8002840:	2003      	movs	r0, #3
 8002842:	e0ee      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
    if(pwrclkchanged == SET)
 8002844:	bb6e      	cbnz	r6, 80028a2 <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002846:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80e9 	beq.w	8002a20 <HAL_RCC_OscConfig+0x618>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800284e:	2b02      	cmp	r3, #2
 8002850:	d02d      	beq.n	80028ae <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002852:	2d0c      	cmp	r5, #12
 8002854:	f000 80eb 	beq.w	8002a2e <HAL_RCC_OscConfig+0x626>
        __HAL_RCC_PLL_DISABLE();
 8002858:	4b5a      	ldr	r3, [pc, #360]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002860:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 8002868:	d104      	bne.n	8002874 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800286a:	4a56      	ldr	r2, [pc, #344]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 800286c:	68d3      	ldr	r3, [r2, #12]
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002874:	4a53      	ldr	r2, [pc, #332]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 8002876:	68d3      	ldr	r3, [r2, #12]
 8002878:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800287c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002880:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002882:	f7fe ffcf 	bl	8001824 <HAL_GetTick>
 8002886:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002888:	4b4e      	ldr	r3, [pc, #312]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002890:	f000 80ba 	beq.w	8002a08 <HAL_RCC_OscConfig+0x600>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe ffc6 	bl	8001824 <HAL_GetTick>
 8002898:	1b00      	subs	r0, r0, r4
 800289a:	2802      	cmp	r0, #2
 800289c:	d9f4      	bls.n	8002888 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 800289e:	2003      	movs	r0, #3
 80028a0:	e0bf      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4a48      	ldr	r2, [pc, #288]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 80028a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80028a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028aa:	6593      	str	r3, [r2, #88]	; 0x58
 80028ac:	e7cb      	b.n	8002846 <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 80028ae:	4b45      	ldr	r3, [pc, #276]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 80028b0:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	f003 0103 	and.w	r1, r3, #3
 80028b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028b8:	4291      	cmp	r1, r2
 80028ba:	d00f      	beq.n	80028dc <HAL_RCC_OscConfig+0x4d4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028bc:	2d0c      	cmp	r5, #12
 80028be:	f000 80b2 	beq.w	8002a26 <HAL_RCC_OscConfig+0x61e>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028c2:	4b40      	ldr	r3, [pc, #256]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80028ca:	f040 80ae 	bne.w	8002a2a <HAL_RCC_OscConfig+0x622>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028ce:	4b3d      	ldr	r3, [pc, #244]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80028d6:	d02d      	beq.n	8002934 <HAL_RCC_OscConfig+0x52c>
            return HAL_ERROR;
 80028d8:	2001      	movs	r0, #1
 80028da:	e0a2      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80028e2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80028e8:	d1e8      	bne.n	80028bc <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028f0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80028f4:	d1e2      	bne.n	80028bc <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028f6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80028fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028fc:	3a07      	subs	r2, #7
 80028fe:	bf18      	it	ne
 8002900:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002902:	4291      	cmp	r1, r2
 8002904:	d1da      	bne.n	80028bc <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002906:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800290a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800290c:	0852      	lsrs	r2, r2, #1
 800290e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002910:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002914:	d1d2      	bne.n	80028bc <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002916:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800291a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800291c:	0852      	lsrs	r2, r2, #1
 800291e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002920:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002924:	d1ca      	bne.n	80028bc <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800292e:	d051      	beq.n	80029d4 <HAL_RCC_OscConfig+0x5cc>
  return HAL_OK;
 8002930:	2000      	movs	r0, #0
 8002932:	e076      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
            __HAL_RCC_PLL_DISABLE();
 8002934:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800293c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800293e:	f7fe ff71 	bl	8001824 <HAL_GetTick>
 8002942:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002944:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800294c:	d006      	beq.n	800295c <HAL_RCC_OscConfig+0x554>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe ff69 	bl	8001824 <HAL_GetTick>
 8002952:	1b40      	subs	r0, r0, r5
 8002954:	2802      	cmp	r0, #2
 8002956:	d9f5      	bls.n	8002944 <HAL_RCC_OscConfig+0x53c>
                return HAL_TIMEOUT;
 8002958:	2003      	movs	r0, #3
 800295a:	e062      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295c:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 800295e:	68d3      	ldr	r3, [r2, #12]
 8002960:	491a      	ldr	r1, [pc, #104]	; (80029cc <HAL_RCC_OscConfig+0x5c4>)
 8002962:	4019      	ands	r1, r3
 8002964:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002966:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002968:	3801      	subs	r0, #1
 800296a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800296e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002970:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002974:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002976:	0840      	lsrs	r0, r0, #1
 8002978:	3801      	subs	r0, #1
 800297a:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800297e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002980:	0840      	lsrs	r0, r0, #1
 8002982:	3801      	subs	r0, #1
 8002984:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002988:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800298a:	0900      	lsrs	r0, r0, #4
 800298c:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 8002990:	430b      	orrs	r3, r1
 8002992:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8002994:	6813      	ldr	r3, [r2, #0]
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299a:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800299c:	68d3      	ldr	r3, [r2, #12]
 800299e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a2:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80029a4:	f7fe ff3e 	bl	8001824 <HAL_GetTick>
 80029a8:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x5bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029b2:	d10d      	bne.n	80029d0 <HAL_RCC_OscConfig+0x5c8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe ff36 	bl	8001824 <HAL_GetTick>
 80029b8:	1b00      	subs	r0, r0, r4
 80029ba:	2802      	cmp	r0, #2
 80029bc:	d9f5      	bls.n	80029aa <HAL_RCC_OscConfig+0x5a2>
                return HAL_TIMEOUT;
 80029be:	2003      	movs	r0, #3
 80029c0:	e02f      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40007000 	.word	0x40007000
 80029cc:	f99d808c 	.word	0xf99d808c
  return HAL_OK;
 80029d0:	2000      	movs	r0, #0
 80029d2:	e026      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
          __HAL_RCC_PLL_ENABLE();
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_RCC_OscConfig+0x62c>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029dc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80029e4:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80029e6:	f7fe ff1d 	bl	8001824 <HAL_GetTick>
 80029ea:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_RCC_OscConfig+0x62c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029f4:	d106      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5fc>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f6:	f7fe ff15 	bl	8001824 <HAL_GetTick>
 80029fa:	1b03      	subs	r3, r0, r4
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d9f5      	bls.n	80029ec <HAL_RCC_OscConfig+0x5e4>
              return HAL_TIMEOUT;
 8002a00:	2003      	movs	r0, #3
 8002a02:	e00e      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8002a04:	2000      	movs	r0, #0
 8002a06:	e00c      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
 8002a08:	2000      	movs	r0, #0
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
    return HAL_ERROR;
 8002a0c:	2001      	movs	r0, #1
}
 8002a0e:	4770      	bx	lr
        return HAL_ERROR;
 8002a10:	2001      	movs	r0, #1
 8002a12:	e006      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
            return HAL_ERROR;
 8002a14:	2001      	movs	r0, #1
 8002a16:	e004      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8002a18:	2001      	movs	r0, #1
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 8002a20:	2000      	movs	r0, #0
}
 8002a22:	b003      	add	sp, #12
 8002a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002a26:	2001      	movs	r0, #1
 8002a28:	e7fb      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
            return HAL_ERROR;
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	e7f9      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 8002a2e:	2001      	movs	r0, #1
 8002a30:	e7f7      	b.n	8002a22 <HAL_RCC_OscConfig+0x61a>
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	f000 8098 	beq.w	8002b6e <HAL_RCC_ClockConfig+0x136>
{
 8002a3e:	b570      	push	{r4, r5, r6, lr}
 8002a40:	460c      	mov	r4, r1
 8002a42:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b4e      	ldr	r3, [pc, #312]	; (8002b80 <HAL_RCC_ClockConfig+0x148>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	428b      	cmp	r3, r1
 8002a4e:	d20b      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a50:	4a4b      	ldr	r2, [pc, #300]	; (8002b80 <HAL_RCC_ClockConfig+0x148>)
 8002a52:	6813      	ldr	r3, [r2, #0]
 8002a54:	f023 0307 	bic.w	r3, r3, #7
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5c:	6813      	ldr	r3, [r2, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	428b      	cmp	r3, r1
 8002a64:	f040 8085 	bne.w	8002b72 <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	f013 0f01 	tst.w	r3, #1
 8002a6e:	d039      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a70:	686b      	ldr	r3, [r5, #4]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d026      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a7a:	bb63      	cbnz	r3, 8002ad6 <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a7c:	4a41      	ldr	r2, [pc, #260]	; (8002b84 <HAL_RCC_ClockConfig+0x14c>)
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	f012 0f02 	tst.w	r2, #2
 8002a84:	d106      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8002a86:	2001      	movs	r0, #1
 8002a88:	e070      	b.n	8002b6c <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	4a3e      	ldr	r2, [pc, #248]	; (8002b84 <HAL_RCC_ClockConfig+0x14c>)
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002a92:	d070      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a94:	493b      	ldr	r1, [pc, #236]	; (8002b84 <HAL_RCC_ClockConfig+0x14c>)
 8002a96:	688a      	ldr	r2, [r1, #8]
 8002a98:	f022 0203 	bic.w	r2, r2, #3
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fec0 	bl	8001824 <HAL_GetTick>
 8002aa4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <HAL_RCC_ClockConfig+0x14c>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	686a      	ldr	r2, [r5, #4]
 8002ab0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ab4:	d016      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab6:	f7fe feb5 	bl	8001824 <HAL_GetTick>
 8002aba:	1b80      	subs	r0, r0, r6
 8002abc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ac0:	4298      	cmp	r0, r3
 8002ac2:	d9f0      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	e051      	b.n	8002b6c <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <HAL_RCC_ClockConfig+0x14c>)
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002ad0:	d1e0      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	e04a      	b.n	8002b6c <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <HAL_RCC_ClockConfig+0x14c>)
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002ade:	d1d9      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	e043      	b.n	8002b6c <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	682b      	ldr	r3, [r5, #0]
 8002ae6:	f013 0f02 	tst.w	r3, #2
 8002aea:	d006      	beq.n	8002afa <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <HAL_RCC_ClockConfig+0x14c>)
 8002aee:	6893      	ldr	r3, [r2, #8]
 8002af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af4:	68a9      	ldr	r1, [r5, #8]
 8002af6:	430b      	orrs	r3, r1
 8002af8:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002afa:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_RCC_ClockConfig+0x148>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	42a3      	cmp	r3, r4
 8002b04:	d90a      	bls.n	8002b1c <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <HAL_RCC_ClockConfig+0x148>)
 8002b08:	6813      	ldr	r3, [r2, #0]
 8002b0a:	f023 0307 	bic.w	r3, r3, #7
 8002b0e:	4323      	orrs	r3, r4
 8002b10:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	6813      	ldr	r3, [r2, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	42a3      	cmp	r3, r4
 8002b1a:	d12e      	bne.n	8002b7a <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	682b      	ldr	r3, [r5, #0]
 8002b1e:	f013 0f04 	tst.w	r3, #4
 8002b22:	d006      	beq.n	8002b32 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4a17      	ldr	r2, [pc, #92]	; (8002b84 <HAL_RCC_ClockConfig+0x14c>)
 8002b26:	6893      	ldr	r3, [r2, #8]
 8002b28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b2c:	68e9      	ldr	r1, [r5, #12]
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	682b      	ldr	r3, [r5, #0]
 8002b34:	f013 0f08 	tst.w	r3, #8
 8002b38:	d007      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3a:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <HAL_RCC_ClockConfig+0x14c>)
 8002b3c:	6893      	ldr	r3, [r2, #8]
 8002b3e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002b42:	6929      	ldr	r1, [r5, #16]
 8002b44:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b48:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b4a:	f7ff fc03 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <HAL_RCC_ClockConfig+0x14c>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b56:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <HAL_RCC_ClockConfig+0x150>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	40d8      	lsrs	r0, r3
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x154>)
 8002b62:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x158>)
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	f7fe fe1a 	bl	80017a0 <HAL_InitTick>
}
 8002b6c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
}
 8002b70:	4770      	bx	lr
      return HAL_ERROR;
 8002b72:	2001      	movs	r0, #1
 8002b74:	e7fa      	b.n	8002b6c <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 8002b76:	2001      	movs	r0, #1
 8002b78:	e7f8      	b.n	8002b6c <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	e7f6      	b.n	8002b6c <HAL_RCC_ClockConfig+0x134>
 8002b7e:	bf00      	nop
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40021000 	.word	0x40021000
 8002b88:	080066c0 	.word	0x080066c0
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	20000014 	.word	0x20000014

08002b94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	4604      	mov	r4, r0
 8002b98:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b9a:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f013 0f03 	tst.w	r3, #3
 8002ba2:	d018      	beq.n	8002bd6 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ba4:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	6802      	ldr	r2, [r0, #0]
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d002      	beq.n	8002bb8 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002bb2:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002bb8:	2a00      	cmp	r2, #0
 8002bba:	f000 809e 	beq.w	8002cfa <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bbe:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	6842      	ldr	r2, [r0, #4]
       ||
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d001      	beq.n	8002bd2 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 8002bce:	2501      	movs	r5, #1
 8002bd0:	e7f0      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2500      	movs	r5, #0
 8002bd4:	e009      	b.n	8002bea <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 8002bd6:	6803      	ldr	r3, [r0, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d057      	beq.n	8002c8c <RCCEx_PLLSAI1_Config+0xf8>
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d05c      	beq.n	8002c9a <RCCEx_PLLSAI1_Config+0x106>
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d042      	beq.n	8002c6a <RCCEx_PLLSAI1_Config+0xd6>
 8002be4:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8002be6:	2d00      	cmp	r5, #0
 8002be8:	d1e4      	bne.n	8002bb4 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bea:	4a45      	ldr	r2, [pc, #276]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002bec:	6813      	ldr	r3, [r2, #0]
 8002bee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bf2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002bf4:	f7fe fe16 	bl	8001824 <HAL_GetTick>
 8002bf8:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bfa:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002c02:	d005      	beq.n	8002c10 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c04:	f7fe fe0e 	bl	8001824 <HAL_GetTick>
 8002c08:	1b83      	subs	r3, r0, r6
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d9f5      	bls.n	8002bfa <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 8002c0e:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8002c10:	2d00      	cmp	r5, #0
 8002c12:	d1cf      	bne.n	8002bb4 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8002c14:	2f00      	cmp	r7, #0
 8002c16:	d14e      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c18:	4939      	ldr	r1, [pc, #228]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c1a:	690b      	ldr	r3, [r1, #16]
 8002c1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c24:	68a0      	ldr	r0, [r4, #8]
 8002c26:	68e2      	ldr	r2, [r4, #12]
 8002c28:	0912      	lsrs	r2, r2, #4
 8002c2a:	0452      	lsls	r2, r2, #17
 8002c2c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002c30:	4313      	orrs	r3, r2
 8002c32:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c34:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c36:	6813      	ldr	r3, [r2, #0]
 8002c38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c3c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fdf1 	bl	8001824 <HAL_GetTick>
 8002c42:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c44:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002c4c:	d105      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c4e:	f7fe fde9 	bl	8001824 <HAL_GetTick>
 8002c52:	1b83      	subs	r3, r0, r6
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d9f5      	bls.n	8002c44 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8002c58:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8002c5a:	2d00      	cmp	r5, #0
 8002c5c:	d1aa      	bne.n	8002bb4 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c5e:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c60:	6913      	ldr	r3, [r2, #16]
 8002c62:	69a1      	ldr	r1, [r4, #24]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6113      	str	r3, [r2, #16]
 8002c68:	e7a4      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c6a:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	f012 0f02 	tst.w	r2, #2
 8002c72:	d01e      	beq.n	8002cb2 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c74:	4822      	ldr	r0, [pc, #136]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c76:	68c2      	ldr	r2, [r0, #12]
 8002c78:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002c7c:	6861      	ldr	r1, [r4, #4]
 8002c7e:	3901      	subs	r1, #1
 8002c80:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60c3      	str	r3, [r0, #12]
 8002c88:	2500      	movs	r5, #0
 8002c8a:	e7ac      	b.n	8002be6 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c8c:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002c94:	d1ee      	bne.n	8002c74 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 8002c96:	2501      	movs	r5, #1
 8002c98:	e7a5      	b.n	8002be6 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c9a:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002ca2:	d1e7      	bne.n	8002c74 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ca4:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002cac:	d1e2      	bne.n	8002c74 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 8002cae:	2501      	movs	r5, #1
 8002cb0:	e799      	b.n	8002be6 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 8002cb2:	2501      	movs	r5, #1
 8002cb4:	e797      	b.n	8002be6 <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cb6:	2f01      	cmp	r7, #1
 8002cb8:	d00f      	beq.n	8002cda <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cba:	4811      	ldr	r0, [pc, #68]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002cbc:	6902      	ldr	r2, [r0, #16]
 8002cbe:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002cc2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002cc6:	68a1      	ldr	r1, [r4, #8]
 8002cc8:	6963      	ldr	r3, [r4, #20]
 8002cca:	085b      	lsrs	r3, r3, #1
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	065b      	lsls	r3, r3, #25
 8002cd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	6103      	str	r3, [r0, #16]
 8002cd8:	e7ac      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cda:	4809      	ldr	r0, [pc, #36]	; (8002d00 <RCCEx_PLLSAI1_Config+0x16c>)
 8002cdc:	6902      	ldr	r2, [r0, #16]
 8002cde:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002ce2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002ce6:	68a1      	ldr	r1, [r4, #8]
 8002ce8:	6923      	ldr	r3, [r4, #16]
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	055b      	lsls	r3, r3, #21
 8002cf0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	6103      	str	r3, [r0, #16]
 8002cf8:	e79c      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 8002cfa:	2501      	movs	r5, #1
 8002cfc:	e75a      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x20>
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000

08002d04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	4604      	mov	r4, r0
 8002d08:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d0a:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f013 0f03 	tst.w	r3, #3
 8002d12:	d018      	beq.n	8002d46 <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d14:	4b4d      	ldr	r3, [pc, #308]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	6802      	ldr	r2, [r0, #0]
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d002      	beq.n	8002d28 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d22:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8002d24:	4628      	mov	r0, r5
 8002d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002d28:	2a00      	cmp	r2, #0
 8002d2a:	f000 808c 	beq.w	8002e46 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d36:	3301      	adds	r3, #1
 8002d38:	6842      	ldr	r2, [r0, #4]
       ||
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d001      	beq.n	8002d42 <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 8002d3e:	2501      	movs	r5, #1
 8002d40:	e7f0      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8002d42:	2500      	movs	r5, #0
 8002d44:	e009      	b.n	8002d5a <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 8002d46:	6803      	ldr	r3, [r0, #0]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d057      	beq.n	8002dfc <RCCEx_PLLSAI2_Config+0xf8>
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d05c      	beq.n	8002e0a <RCCEx_PLLSAI2_Config+0x106>
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d042      	beq.n	8002dda <RCCEx_PLLSAI2_Config+0xd6>
 8002d54:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8002d56:	2d00      	cmp	r5, #0
 8002d58:	d1e4      	bne.n	8002d24 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d5a:	4a3c      	ldr	r2, [pc, #240]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002d5c:	6813      	ldr	r3, [r2, #0]
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002d64:	f7fe fd5e 	bl	8001824 <HAL_GetTick>
 8002d68:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d6a:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002d72:	d005      	beq.n	8002d80 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d74:	f7fe fd56 	bl	8001824 <HAL_GetTick>
 8002d78:	1b83      	subs	r3, r0, r6
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d9f5      	bls.n	8002d6a <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 8002d7e:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8002d80:	2d00      	cmp	r5, #0
 8002d82:	d1cf      	bne.n	8002d24 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8002d84:	2f00      	cmp	r7, #0
 8002d86:	d14e      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d88:	4930      	ldr	r1, [pc, #192]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002d8a:	694b      	ldr	r3, [r1, #20]
 8002d8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d94:	68a0      	ldr	r0, [r4, #8]
 8002d96:	68e2      	ldr	r2, [r4, #12]
 8002d98:	0912      	lsrs	r2, r2, #4
 8002d9a:	0452      	lsls	r2, r2, #17
 8002d9c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002da0:	4313      	orrs	r3, r2
 8002da2:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002da4:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002dae:	f7fe fd39 	bl	8001824 <HAL_GetTick>
 8002db2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002db4:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002dbc:	d105      	bne.n	8002dca <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dbe:	f7fe fd31 	bl	8001824 <HAL_GetTick>
 8002dc2:	1b83      	subs	r3, r0, r6
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d9f5      	bls.n	8002db4 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 8002dc8:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	d1aa      	bne.n	8002d24 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dce:	4a1f      	ldr	r2, [pc, #124]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002dd0:	6953      	ldr	r3, [r2, #20]
 8002dd2:	6961      	ldr	r1, [r4, #20]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6153      	str	r3, [r2, #20]
 8002dd8:	e7a4      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	f012 0f02 	tst.w	r2, #2
 8002de2:	d01e      	beq.n	8002e22 <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002de4:	4819      	ldr	r0, [pc, #100]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002de6:	68c2      	ldr	r2, [r0, #12]
 8002de8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002dec:	6861      	ldr	r1, [r4, #4]
 8002dee:	3901      	subs	r1, #1
 8002df0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60c3      	str	r3, [r0, #12]
 8002df8:	2500      	movs	r5, #0
 8002dfa:	e7ac      	b.n	8002d56 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002e04:	d1ee      	bne.n	8002de4 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 8002e06:	2501      	movs	r5, #1
 8002e08:	e7a5      	b.n	8002d56 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e0a:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002e12:	d1e7      	bne.n	8002de4 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e14:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002e1c:	d1e2      	bne.n	8002de4 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 8002e1e:	2501      	movs	r5, #1
 8002e20:	e799      	b.n	8002d56 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 8002e22:	2501      	movs	r5, #1
 8002e24:	e797      	b.n	8002d56 <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e26:	4809      	ldr	r0, [pc, #36]	; (8002e4c <RCCEx_PLLSAI2_Config+0x148>)
 8002e28:	6942      	ldr	r2, [r0, #20]
 8002e2a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002e2e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002e32:	68a1      	ldr	r1, [r4, #8]
 8002e34:	6923      	ldr	r3, [r4, #16]
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	065b      	lsls	r3, r3, #25
 8002e3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e40:	4313      	orrs	r3, r2
 8002e42:	6143      	str	r3, [r0, #20]
 8002e44:	e7ae      	b.n	8002da4 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 8002e46:	2501      	movs	r5, #1
 8002e48:	e76c      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0x20>
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000

08002e50 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e58:	6803      	ldr	r3, [r0, #0]
 8002e5a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002e5e:	d033      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e60:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e66:	d01f      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002e68:	d80c      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002e6a:	b323      	cbz	r3, 8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e70:	d105      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e72:	2100      	movs	r1, #0
 8002e74:	3020      	adds	r0, #32
 8002e76:	f7ff ff45 	bl	8002d04 <RCCEx_PLLSAI2_Config>
 8002e7a:	4606      	mov	r6, r0
      break;
 8002e7c:	e020      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e7e:	2701      	movs	r7, #1
 8002e80:	463e      	mov	r6, r7
 8002e82:	e023      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e88:	d10b      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e8a:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e8c:	4a62      	ldr	r2, [pc, #392]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e92:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e96:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e9e:	2700      	movs	r7, #0
 8002ea0:	e014      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ea2:	2701      	movs	r7, #1
 8002ea4:	463e      	mov	r6, r7
 8002ea6:	e011      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea8:	4a5b      	ldr	r2, [pc, #364]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002eaa:	68d3      	ldr	r3, [r2, #12]
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eb2:	2600      	movs	r6, #0
 8002eb4:	e7ea      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	3004      	adds	r0, #4
 8002eba:	f7ff fe6b 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002ebe:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002ec0:	2e00      	cmp	r6, #0
 8002ec2:	d0e3      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002ec4:	4637      	mov	r7, r6
 8002ec6:	e001      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ec8:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eca:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002ed2:	d021      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002ed4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002ed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eda:	d079      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002edc:	d80e      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d07c      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002ee2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f104 0020 	add.w	r0, r4, #32
 8002eee:	f7ff ff09 	bl	8002d04 <RCCEx_PLLSAI2_Config>
 8002ef2:	4606      	mov	r6, r0
      break;
 8002ef4:	e005      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002ef6:	2701      	movs	r7, #1
 8002ef8:	463e      	mov	r6, r7
 8002efa:	e00d      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8002efc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f00:	d163      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x17a>
    if(ret == HAL_OK)
 8002f02:	2e00      	cmp	r6, #0
 8002f04:	d170      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f06:	4a44      	ldr	r2, [pc, #272]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f0c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002f10:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002f12:	430b      	orrs	r3, r1
 8002f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f1e:	f000 8084 	beq.w	800302a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f22:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002f2a:	d15f      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f34:	659a      	str	r2, [r3, #88]	; 0x58
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f40:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f44:	4a35      	ldr	r2, [pc, #212]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f4e:	f7fe fc69 	bl	8001824 <HAL_GetTick>
 8002f52:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f54:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe fc61 	bl	8001824 <HAL_GetTick>
 8002f62:	1b40      	subs	r0, r0, r5
 8002f64:	2802      	cmp	r0, #2
 8002f66:	d9f5      	bls.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x104>
        ret = HAL_TIMEOUT;
 8002f68:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8002f6a:	2e00      	cmp	r6, #0
 8002f6c:	d158      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f74:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002f78:	d016      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f7a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d012      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x158>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f82:	4a25      	ldr	r2, [pc, #148]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002f84:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f8c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002f90:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002f94:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f98:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002f9c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002fa0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fa8:	f013 0f01 	tst.w	r3, #1
 8002fac:	d121      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      if(ret == HAL_OK)
 8002fae:	2e00      	cmp	r6, #0
 8002fb0:	f040 8139 	bne.w	8003226 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb4:	4a18      	ldr	r2, [pc, #96]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002fb6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fbe:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc8:	e02b      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002fca:	2701      	movs	r7, #1
 8002fcc:	463e      	mov	r6, r7
 8002fce:	e7a3      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fd0:	4a11      	ldr	r2, [pc, #68]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002fd2:	68d3      	ldr	r3, [r2, #12]
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	60d3      	str	r3, [r2, #12]
      break;
 8002fda:	e792      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	1d20      	adds	r0, r4, #4
 8002fe0:	f7ff fdd8 	bl	8002b94 <RCCEx_PLLSAI1_Config>
 8002fe4:	4606      	mov	r6, r0
      break;
 8002fe6:	e78c      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8002fe8:	4637      	mov	r7, r6
 8002fea:	e795      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    FlagStatus       pwrclkchanged = RESET;
 8002fec:	f04f 0800 	mov.w	r8, #0
 8002ff0:	e7a8      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        tickstart = HAL_GetTick();
 8002ff2:	f7fe fc17 	bl	8001824 <HAL_GetTick>
 8002ff6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f013 0f02 	tst.w	r3, #2
 8003002:	d1d4      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x15e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe fc0e 	bl	8001824 <HAL_GetTick>
 8003008:	1b40      	subs	r0, r0, r5
 800300a:	f241 3388 	movw	r3, #5000	; 0x1388
 800300e:	4298      	cmp	r0, r3
 8003010:	d9f2      	bls.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
            ret = HAL_TIMEOUT;
 8003012:	2603      	movs	r6, #3
 8003014:	e7cb      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	40007000 	.word	0x40007000
      status = ret;
 8003020:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8003022:	f1b8 0f00 	cmp.w	r8, #0
 8003026:	f040 8100 	bne.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	f013 0f01 	tst.w	r3, #1
 8003030:	d008      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003032:	4a9d      	ldr	r2, [pc, #628]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003034:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003038:	f023 0303 	bic.w	r3, r3, #3
 800303c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800303e:	430b      	orrs	r3, r1
 8003040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	f013 0f02 	tst.w	r3, #2
 800304a:	d008      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800304c:	4a96      	ldr	r2, [pc, #600]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800304e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003052:	f023 030c 	bic.w	r3, r3, #12
 8003056:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003058:	430b      	orrs	r3, r1
 800305a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	f013 0f04 	tst.w	r3, #4
 8003064:	d008      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x228>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003066:	4a90      	ldr	r2, [pc, #576]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003068:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800306c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003070:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003072:	430b      	orrs	r3, r1
 8003074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	f013 0f08 	tst.w	r3, #8
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003080:	4a89      	ldr	r2, [pc, #548]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003082:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003086:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800308a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800308c:	430b      	orrs	r3, r1
 800308e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	f013 0f10 	tst.w	r3, #16
 8003098:	d008      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800309a:	4a83      	ldr	r2, [pc, #524]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800309c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80030a6:	430b      	orrs	r3, r1
 80030a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	f013 0f20 	tst.w	r3, #32
 80030b2:	d008      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030b4:	4a7c      	ldr	r2, [pc, #496]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80030c0:	430b      	orrs	r3, r1
 80030c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80030cc:	d008      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ce:	4a76      	ldr	r2, [pc, #472]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030d4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80030d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80030da:	430b      	orrs	r3, r1
 80030dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030e6:	d008      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030e8:	4a6f      	ldr	r2, [pc, #444]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80030f2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80030f4:	430b      	orrs	r3, r1
 80030f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003100:	d008      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003102:	4a69      	ldr	r2, [pc, #420]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003104:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003108:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800310c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800310e:	430b      	orrs	r3, r1
 8003110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	f013 0f80 	tst.w	r3, #128	; 0x80
 800311a:	d008      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800311c:	4a62      	ldr	r2, [pc, #392]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800311e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003122:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003126:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003128:	430b      	orrs	r3, r1
 800312a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003136:	4a5c      	ldr	r2, [pc, #368]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003138:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800313c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003140:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003142:	430b      	orrs	r3, r1
 8003144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800314e:	d00f      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x320>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003150:	4a55      	ldr	r2, [pc, #340]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003152:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003156:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800315a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800315c:	430b      	orrs	r3, r1
 800315e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003162:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003168:	d065      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800316a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800316e:	d067      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003176:	d00f      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003178:	4a4b      	ldr	r2, [pc, #300]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800317a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800317e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003182:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003184:	430b      	orrs	r3, r1
 8003186:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800318a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800318c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003190:	d05e      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x400>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003196:	d060      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800319e:	d00f      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031a0:	4a41      	ldr	r2, [pc, #260]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80031a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80031a6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80031aa:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80031ac:	430b      	orrs	r3, r1
 80031ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031b2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80031b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b8:	d057      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031be:	d059      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x424>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80031c6:	d00f      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031c8:	4a37      	ldr	r2, [pc, #220]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80031ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80031ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80031d2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80031d4:	430b      	orrs	r3, r1
 80031d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80031dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031e0:	d050      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x434>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e6:	d055      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x444>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80031ee:	d008      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031f0:	4a2d      	ldr	r2, [pc, #180]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80031f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80031f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031fa:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80031fc:	430b      	orrs	r3, r1
 80031fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003208:	d009      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800320a:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800320c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003214:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003218:	430b      	orrs	r3, r1
 800321a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800321e:	4638      	mov	r0, r7
 8003220:	b002      	add	sp, #8
 8003222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8003226:	4637      	mov	r7, r6
 8003228:	e6fb      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800322c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800322e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003232:	6593      	str	r3, [r2, #88]	; 0x58
 8003234:	e6f9      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003236:	68d3      	ldr	r3, [r2, #12]
 8003238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800323c:	60d3      	str	r3, [r2, #12]
 800323e:	e797      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x320>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003240:	2101      	movs	r1, #1
 8003242:	1d20      	adds	r0, r4, #4
 8003244:	f7ff fca6 	bl	8002b94 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003248:	2800      	cmp	r0, #0
 800324a:	d091      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x320>
          status = ret;
 800324c:	4607      	mov	r7, r0
 800324e:	e78f      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x320>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003250:	68d3      	ldr	r3, [r2, #12]
 8003252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003256:	60d3      	str	r3, [r2, #12]
 8003258:	e79e      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x348>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800325a:	2101      	movs	r1, #1
 800325c:	1d20      	adds	r0, r4, #4
 800325e:	f7ff fc99 	bl	8002b94 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003262:	2800      	cmp	r0, #0
 8003264:	d098      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x348>
        status = ret;
 8003266:	4607      	mov	r7, r0
 8003268:	e796      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x348>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800326a:	68d3      	ldr	r3, [r2, #12]
 800326c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003270:	60d3      	str	r3, [r2, #12]
 8003272:	e7a5      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003274:	2101      	movs	r1, #1
 8003276:	1d20      	adds	r0, r4, #4
 8003278:	f7ff fc8c 	bl	8002b94 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800327c:	2800      	cmp	r0, #0
 800327e:	d09f      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        status = ret;
 8003280:	4607      	mov	r7, r0
 8003282:	e79d      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003284:	2102      	movs	r1, #2
 8003286:	1d20      	adds	r0, r4, #4
 8003288:	f7ff fc84 	bl	8002b94 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800328c:	2800      	cmp	r0, #0
 800328e:	d0ab      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
        status = ret;
 8003290:	4607      	mov	r7, r0
 8003292:	e7a9      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003294:	2102      	movs	r1, #2
 8003296:	f104 0020 	add.w	r0, r4, #32
 800329a:	f7ff fd33 	bl	8002d04 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 800329e:	2800      	cmp	r0, #0
 80032a0:	d0a2      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
        status = ret;
 80032a2:	4607      	mov	r7, r0
 80032a4:	e7a0      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000

080032ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	4605      	mov	r5, r0
 80032b4:	4688      	mov	r8, r1
 80032b6:	4617      	mov	r7, r2
 80032b8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032ba:	f7fe fab3 	bl	8001824 <HAL_GetTick>
 80032be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032c0:	1a1b      	subs	r3, r3, r0
 80032c2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80032c6:	f7fe faad 	bl	8001824 <HAL_GetTick>
 80032ca:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80032d4:	fb09 f303 	mul.w	r3, r9, r3
 80032d8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032da:	682b      	ldr	r3, [r5, #0]
 80032dc:	689c      	ldr	r4, [r3, #8]
 80032de:	ea38 0304 	bics.w	r3, r8, r4
 80032e2:	bf0c      	ite	eq
 80032e4:	2401      	moveq	r4, #1
 80032e6:	2400      	movne	r4, #0
 80032e8:	42bc      	cmp	r4, r7
 80032ea:	d040      	beq.n	800336e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ec:	f1b6 3fff 	cmp.w	r6, #4294967295
 80032f0:	d0f3      	beq.n	80032da <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f2:	f7fe fa97 	bl	8001824 <HAL_GetTick>
 80032f6:	eba0 000a 	sub.w	r0, r0, sl
 80032fa:	4548      	cmp	r0, r9
 80032fc:	d20a      	bcs.n	8003314 <SPI_WaitFlagStateUntilTimeout+0x68>
 80032fe:	f1b9 0f00 	cmp.w	r9, #0
 8003302:	d007      	beq.n	8003314 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003304:	9a01      	ldr	r2, [sp, #4]
 8003306:	b102      	cbz	r2, 800330a <SPI_WaitFlagStateUntilTimeout+0x5e>
 8003308:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800330a:	9b01      	ldr	r3, [sp, #4]
 800330c:	3b01      	subs	r3, #1
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	4691      	mov	r9, r2
 8003312:	e7e2      	b.n	80032da <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003314:	682a      	ldr	r2, [r5, #0]
 8003316:	6853      	ldr	r3, [r2, #4]
 8003318:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800331c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331e:	686b      	ldr	r3, [r5, #4]
 8003320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003324:	d00b      	beq.n	800333e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003326:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332c:	d014      	beq.n	8003358 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 800332e:	2301      	movs	r3, #1
 8003330:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003334:	2300      	movs	r3, #0
 8003336:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800333a:	2003      	movs	r0, #3
 800333c:	e018      	b.n	8003370 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800333e:	68ab      	ldr	r3, [r5, #8]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d002      	beq.n	800334c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334a:	d1ec      	bne.n	8003326 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800334c:	682a      	ldr	r2, [r5, #0]
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e7e6      	b.n	8003326 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8003358:	682a      	ldr	r2, [r5, #0]
 800335a:	6813      	ldr	r3, [r2, #0]
 800335c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	682a      	ldr	r2, [r5, #0]
 8003364:	6813      	ldr	r3, [r2, #0]
 8003366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e7df      	b.n	800332e <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800336e:	2000      	movs	r0, #0
}
 8003370:	b002      	add	sp, #8
 8003372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003376:	bf00      	nop
 8003378:	20000000 	.word	0x20000000

0800337c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	4607      	mov	r7, r0
 8003384:	460d      	mov	r5, r1
 8003386:	4616      	mov	r6, r2
 8003388:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800338a:	f7fe fa4b 	bl	8001824 <HAL_GetTick>
 800338e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003390:	1a1b      	subs	r3, r3, r0
 8003392:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 8003396:	f7fe fa45 	bl	8001824 <HAL_GetTick>
 800339a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800339c:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <SPI_WaitFifoStateUntilTimeout+0xd8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80033a8:	0d1b      	lsrs	r3, r3, #20
 80033aa:	fb09 f303 	mul.w	r3, r9, r3
 80033ae:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80033b0:	e002      	b.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 80033b2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80033b6:	d10b      	bne.n	80033d0 <SPI_WaitFifoStateUntilTimeout+0x54>
  while ((hspi->Instance->SR & Fifo) != State)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689c      	ldr	r4, [r3, #8]
 80033bc:	402c      	ands	r4, r5
 80033be:	42b4      	cmp	r4, r6
 80033c0:	d044      	beq.n	800344c <SPI_WaitFifoStateUntilTimeout+0xd0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033c2:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 80033c6:	d1f4      	bne.n	80033b2 <SPI_WaitFifoStateUntilTimeout+0x36>
 80033c8:	2e00      	cmp	r6, #0
 80033ca:	d1f2      	bne.n	80033b2 <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80033cc:	7b1b      	ldrb	r3, [r3, #12]
 80033ce:	e7f0      	b.n	80033b2 <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033d0:	f7fe fa28 	bl	8001824 <HAL_GetTick>
 80033d4:	eba0 000a 	sub.w	r0, r0, sl
 80033d8:	4548      	cmp	r0, r9
 80033da:	d20a      	bcs.n	80033f2 <SPI_WaitFifoStateUntilTimeout+0x76>
 80033dc:	f1b9 0f00 	cmp.w	r9, #0
 80033e0:	d007      	beq.n	80033f2 <SPI_WaitFifoStateUntilTimeout+0x76>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033e2:	9a01      	ldr	r2, [sp, #4]
 80033e4:	b102      	cbz	r2, 80033e8 <SPI_WaitFifoStateUntilTimeout+0x6c>
 80033e6:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 80033e8:	9b01      	ldr	r3, [sp, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	4691      	mov	r9, r2
 80033f0:	e7e2      	b.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	6853      	ldr	r3, [r2, #4]
 80033f6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80033fa:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003402:	d00b      	beq.n	800341c <SPI_WaitFifoStateUntilTimeout+0xa0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340a:	d014      	beq.n	8003436 <SPI_WaitFifoStateUntilTimeout+0xba>
        hspi->State = HAL_SPI_STATE_READY;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003412:	2300      	movs	r3, #0
 8003414:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003418:	2003      	movs	r0, #3
 800341a:	e018      	b.n	800344e <SPI_WaitFifoStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003422:	d002      	beq.n	800342a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003428:	d1ec      	bne.n	8003404 <SPI_WaitFifoStateUntilTimeout+0x88>
          __HAL_SPI_DISABLE(hspi);
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	6813      	ldr	r3, [r2, #0]
 800342e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e7e6      	b.n	8003404 <SPI_WaitFifoStateUntilTimeout+0x88>
          SPI_RESET_CRC(hspi);
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	6813      	ldr	r3, [r2, #0]
 800343a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	6813      	ldr	r3, [r2, #0]
 8003444:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e7df      	b.n	800340c <SPI_WaitFifoStateUntilTimeout+0x90>
    }
  }

  return HAL_OK;
 800344c:	2000      	movs	r0, #0
}
 800344e:	b002      	add	sp, #8
 8003450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003454:	20000000 	.word	0x20000000

08003458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	4604      	mov	r4, r0
 800345e:	460d      	mov	r5, r1
 8003460:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003462:	9200      	str	r2, [sp, #0]
 8003464:	460b      	mov	r3, r1
 8003466:	2200      	movs	r2, #0
 8003468:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800346c:	f7ff ff86 	bl	800337c <SPI_WaitFifoStateUntilTimeout>
 8003470:	b9b0      	cbnz	r0, 80034a0 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003472:	9600      	str	r6, [sp, #0]
 8003474:	462b      	mov	r3, r5
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	4620      	mov	r0, r4
 800347c:	f7ff ff16 	bl	80032ac <SPI_WaitFlagStateUntilTimeout>
 8003480:	b9a8      	cbnz	r0, 80034ae <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003482:	9600      	str	r6, [sp, #0]
 8003484:	462b      	mov	r3, r5
 8003486:	2200      	movs	r2, #0
 8003488:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800348c:	4620      	mov	r0, r4
 800348e:	f7ff ff75 	bl	800337c <SPI_WaitFifoStateUntilTimeout>
 8003492:	b150      	cbz	r0, 80034aa <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003494:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003496:	f043 0320 	orr.w	r3, r3, #32
 800349a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800349c:	2003      	movs	r0, #3
 800349e:	e004      	b.n	80034aa <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80034a2:	f043 0320 	orr.w	r3, r3, #32
 80034a6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80034a8:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80034aa:	b002      	add	sp, #8
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80034b0:	f043 0320 	orr.w	r3, r3, #32
 80034b4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80034b6:	2003      	movs	r0, #3
 80034b8:	e7f7      	b.n	80034aa <SPI_EndRxTxTransaction+0x52>

080034ba <HAL_SPI_Init>:
  if (hspi == NULL)
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d06a      	beq.n	8003594 <HAL_SPI_Init+0xda>
{
 80034be:	b510      	push	{r4, lr}
 80034c0:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034c4:	b933      	cbnz	r3, 80034d4 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034c6:	6843      	ldr	r3, [r0, #4]
 80034c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034cc:	d005      	beq.n	80034da <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61c3      	str	r3, [r0, #28]
 80034d2:	e002      	b.n	80034da <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034d8:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034da:	2300      	movs	r3, #0
 80034dc:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80034de:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d04d      	beq.n	8003582 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 80034e6:	2302      	movs	r3, #2
 80034e8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80034ec:	6822      	ldr	r2, [r4, #0]
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034f6:	68e3      	ldr	r3, [r4, #12]
 80034f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034fc:	d947      	bls.n	800358e <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034fe:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003500:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003504:	d004      	beq.n	8003510 <HAL_SPI_Init+0x56>
 8003506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800350a:	d001      	beq.n	8003510 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350c:	2300      	movs	r3, #0
 800350e:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003510:	6863      	ldr	r3, [r4, #4]
 8003512:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003516:	68a1      	ldr	r1, [r4, #8]
 8003518:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800351c:	430b      	orrs	r3, r1
 800351e:	6921      	ldr	r1, [r4, #16]
 8003520:	f001 0102 	and.w	r1, r1, #2
 8003524:	430b      	orrs	r3, r1
 8003526:	6961      	ldr	r1, [r4, #20]
 8003528:	f001 0101 	and.w	r1, r1, #1
 800352c:	430b      	orrs	r3, r1
 800352e:	69a1      	ldr	r1, [r4, #24]
 8003530:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003534:	430b      	orrs	r3, r1
 8003536:	69e1      	ldr	r1, [r4, #28]
 8003538:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800353c:	430b      	orrs	r3, r1
 800353e:	6a21      	ldr	r1, [r4, #32]
 8003540:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003544:	430b      	orrs	r3, r1
 8003546:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003548:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800354c:	6820      	ldr	r0, [r4, #0]
 800354e:	430b      	orrs	r3, r1
 8003550:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003552:	8b63      	ldrh	r3, [r4, #26]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800355a:	f001 0110 	and.w	r1, r1, #16
 800355e:	430b      	orrs	r3, r1
 8003560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003562:	f001 0108 	and.w	r1, r1, #8
 8003566:	430b      	orrs	r3, r1
 8003568:	68e1      	ldr	r1, [r4, #12]
 800356a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800356e:	430b      	orrs	r3, r1
 8003570:	6821      	ldr	r1, [r4, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003576:	2000      	movs	r0, #0
 8003578:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800357a:	2301      	movs	r3, #1
 800357c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003580:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003582:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003586:	4620      	mov	r0, r4
 8003588:	f7fd fdbc 	bl	8001104 <HAL_SPI_MspInit>
 800358c:	e7ab      	b.n	80034e6 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800358e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003592:	e7b5      	b.n	8003500 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003594:	2001      	movs	r0, #1
}
 8003596:	4770      	bx	lr

08003598 <HAL_SPI_TransmitReceive>:
{
 8003598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800359c:	461f      	mov	r7, r3
 800359e:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80035a0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	f000 8164 	beq.w	8003872 <HAL_SPI_TransmitReceive+0x2da>
 80035aa:	4604      	mov	r4, r0
 80035ac:	4688      	mov	r8, r1
 80035ae:	4691      	mov	r9, r2
 80035b0:	2301      	movs	r3, #1
 80035b2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80035b6:	f7fe f935 	bl	8001824 <HAL_GetTick>
 80035ba:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80035bc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80035c0:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80035c2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d00a      	beq.n	80035de <HAL_SPI_TransmitReceive+0x46>
 80035c8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80035cc:	f040 8138 	bne.w	8003840 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035d0:	68a2      	ldr	r2, [r4, #8]
 80035d2:	2a00      	cmp	r2, #0
 80035d4:	f040 813d 	bne.w	8003852 <HAL_SPI_TransmitReceive+0x2ba>
 80035d8:	2b04      	cmp	r3, #4
 80035da:	f040 813c 	bne.w	8003856 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035de:	f1b8 0f00 	cmp.w	r8, #0
 80035e2:	f000 813a 	beq.w	800385a <HAL_SPI_TransmitReceive+0x2c2>
 80035e6:	f1b9 0f00 	cmp.w	r9, #0
 80035ea:	f000 8138 	beq.w	800385e <HAL_SPI_TransmitReceive+0x2c6>
 80035ee:	2f00      	cmp	r7, #0
 80035f0:	f000 8137 	beq.w	8003862 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035f4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d002      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035fe:	2305      	movs	r3, #5
 8003600:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003604:	2300      	movs	r3, #0
 8003606:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003608:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800360c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003610:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003614:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003618:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800361a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800361c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800361e:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003620:	68e3      	ldr	r3, [r4, #12]
 8003622:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003626:	d801      	bhi.n	800362c <HAL_SPI_TransmitReceive+0x94>
 8003628:	2f01      	cmp	r7, #1
 800362a:	d923      	bls.n	8003674 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800362c:	6822      	ldr	r2, [r4, #0]
 800362e:	6853      	ldr	r3, [r2, #4]
 8003630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003634:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800363e:	d103      	bne.n	8003648 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003646:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003648:	68e3      	ldr	r3, [r4, #12]
 800364a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800364e:	d958      	bls.n	8003702 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003650:	6863      	ldr	r3, [r4, #4]
 8003652:	b10b      	cbz	r3, 8003658 <HAL_SPI_TransmitReceive+0xc0>
 8003654:	2f01      	cmp	r7, #1
 8003656:	d10b      	bne.n	8003670 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003658:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	8812      	ldrh	r2, [r2, #0]
 800365e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003660:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003662:	3302      	adds	r3, #2
 8003664:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003666:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29b      	uxth	r3, r3
 800366e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003670:	2701      	movs	r7, #1
 8003672:	e025      	b.n	80036c0 <HAL_SPI_TransmitReceive+0x128>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003674:	6822      	ldr	r2, [r4, #0]
 8003676:	6853      	ldr	r3, [r2, #4]
 8003678:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800367c:	6053      	str	r3, [r2, #4]
 800367e:	e7da      	b.n	8003636 <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	f012 0f01 	tst.w	r2, #1
 8003688:	d011      	beq.n	80036ae <HAL_SPI_TransmitReceive+0x116>
 800368a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800368e:	b292      	uxth	r2, r2
 8003690:	b16a      	cbz	r2, 80036ae <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003696:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800369a:	3302      	adds	r3, #2
 800369c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800369e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80036ac:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036ae:	f7fe f8b9 	bl	8001824 <HAL_GetTick>
 80036b2:	1b83      	subs	r3, r0, r6
 80036b4:	42ab      	cmp	r3, r5
 80036b6:	d303      	bcc.n	80036c0 <HAL_SPI_TransmitReceive+0x128>
 80036b8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80036bc:	f040 80d3 	bne.w	8003866 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	b92b      	cbnz	r3, 80036d2 <HAL_SPI_TransmitReceive+0x13a>
 80036c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80ad 	beq.w	800382c <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	f012 0f02 	tst.w	r2, #2
 80036da:	d0d1      	beq.n	8003680 <HAL_SPI_TransmitReceive+0xe8>
 80036dc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80036de:	b292      	uxth	r2, r2
 80036e0:	2a00      	cmp	r2, #0
 80036e2:	d0cd      	beq.n	8003680 <HAL_SPI_TransmitReceive+0xe8>
 80036e4:	2f00      	cmp	r7, #0
 80036e6:	d0cb      	beq.n	8003680 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80036ea:	8812      	ldrh	r2, [r2, #0]
 80036ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036f0:	3302      	adds	r3, #2
 80036f2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80036f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80036fe:	2700      	movs	r7, #0
 8003700:	e7be      	b.n	8003680 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003702:	6863      	ldr	r3, [r4, #4]
 8003704:	b10b      	cbz	r3, 800370a <HAL_SPI_TransmitReceive+0x172>
 8003706:	2f01      	cmp	r7, #1
 8003708:	d10f      	bne.n	800372a <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 800370a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d90d      	bls.n	800372e <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003712:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	8812      	ldrh	r2, [r2, #0]
 8003718:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800371a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800371c:	3302      	adds	r3, #2
 800371e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003720:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b02      	subs	r3, #2
 8003726:	b29b      	uxth	r3, r3
 8003728:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800372a:	2701      	movs	r7, #1
 800372c:	e049      	b.n	80037c2 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800372e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003738:	3301      	adds	r3, #1
 800373a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800373c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29b      	uxth	r3, r3
 8003744:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003746:	e7f0      	b.n	800372a <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8003748:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800374a:	b292      	uxth	r2, r2
 800374c:	2a01      	cmp	r2, #1
 800374e:	d90c      	bls.n	800376a <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003750:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003752:	8812      	ldrh	r2, [r2, #0]
 8003754:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003756:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003758:	3302      	adds	r3, #2
 800375a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800375c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b02      	subs	r3, #2
 8003762:	b29b      	uxth	r3, r3
 8003764:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003766:	2700      	movs	r7, #0
 8003768:	e03d      	b.n	80037e6 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800376a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003770:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003772:	3301      	adds	r3, #1
 8003774:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003776:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29b      	uxth	r3, r3
 800377e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003780:	2700      	movs	r7, #0
 8003782:	e030      	b.n	80037e6 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	6853      	ldr	r3, [r2, #4]
 8003788:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800378c:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800378e:	2701      	movs	r7, #1
 8003790:	e00d      	b.n	80037ae <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003792:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003794:	7b1b      	ldrb	r3, [r3, #12]
 8003796:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800379a:	3301      	adds	r3, #1
 800379c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800379e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80037ac:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037ae:	f7fe f839 	bl	8001824 <HAL_GetTick>
 80037b2:	1b80      	subs	r0, r0, r6
 80037b4:	42a8      	cmp	r0, r5
 80037b6:	d302      	bcc.n	80037be <HAL_SPI_TransmitReceive+0x226>
 80037b8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037bc:	d155      	bne.n	800386a <HAL_SPI_TransmitReceive+0x2d2>
 80037be:	2d00      	cmp	r5, #0
 80037c0:	d055      	beq.n	800386e <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b923      	cbnz	r3, 80037d2 <HAL_SPI_TransmitReceive+0x23a>
 80037c8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d02c      	beq.n	800382c <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	f012 0f02 	tst.w	r2, #2
 80037da:	d004      	beq.n	80037e6 <HAL_SPI_TransmitReceive+0x24e>
 80037dc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80037de:	b292      	uxth	r2, r2
 80037e0:	b10a      	cbz	r2, 80037e6 <HAL_SPI_TransmitReceive+0x24e>
 80037e2:	2f00      	cmp	r7, #0
 80037e4:	d1b0      	bne.n	8003748 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	f012 0f01 	tst.w	r2, #1
 80037ee:	d0de      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x216>
 80037f0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80037f4:	b292      	uxth	r2, r2
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	d0d9      	beq.n	80037ae <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 80037fa:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80037fe:	b292      	uxth	r2, r2
 8003800:	2a01      	cmp	r2, #1
 8003802:	d9c6      	bls.n	8003792 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003808:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800380a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800380c:	3302      	adds	r3, #2
 800380e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003810:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b02      	subs	r3, #2
 8003818:	b29b      	uxth	r3, r3
 800381a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800381e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d9ad      	bls.n	8003784 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8003828:	2701      	movs	r7, #1
 800382a:	e7c0      	b.n	80037ae <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800382c:	4632      	mov	r2, r6
 800382e:	4629      	mov	r1, r5
 8003830:	4620      	mov	r0, r4
 8003832:	f7ff fe11 	bl	8003458 <SPI_EndRxTxTransaction>
 8003836:	b120      	cbz	r0, 8003842 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003838:	2320      	movs	r3, #32
 800383a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800383c:	2001      	movs	r0, #1
 800383e:	e000      	b.n	8003842 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8003840:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003842:	2301      	movs	r3, #1
 8003844:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003848:	2300      	movs	r3, #0
 800384a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800384e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003852:	2002      	movs	r0, #2
 8003854:	e7f5      	b.n	8003842 <HAL_SPI_TransmitReceive+0x2aa>
 8003856:	2002      	movs	r0, #2
 8003858:	e7f3      	b.n	8003842 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 800385a:	2001      	movs	r0, #1
 800385c:	e7f1      	b.n	8003842 <HAL_SPI_TransmitReceive+0x2aa>
 800385e:	2001      	movs	r0, #1
 8003860:	e7ef      	b.n	8003842 <HAL_SPI_TransmitReceive+0x2aa>
 8003862:	2001      	movs	r0, #1
 8003864:	e7ed      	b.n	8003842 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003866:	2003      	movs	r0, #3
 8003868:	e7eb      	b.n	8003842 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 800386a:	2003      	movs	r0, #3
 800386c:	e7e9      	b.n	8003842 <HAL_SPI_TransmitReceive+0x2aa>
 800386e:	2003      	movs	r0, #3
 8003870:	e7e7      	b.n	8003842 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8003872:	2002      	movs	r0, #2
 8003874:	e7eb      	b.n	800384e <HAL_SPI_TransmitReceive+0x2b6>
	...

08003878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800387c:	f7fd fce8 	bl	8001250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003880:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003882:	e003      	b.n	800388c <LoopCopyDataInit>

08003884 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003886:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003888:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800388a:	3104      	adds	r1, #4

0800388c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800388c:	480a      	ldr	r0, [pc, #40]	; (80038b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8003890:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003892:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003894:	d3f6      	bcc.n	8003884 <CopyDataInit>
	ldr	r2, =_sbss
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003898:	e002      	b.n	80038a0 <LoopFillZerobss>

0800389a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800389a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800389c:	f842 3b04 	str.w	r3, [r2], #4

080038a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <LoopForever+0x16>)
	cmp	r2, r3
 80038a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80038a4:	d3f9      	bcc.n	800389a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038a6:	f000 f817 	bl	80038d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038aa:	f7fd fb01 	bl	8000eb0 <main>

080038ae <LoopForever>:

LoopForever:
    b LoopForever
 80038ae:	e7fe      	b.n	80038ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80038b0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80038b4:	08006c50 	.word	0x08006c50
	ldr	r0, =_sdata
 80038b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80038bc:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 80038c0:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 80038c4:	200010c0 	.word	0x200010c0

080038c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038c8:	e7fe      	b.n	80038c8 <ADC1_2_IRQHandler>
	...

080038cc <__errno>:
 80038cc:	4b01      	ldr	r3, [pc, #4]	; (80038d4 <__errno+0x8>)
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000018 	.word	0x20000018

080038d8 <__libc_init_array>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	4d0d      	ldr	r5, [pc, #52]	; (8003910 <__libc_init_array+0x38>)
 80038dc:	4c0d      	ldr	r4, [pc, #52]	; (8003914 <__libc_init_array+0x3c>)
 80038de:	1b64      	subs	r4, r4, r5
 80038e0:	10a4      	asrs	r4, r4, #2
 80038e2:	2600      	movs	r6, #0
 80038e4:	42a6      	cmp	r6, r4
 80038e6:	d109      	bne.n	80038fc <__libc_init_array+0x24>
 80038e8:	4d0b      	ldr	r5, [pc, #44]	; (8003918 <__libc_init_array+0x40>)
 80038ea:	4c0c      	ldr	r4, [pc, #48]	; (800391c <__libc_init_array+0x44>)
 80038ec:	f002 fec4 	bl	8006678 <_init>
 80038f0:	1b64      	subs	r4, r4, r5
 80038f2:	10a4      	asrs	r4, r4, #2
 80038f4:	2600      	movs	r6, #0
 80038f6:	42a6      	cmp	r6, r4
 80038f8:	d105      	bne.n	8003906 <__libc_init_array+0x2e>
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003900:	4798      	blx	r3
 8003902:	3601      	adds	r6, #1
 8003904:	e7ee      	b.n	80038e4 <__libc_init_array+0xc>
 8003906:	f855 3b04 	ldr.w	r3, [r5], #4
 800390a:	4798      	blx	r3
 800390c:	3601      	adds	r6, #1
 800390e:	e7f2      	b.n	80038f6 <__libc_init_array+0x1e>
 8003910:	08006c40 	.word	0x08006c40
 8003914:	08006c40 	.word	0x08006c40
 8003918:	08006c40 	.word	0x08006c40
 800391c:	08006c44 	.word	0x08006c44

08003920 <memcpy>:
 8003920:	440a      	add	r2, r1
 8003922:	4291      	cmp	r1, r2
 8003924:	f100 33ff 	add.w	r3, r0, #4294967295
 8003928:	d100      	bne.n	800392c <memcpy+0xc>
 800392a:	4770      	bx	lr
 800392c:	b510      	push	{r4, lr}
 800392e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003936:	4291      	cmp	r1, r2
 8003938:	d1f9      	bne.n	800392e <memcpy+0xe>
 800393a:	bd10      	pop	{r4, pc}

0800393c <memset>:
 800393c:	4402      	add	r2, r0
 800393e:	4603      	mov	r3, r0
 8003940:	4293      	cmp	r3, r2
 8003942:	d100      	bne.n	8003946 <memset+0xa>
 8003944:	4770      	bx	lr
 8003946:	f803 1b01 	strb.w	r1, [r3], #1
 800394a:	e7f9      	b.n	8003940 <memset+0x4>

0800394c <__cvt>:
 800394c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003950:	ec55 4b10 	vmov	r4, r5, d0
 8003954:	2d00      	cmp	r5, #0
 8003956:	460e      	mov	r6, r1
 8003958:	4619      	mov	r1, r3
 800395a:	462b      	mov	r3, r5
 800395c:	bfbb      	ittet	lt
 800395e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003962:	461d      	movlt	r5, r3
 8003964:	2300      	movge	r3, #0
 8003966:	232d      	movlt	r3, #45	; 0x2d
 8003968:	700b      	strb	r3, [r1, #0]
 800396a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800396c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003970:	4691      	mov	r9, r2
 8003972:	f023 0820 	bic.w	r8, r3, #32
 8003976:	bfbc      	itt	lt
 8003978:	4622      	movlt	r2, r4
 800397a:	4614      	movlt	r4, r2
 800397c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003980:	d005      	beq.n	800398e <__cvt+0x42>
 8003982:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003986:	d100      	bne.n	800398a <__cvt+0x3e>
 8003988:	3601      	adds	r6, #1
 800398a:	2102      	movs	r1, #2
 800398c:	e000      	b.n	8003990 <__cvt+0x44>
 800398e:	2103      	movs	r1, #3
 8003990:	ab03      	add	r3, sp, #12
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	ab02      	add	r3, sp, #8
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	ec45 4b10 	vmov	d0, r4, r5
 800399c:	4653      	mov	r3, sl
 800399e:	4632      	mov	r2, r6
 80039a0:	f000 fcfa 	bl	8004398 <_dtoa_r>
 80039a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039a8:	4607      	mov	r7, r0
 80039aa:	d102      	bne.n	80039b2 <__cvt+0x66>
 80039ac:	f019 0f01 	tst.w	r9, #1
 80039b0:	d022      	beq.n	80039f8 <__cvt+0xac>
 80039b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80039b6:	eb07 0906 	add.w	r9, r7, r6
 80039ba:	d110      	bne.n	80039de <__cvt+0x92>
 80039bc:	783b      	ldrb	r3, [r7, #0]
 80039be:	2b30      	cmp	r3, #48	; 0x30
 80039c0:	d10a      	bne.n	80039d8 <__cvt+0x8c>
 80039c2:	2200      	movs	r2, #0
 80039c4:	2300      	movs	r3, #0
 80039c6:	4620      	mov	r0, r4
 80039c8:	4629      	mov	r1, r5
 80039ca:	f7fd f87d 	bl	8000ac8 <__aeabi_dcmpeq>
 80039ce:	b918      	cbnz	r0, 80039d8 <__cvt+0x8c>
 80039d0:	f1c6 0601 	rsb	r6, r6, #1
 80039d4:	f8ca 6000 	str.w	r6, [sl]
 80039d8:	f8da 3000 	ldr.w	r3, [sl]
 80039dc:	4499      	add	r9, r3
 80039de:	2200      	movs	r2, #0
 80039e0:	2300      	movs	r3, #0
 80039e2:	4620      	mov	r0, r4
 80039e4:	4629      	mov	r1, r5
 80039e6:	f7fd f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 80039ea:	b108      	cbz	r0, 80039f0 <__cvt+0xa4>
 80039ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80039f0:	2230      	movs	r2, #48	; 0x30
 80039f2:	9b03      	ldr	r3, [sp, #12]
 80039f4:	454b      	cmp	r3, r9
 80039f6:	d307      	bcc.n	8003a08 <__cvt+0xbc>
 80039f8:	9b03      	ldr	r3, [sp, #12]
 80039fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039fc:	1bdb      	subs	r3, r3, r7
 80039fe:	4638      	mov	r0, r7
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	b004      	add	sp, #16
 8003a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a08:	1c59      	adds	r1, r3, #1
 8003a0a:	9103      	str	r1, [sp, #12]
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	e7f0      	b.n	80039f2 <__cvt+0xa6>

08003a10 <__exponent>:
 8003a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a12:	4603      	mov	r3, r0
 8003a14:	2900      	cmp	r1, #0
 8003a16:	bfb8      	it	lt
 8003a18:	4249      	neglt	r1, r1
 8003a1a:	f803 2b02 	strb.w	r2, [r3], #2
 8003a1e:	bfb4      	ite	lt
 8003a20:	222d      	movlt	r2, #45	; 0x2d
 8003a22:	222b      	movge	r2, #43	; 0x2b
 8003a24:	2909      	cmp	r1, #9
 8003a26:	7042      	strb	r2, [r0, #1]
 8003a28:	dd2a      	ble.n	8003a80 <__exponent+0x70>
 8003a2a:	f10d 0407 	add.w	r4, sp, #7
 8003a2e:	46a4      	mov	ip, r4
 8003a30:	270a      	movs	r7, #10
 8003a32:	46a6      	mov	lr, r4
 8003a34:	460a      	mov	r2, r1
 8003a36:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a3a:	fb07 1516 	mls	r5, r7, r6, r1
 8003a3e:	3530      	adds	r5, #48	; 0x30
 8003a40:	2a63      	cmp	r2, #99	; 0x63
 8003a42:	f104 34ff 	add.w	r4, r4, #4294967295
 8003a46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a4a:	4631      	mov	r1, r6
 8003a4c:	dcf1      	bgt.n	8003a32 <__exponent+0x22>
 8003a4e:	3130      	adds	r1, #48	; 0x30
 8003a50:	f1ae 0502 	sub.w	r5, lr, #2
 8003a54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a58:	1c44      	adds	r4, r0, #1
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	4561      	cmp	r1, ip
 8003a5e:	d30a      	bcc.n	8003a76 <__exponent+0x66>
 8003a60:	f10d 0209 	add.w	r2, sp, #9
 8003a64:	eba2 020e 	sub.w	r2, r2, lr
 8003a68:	4565      	cmp	r5, ip
 8003a6a:	bf88      	it	hi
 8003a6c:	2200      	movhi	r2, #0
 8003a6e:	4413      	add	r3, r2
 8003a70:	1a18      	subs	r0, r3, r0
 8003a72:	b003      	add	sp, #12
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a7e:	e7ed      	b.n	8003a5c <__exponent+0x4c>
 8003a80:	2330      	movs	r3, #48	; 0x30
 8003a82:	3130      	adds	r1, #48	; 0x30
 8003a84:	7083      	strb	r3, [r0, #2]
 8003a86:	70c1      	strb	r1, [r0, #3]
 8003a88:	1d03      	adds	r3, r0, #4
 8003a8a:	e7f1      	b.n	8003a70 <__exponent+0x60>

08003a8c <_printf_float>:
 8003a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a90:	ed2d 8b02 	vpush	{d8}
 8003a94:	b08d      	sub	sp, #52	; 0x34
 8003a96:	460c      	mov	r4, r1
 8003a98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003a9c:	4616      	mov	r6, r2
 8003a9e:	461f      	mov	r7, r3
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	f001 fa65 	bl	8004f70 <_localeconv_r>
 8003aa6:	f8d0 a000 	ldr.w	sl, [r0]
 8003aaa:	4650      	mov	r0, sl
 8003aac:	f7fc fb90 	bl	80001d0 <strlen>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	9305      	str	r3, [sp, #20]
 8003ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8003abc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ac0:	3307      	adds	r3, #7
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	f103 0208 	add.w	r2, r3, #8
 8003aca:	f8c8 2000 	str.w	r2, [r8]
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ad6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ada:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ade:	9307      	str	r3, [sp, #28]
 8003ae0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ae4:	ee08 0a10 	vmov	s16, r0
 8003ae8:	4b9f      	ldr	r3, [pc, #636]	; (8003d68 <_printf_float+0x2dc>)
 8003aea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003aee:	f04f 32ff 	mov.w	r2, #4294967295
 8003af2:	f7fd f81b 	bl	8000b2c <__aeabi_dcmpun>
 8003af6:	bb88      	cbnz	r0, 8003b5c <_printf_float+0xd0>
 8003af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003afc:	4b9a      	ldr	r3, [pc, #616]	; (8003d68 <_printf_float+0x2dc>)
 8003afe:	f04f 32ff 	mov.w	r2, #4294967295
 8003b02:	f7fc fff5 	bl	8000af0 <__aeabi_dcmple>
 8003b06:	bb48      	cbnz	r0, 8003b5c <_printf_float+0xd0>
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	4649      	mov	r1, r9
 8003b10:	f7fc ffe4 	bl	8000adc <__aeabi_dcmplt>
 8003b14:	b110      	cbz	r0, 8003b1c <_printf_float+0x90>
 8003b16:	232d      	movs	r3, #45	; 0x2d
 8003b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b1c:	4b93      	ldr	r3, [pc, #588]	; (8003d6c <_printf_float+0x2e0>)
 8003b1e:	4894      	ldr	r0, [pc, #592]	; (8003d70 <_printf_float+0x2e4>)
 8003b20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003b24:	bf94      	ite	ls
 8003b26:	4698      	movls	r8, r3
 8003b28:	4680      	movhi	r8, r0
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	6123      	str	r3, [r4, #16]
 8003b2e:	9b05      	ldr	r3, [sp, #20]
 8003b30:	f023 0204 	bic.w	r2, r3, #4
 8003b34:	6022      	str	r2, [r4, #0]
 8003b36:	f04f 0900 	mov.w	r9, #0
 8003b3a:	9700      	str	r7, [sp, #0]
 8003b3c:	4633      	mov	r3, r6
 8003b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003b40:	4621      	mov	r1, r4
 8003b42:	4628      	mov	r0, r5
 8003b44:	f000 f9d8 	bl	8003ef8 <_printf_common>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	f040 8090 	bne.w	8003c6e <_printf_float+0x1e2>
 8003b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b52:	b00d      	add	sp, #52	; 0x34
 8003b54:	ecbd 8b02 	vpop	{d8}
 8003b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	4640      	mov	r0, r8
 8003b62:	4649      	mov	r1, r9
 8003b64:	f7fc ffe2 	bl	8000b2c <__aeabi_dcmpun>
 8003b68:	b140      	cbz	r0, 8003b7c <_printf_float+0xf0>
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bfbc      	itt	lt
 8003b70:	232d      	movlt	r3, #45	; 0x2d
 8003b72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b76:	487f      	ldr	r0, [pc, #508]	; (8003d74 <_printf_float+0x2e8>)
 8003b78:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <_printf_float+0x2ec>)
 8003b7a:	e7d1      	b.n	8003b20 <_printf_float+0x94>
 8003b7c:	6863      	ldr	r3, [r4, #4]
 8003b7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b82:	9206      	str	r2, [sp, #24]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	d13f      	bne.n	8003c08 <_printf_float+0x17c>
 8003b88:	2306      	movs	r3, #6
 8003b8a:	6063      	str	r3, [r4, #4]
 8003b8c:	9b05      	ldr	r3, [sp, #20]
 8003b8e:	6861      	ldr	r1, [r4, #4]
 8003b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b94:	2300      	movs	r3, #0
 8003b96:	9303      	str	r3, [sp, #12]
 8003b98:	ab0a      	add	r3, sp, #40	; 0x28
 8003b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003b9e:	ab09      	add	r3, sp, #36	; 0x24
 8003ba0:	ec49 8b10 	vmov	d0, r8, r9
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6022      	str	r2, [r4, #0]
 8003ba8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003bac:	4628      	mov	r0, r5
 8003bae:	f7ff fecd 	bl	800394c <__cvt>
 8003bb2:	9b06      	ldr	r3, [sp, #24]
 8003bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bb6:	2b47      	cmp	r3, #71	; 0x47
 8003bb8:	4680      	mov	r8, r0
 8003bba:	d108      	bne.n	8003bce <_printf_float+0x142>
 8003bbc:	1cc8      	adds	r0, r1, #3
 8003bbe:	db02      	blt.n	8003bc6 <_printf_float+0x13a>
 8003bc0:	6863      	ldr	r3, [r4, #4]
 8003bc2:	4299      	cmp	r1, r3
 8003bc4:	dd41      	ble.n	8003c4a <_printf_float+0x1be>
 8003bc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8003bca:	fa5f fb8b 	uxtb.w	fp, fp
 8003bce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003bd2:	d820      	bhi.n	8003c16 <_printf_float+0x18a>
 8003bd4:	3901      	subs	r1, #1
 8003bd6:	465a      	mov	r2, fp
 8003bd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8003bde:	f7ff ff17 	bl	8003a10 <__exponent>
 8003be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003be4:	1813      	adds	r3, r2, r0
 8003be6:	2a01      	cmp	r2, #1
 8003be8:	4681      	mov	r9, r0
 8003bea:	6123      	str	r3, [r4, #16]
 8003bec:	dc02      	bgt.n	8003bf4 <_printf_float+0x168>
 8003bee:	6822      	ldr	r2, [r4, #0]
 8003bf0:	07d2      	lsls	r2, r2, #31
 8003bf2:	d501      	bpl.n	8003bf8 <_printf_float+0x16c>
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	6123      	str	r3, [r4, #16]
 8003bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d09c      	beq.n	8003b3a <_printf_float+0xae>
 8003c00:	232d      	movs	r3, #45	; 0x2d
 8003c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c06:	e798      	b.n	8003b3a <_printf_float+0xae>
 8003c08:	9a06      	ldr	r2, [sp, #24]
 8003c0a:	2a47      	cmp	r2, #71	; 0x47
 8003c0c:	d1be      	bne.n	8003b8c <_printf_float+0x100>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1bc      	bne.n	8003b8c <_printf_float+0x100>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e7b9      	b.n	8003b8a <_printf_float+0xfe>
 8003c16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003c1a:	d118      	bne.n	8003c4e <_printf_float+0x1c2>
 8003c1c:	2900      	cmp	r1, #0
 8003c1e:	6863      	ldr	r3, [r4, #4]
 8003c20:	dd0b      	ble.n	8003c3a <_printf_float+0x1ae>
 8003c22:	6121      	str	r1, [r4, #16]
 8003c24:	b913      	cbnz	r3, 8003c2c <_printf_float+0x1a0>
 8003c26:	6822      	ldr	r2, [r4, #0]
 8003c28:	07d0      	lsls	r0, r2, #31
 8003c2a:	d502      	bpl.n	8003c32 <_printf_float+0x1a6>
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	440b      	add	r3, r1
 8003c30:	6123      	str	r3, [r4, #16]
 8003c32:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c34:	f04f 0900 	mov.w	r9, #0
 8003c38:	e7de      	b.n	8003bf8 <_printf_float+0x16c>
 8003c3a:	b913      	cbnz	r3, 8003c42 <_printf_float+0x1b6>
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	07d2      	lsls	r2, r2, #31
 8003c40:	d501      	bpl.n	8003c46 <_printf_float+0x1ba>
 8003c42:	3302      	adds	r3, #2
 8003c44:	e7f4      	b.n	8003c30 <_printf_float+0x1a4>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e7f2      	b.n	8003c30 <_printf_float+0x1a4>
 8003c4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c50:	4299      	cmp	r1, r3
 8003c52:	db05      	blt.n	8003c60 <_printf_float+0x1d4>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	6121      	str	r1, [r4, #16]
 8003c58:	07d8      	lsls	r0, r3, #31
 8003c5a:	d5ea      	bpl.n	8003c32 <_printf_float+0x1a6>
 8003c5c:	1c4b      	adds	r3, r1, #1
 8003c5e:	e7e7      	b.n	8003c30 <_printf_float+0x1a4>
 8003c60:	2900      	cmp	r1, #0
 8003c62:	bfd4      	ite	le
 8003c64:	f1c1 0202 	rsble	r2, r1, #2
 8003c68:	2201      	movgt	r2, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	e7e0      	b.n	8003c30 <_printf_float+0x1a4>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	055a      	lsls	r2, r3, #21
 8003c72:	d407      	bmi.n	8003c84 <_printf_float+0x1f8>
 8003c74:	6923      	ldr	r3, [r4, #16]
 8003c76:	4642      	mov	r2, r8
 8003c78:	4631      	mov	r1, r6
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	47b8      	blx	r7
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d12c      	bne.n	8003cdc <_printf_float+0x250>
 8003c82:	e764      	b.n	8003b4e <_printf_float+0xc2>
 8003c84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c88:	f240 80e0 	bls.w	8003e4c <_printf_float+0x3c0>
 8003c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c90:	2200      	movs	r2, #0
 8003c92:	2300      	movs	r3, #0
 8003c94:	f7fc ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d034      	beq.n	8003d06 <_printf_float+0x27a>
 8003c9c:	4a37      	ldr	r2, [pc, #220]	; (8003d7c <_printf_float+0x2f0>)
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4631      	mov	r1, r6
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	47b8      	blx	r7
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	f43f af51 	beq.w	8003b4e <_printf_float+0xc2>
 8003cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	db02      	blt.n	8003cba <_printf_float+0x22e>
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	07d8      	lsls	r0, r3, #31
 8003cb8:	d510      	bpl.n	8003cdc <_printf_float+0x250>
 8003cba:	ee18 3a10 	vmov	r3, s16
 8003cbe:	4652      	mov	r2, sl
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	47b8      	blx	r7
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	f43f af41 	beq.w	8003b4e <_printf_float+0xc2>
 8003ccc:	f04f 0800 	mov.w	r8, #0
 8003cd0:	f104 091a 	add.w	r9, r4, #26
 8003cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	4543      	cmp	r3, r8
 8003cda:	dc09      	bgt.n	8003cf0 <_printf_float+0x264>
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	079b      	lsls	r3, r3, #30
 8003ce0:	f100 8105 	bmi.w	8003eee <_printf_float+0x462>
 8003ce4:	68e0      	ldr	r0, [r4, #12]
 8003ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ce8:	4298      	cmp	r0, r3
 8003cea:	bfb8      	it	lt
 8003cec:	4618      	movlt	r0, r3
 8003cee:	e730      	b.n	8003b52 <_printf_float+0xc6>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	464a      	mov	r2, r9
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	47b8      	blx	r7
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	f43f af27 	beq.w	8003b4e <_printf_float+0xc2>
 8003d00:	f108 0801 	add.w	r8, r8, #1
 8003d04:	e7e6      	b.n	8003cd4 <_printf_float+0x248>
 8003d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	dc39      	bgt.n	8003d80 <_printf_float+0x2f4>
 8003d0c:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <_printf_float+0x2f0>)
 8003d0e:	2301      	movs	r3, #1
 8003d10:	4631      	mov	r1, r6
 8003d12:	4628      	mov	r0, r5
 8003d14:	47b8      	blx	r7
 8003d16:	3001      	adds	r0, #1
 8003d18:	f43f af19 	beq.w	8003b4e <_printf_float+0xc2>
 8003d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d20:	4313      	orrs	r3, r2
 8003d22:	d102      	bne.n	8003d2a <_printf_float+0x29e>
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	07d9      	lsls	r1, r3, #31
 8003d28:	d5d8      	bpl.n	8003cdc <_printf_float+0x250>
 8003d2a:	ee18 3a10 	vmov	r3, s16
 8003d2e:	4652      	mov	r2, sl
 8003d30:	4631      	mov	r1, r6
 8003d32:	4628      	mov	r0, r5
 8003d34:	47b8      	blx	r7
 8003d36:	3001      	adds	r0, #1
 8003d38:	f43f af09 	beq.w	8003b4e <_printf_float+0xc2>
 8003d3c:	f04f 0900 	mov.w	r9, #0
 8003d40:	f104 0a1a 	add.w	sl, r4, #26
 8003d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d46:	425b      	negs	r3, r3
 8003d48:	454b      	cmp	r3, r9
 8003d4a:	dc01      	bgt.n	8003d50 <_printf_float+0x2c4>
 8003d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d4e:	e792      	b.n	8003c76 <_printf_float+0x1ea>
 8003d50:	2301      	movs	r3, #1
 8003d52:	4652      	mov	r2, sl
 8003d54:	4631      	mov	r1, r6
 8003d56:	4628      	mov	r0, r5
 8003d58:	47b8      	blx	r7
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	f43f aef7 	beq.w	8003b4e <_printf_float+0xc2>
 8003d60:	f109 0901 	add.w	r9, r9, #1
 8003d64:	e7ee      	b.n	8003d44 <_printf_float+0x2b8>
 8003d66:	bf00      	nop
 8003d68:	7fefffff 	.word	0x7fefffff
 8003d6c:	0800685c 	.word	0x0800685c
 8003d70:	08006860 	.word	0x08006860
 8003d74:	08006868 	.word	0x08006868
 8003d78:	08006864 	.word	0x08006864
 8003d7c:	0800686c 	.word	0x0800686c
 8003d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d84:	429a      	cmp	r2, r3
 8003d86:	bfa8      	it	ge
 8003d88:	461a      	movge	r2, r3
 8003d8a:	2a00      	cmp	r2, #0
 8003d8c:	4691      	mov	r9, r2
 8003d8e:	dc37      	bgt.n	8003e00 <_printf_float+0x374>
 8003d90:	f04f 0b00 	mov.w	fp, #0
 8003d94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d98:	f104 021a 	add.w	r2, r4, #26
 8003d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d9e:	9305      	str	r3, [sp, #20]
 8003da0:	eba3 0309 	sub.w	r3, r3, r9
 8003da4:	455b      	cmp	r3, fp
 8003da6:	dc33      	bgt.n	8003e10 <_printf_float+0x384>
 8003da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dac:	429a      	cmp	r2, r3
 8003dae:	db3b      	blt.n	8003e28 <_printf_float+0x39c>
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	07da      	lsls	r2, r3, #31
 8003db4:	d438      	bmi.n	8003e28 <_printf_float+0x39c>
 8003db6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003db8:	9b05      	ldr	r3, [sp, #20]
 8003dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	eba2 0901 	sub.w	r9, r2, r1
 8003dc2:	4599      	cmp	r9, r3
 8003dc4:	bfa8      	it	ge
 8003dc6:	4699      	movge	r9, r3
 8003dc8:	f1b9 0f00 	cmp.w	r9, #0
 8003dcc:	dc35      	bgt.n	8003e3a <_printf_float+0x3ae>
 8003dce:	f04f 0800 	mov.w	r8, #0
 8003dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dd6:	f104 0a1a 	add.w	sl, r4, #26
 8003dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	eba3 0309 	sub.w	r3, r3, r9
 8003de4:	4543      	cmp	r3, r8
 8003de6:	f77f af79 	ble.w	8003cdc <_printf_float+0x250>
 8003dea:	2301      	movs	r3, #1
 8003dec:	4652      	mov	r2, sl
 8003dee:	4631      	mov	r1, r6
 8003df0:	4628      	mov	r0, r5
 8003df2:	47b8      	blx	r7
 8003df4:	3001      	adds	r0, #1
 8003df6:	f43f aeaa 	beq.w	8003b4e <_printf_float+0xc2>
 8003dfa:	f108 0801 	add.w	r8, r8, #1
 8003dfe:	e7ec      	b.n	8003dda <_printf_float+0x34e>
 8003e00:	4613      	mov	r3, r2
 8003e02:	4631      	mov	r1, r6
 8003e04:	4642      	mov	r2, r8
 8003e06:	4628      	mov	r0, r5
 8003e08:	47b8      	blx	r7
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	d1c0      	bne.n	8003d90 <_printf_float+0x304>
 8003e0e:	e69e      	b.n	8003b4e <_printf_float+0xc2>
 8003e10:	2301      	movs	r3, #1
 8003e12:	4631      	mov	r1, r6
 8003e14:	4628      	mov	r0, r5
 8003e16:	9205      	str	r2, [sp, #20]
 8003e18:	47b8      	blx	r7
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	f43f ae97 	beq.w	8003b4e <_printf_float+0xc2>
 8003e20:	9a05      	ldr	r2, [sp, #20]
 8003e22:	f10b 0b01 	add.w	fp, fp, #1
 8003e26:	e7b9      	b.n	8003d9c <_printf_float+0x310>
 8003e28:	ee18 3a10 	vmov	r3, s16
 8003e2c:	4652      	mov	r2, sl
 8003e2e:	4631      	mov	r1, r6
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b8      	blx	r7
 8003e34:	3001      	adds	r0, #1
 8003e36:	d1be      	bne.n	8003db6 <_printf_float+0x32a>
 8003e38:	e689      	b.n	8003b4e <_printf_float+0xc2>
 8003e3a:	9a05      	ldr	r2, [sp, #20]
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	4442      	add	r2, r8
 8003e40:	4631      	mov	r1, r6
 8003e42:	4628      	mov	r0, r5
 8003e44:	47b8      	blx	r7
 8003e46:	3001      	adds	r0, #1
 8003e48:	d1c1      	bne.n	8003dce <_printf_float+0x342>
 8003e4a:	e680      	b.n	8003b4e <_printf_float+0xc2>
 8003e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e4e:	2a01      	cmp	r2, #1
 8003e50:	dc01      	bgt.n	8003e56 <_printf_float+0x3ca>
 8003e52:	07db      	lsls	r3, r3, #31
 8003e54:	d538      	bpl.n	8003ec8 <_printf_float+0x43c>
 8003e56:	2301      	movs	r3, #1
 8003e58:	4642      	mov	r2, r8
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	47b8      	blx	r7
 8003e60:	3001      	adds	r0, #1
 8003e62:	f43f ae74 	beq.w	8003b4e <_printf_float+0xc2>
 8003e66:	ee18 3a10 	vmov	r3, s16
 8003e6a:	4652      	mov	r2, sl
 8003e6c:	4631      	mov	r1, r6
 8003e6e:	4628      	mov	r0, r5
 8003e70:	47b8      	blx	r7
 8003e72:	3001      	adds	r0, #1
 8003e74:	f43f ae6b 	beq.w	8003b4e <_printf_float+0xc2>
 8003e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f7fc fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e84:	b9d8      	cbnz	r0, 8003ebe <_printf_float+0x432>
 8003e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e88:	f108 0201 	add.w	r2, r8, #1
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	4631      	mov	r1, r6
 8003e90:	4628      	mov	r0, r5
 8003e92:	47b8      	blx	r7
 8003e94:	3001      	adds	r0, #1
 8003e96:	d10e      	bne.n	8003eb6 <_printf_float+0x42a>
 8003e98:	e659      	b.n	8003b4e <_printf_float+0xc2>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4652      	mov	r2, sl
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	47b8      	blx	r7
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	f43f ae52 	beq.w	8003b4e <_printf_float+0xc2>
 8003eaa:	f108 0801 	add.w	r8, r8, #1
 8003eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	4543      	cmp	r3, r8
 8003eb4:	dcf1      	bgt.n	8003e9a <_printf_float+0x40e>
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ebc:	e6dc      	b.n	8003c78 <_printf_float+0x1ec>
 8003ebe:	f04f 0800 	mov.w	r8, #0
 8003ec2:	f104 0a1a 	add.w	sl, r4, #26
 8003ec6:	e7f2      	b.n	8003eae <_printf_float+0x422>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	4642      	mov	r2, r8
 8003ecc:	e7df      	b.n	8003e8e <_printf_float+0x402>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	464a      	mov	r2, r9
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	47b8      	blx	r7
 8003ed8:	3001      	adds	r0, #1
 8003eda:	f43f ae38 	beq.w	8003b4e <_printf_float+0xc2>
 8003ede:	f108 0801 	add.w	r8, r8, #1
 8003ee2:	68e3      	ldr	r3, [r4, #12]
 8003ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ee6:	1a5b      	subs	r3, r3, r1
 8003ee8:	4543      	cmp	r3, r8
 8003eea:	dcf0      	bgt.n	8003ece <_printf_float+0x442>
 8003eec:	e6fa      	b.n	8003ce4 <_printf_float+0x258>
 8003eee:	f04f 0800 	mov.w	r8, #0
 8003ef2:	f104 0919 	add.w	r9, r4, #25
 8003ef6:	e7f4      	b.n	8003ee2 <_printf_float+0x456>

08003ef8 <_printf_common>:
 8003ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003efc:	4616      	mov	r6, r2
 8003efe:	4699      	mov	r9, r3
 8003f00:	688a      	ldr	r2, [r1, #8]
 8003f02:	690b      	ldr	r3, [r1, #16]
 8003f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	bfb8      	it	lt
 8003f0c:	4613      	movlt	r3, r2
 8003f0e:	6033      	str	r3, [r6, #0]
 8003f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f14:	4607      	mov	r7, r0
 8003f16:	460c      	mov	r4, r1
 8003f18:	b10a      	cbz	r2, 8003f1e <_printf_common+0x26>
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	6033      	str	r3, [r6, #0]
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	0699      	lsls	r1, r3, #26
 8003f22:	bf42      	ittt	mi
 8003f24:	6833      	ldrmi	r3, [r6, #0]
 8003f26:	3302      	addmi	r3, #2
 8003f28:	6033      	strmi	r3, [r6, #0]
 8003f2a:	6825      	ldr	r5, [r4, #0]
 8003f2c:	f015 0506 	ands.w	r5, r5, #6
 8003f30:	d106      	bne.n	8003f40 <_printf_common+0x48>
 8003f32:	f104 0a19 	add.w	sl, r4, #25
 8003f36:	68e3      	ldr	r3, [r4, #12]
 8003f38:	6832      	ldr	r2, [r6, #0]
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	42ab      	cmp	r3, r5
 8003f3e:	dc26      	bgt.n	8003f8e <_printf_common+0x96>
 8003f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f44:	1e13      	subs	r3, r2, #0
 8003f46:	6822      	ldr	r2, [r4, #0]
 8003f48:	bf18      	it	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	0692      	lsls	r2, r2, #26
 8003f4e:	d42b      	bmi.n	8003fa8 <_printf_common+0xb0>
 8003f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f54:	4649      	mov	r1, r9
 8003f56:	4638      	mov	r0, r7
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d01e      	beq.n	8003f9c <_printf_common+0xa4>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	68e5      	ldr	r5, [r4, #12]
 8003f62:	6832      	ldr	r2, [r6, #0]
 8003f64:	f003 0306 	and.w	r3, r3, #6
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	bf08      	it	eq
 8003f6c:	1aad      	subeq	r5, r5, r2
 8003f6e:	68a3      	ldr	r3, [r4, #8]
 8003f70:	6922      	ldr	r2, [r4, #16]
 8003f72:	bf0c      	ite	eq
 8003f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f78:	2500      	movne	r5, #0
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	bfc4      	itt	gt
 8003f7e:	1a9b      	subgt	r3, r3, r2
 8003f80:	18ed      	addgt	r5, r5, r3
 8003f82:	2600      	movs	r6, #0
 8003f84:	341a      	adds	r4, #26
 8003f86:	42b5      	cmp	r5, r6
 8003f88:	d11a      	bne.n	8003fc0 <_printf_common+0xc8>
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	e008      	b.n	8003fa0 <_printf_common+0xa8>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4652      	mov	r2, sl
 8003f92:	4649      	mov	r1, r9
 8003f94:	4638      	mov	r0, r7
 8003f96:	47c0      	blx	r8
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d103      	bne.n	8003fa4 <_printf_common+0xac>
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa4:	3501      	adds	r5, #1
 8003fa6:	e7c6      	b.n	8003f36 <_printf_common+0x3e>
 8003fa8:	18e1      	adds	r1, r4, r3
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	2030      	movs	r0, #48	; 0x30
 8003fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fb2:	4422      	add	r2, r4
 8003fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	e7c7      	b.n	8003f50 <_printf_common+0x58>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	47c0      	blx	r8
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d0e6      	beq.n	8003f9c <_printf_common+0xa4>
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7d9      	b.n	8003f86 <_printf_common+0x8e>
	...

08003fd4 <_printf_i>:
 8003fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd8:	460c      	mov	r4, r1
 8003fda:	4691      	mov	r9, r2
 8003fdc:	7e27      	ldrb	r7, [r4, #24]
 8003fde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fe0:	2f78      	cmp	r7, #120	; 0x78
 8003fe2:	4680      	mov	r8, r0
 8003fe4:	469a      	mov	sl, r3
 8003fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fea:	d807      	bhi.n	8003ffc <_printf_i+0x28>
 8003fec:	2f62      	cmp	r7, #98	; 0x62
 8003fee:	d80a      	bhi.n	8004006 <_printf_i+0x32>
 8003ff0:	2f00      	cmp	r7, #0
 8003ff2:	f000 80d8 	beq.w	80041a6 <_printf_i+0x1d2>
 8003ff6:	2f58      	cmp	r7, #88	; 0x58
 8003ff8:	f000 80a3 	beq.w	8004142 <_printf_i+0x16e>
 8003ffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004004:	e03a      	b.n	800407c <_printf_i+0xa8>
 8004006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800400a:	2b15      	cmp	r3, #21
 800400c:	d8f6      	bhi.n	8003ffc <_printf_i+0x28>
 800400e:	a001      	add	r0, pc, #4	; (adr r0, 8004014 <_printf_i+0x40>)
 8004010:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004014:	0800406d 	.word	0x0800406d
 8004018:	08004081 	.word	0x08004081
 800401c:	08003ffd 	.word	0x08003ffd
 8004020:	08003ffd 	.word	0x08003ffd
 8004024:	08003ffd 	.word	0x08003ffd
 8004028:	08003ffd 	.word	0x08003ffd
 800402c:	08004081 	.word	0x08004081
 8004030:	08003ffd 	.word	0x08003ffd
 8004034:	08003ffd 	.word	0x08003ffd
 8004038:	08003ffd 	.word	0x08003ffd
 800403c:	08003ffd 	.word	0x08003ffd
 8004040:	0800418d 	.word	0x0800418d
 8004044:	080040b1 	.word	0x080040b1
 8004048:	0800416f 	.word	0x0800416f
 800404c:	08003ffd 	.word	0x08003ffd
 8004050:	08003ffd 	.word	0x08003ffd
 8004054:	080041af 	.word	0x080041af
 8004058:	08003ffd 	.word	0x08003ffd
 800405c:	080040b1 	.word	0x080040b1
 8004060:	08003ffd 	.word	0x08003ffd
 8004064:	08003ffd 	.word	0x08003ffd
 8004068:	08004177 	.word	0x08004177
 800406c:	680b      	ldr	r3, [r1, #0]
 800406e:	1d1a      	adds	r2, r3, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	600a      	str	r2, [r1, #0]
 8004074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800407c:	2301      	movs	r3, #1
 800407e:	e0a3      	b.n	80041c8 <_printf_i+0x1f4>
 8004080:	6825      	ldr	r5, [r4, #0]
 8004082:	6808      	ldr	r0, [r1, #0]
 8004084:	062e      	lsls	r6, r5, #24
 8004086:	f100 0304 	add.w	r3, r0, #4
 800408a:	d50a      	bpl.n	80040a2 <_printf_i+0xce>
 800408c:	6805      	ldr	r5, [r0, #0]
 800408e:	600b      	str	r3, [r1, #0]
 8004090:	2d00      	cmp	r5, #0
 8004092:	da03      	bge.n	800409c <_printf_i+0xc8>
 8004094:	232d      	movs	r3, #45	; 0x2d
 8004096:	426d      	negs	r5, r5
 8004098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800409c:	485e      	ldr	r0, [pc, #376]	; (8004218 <_printf_i+0x244>)
 800409e:	230a      	movs	r3, #10
 80040a0:	e019      	b.n	80040d6 <_printf_i+0x102>
 80040a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040a6:	6805      	ldr	r5, [r0, #0]
 80040a8:	600b      	str	r3, [r1, #0]
 80040aa:	bf18      	it	ne
 80040ac:	b22d      	sxthne	r5, r5
 80040ae:	e7ef      	b.n	8004090 <_printf_i+0xbc>
 80040b0:	680b      	ldr	r3, [r1, #0]
 80040b2:	6825      	ldr	r5, [r4, #0]
 80040b4:	1d18      	adds	r0, r3, #4
 80040b6:	6008      	str	r0, [r1, #0]
 80040b8:	0628      	lsls	r0, r5, #24
 80040ba:	d501      	bpl.n	80040c0 <_printf_i+0xec>
 80040bc:	681d      	ldr	r5, [r3, #0]
 80040be:	e002      	b.n	80040c6 <_printf_i+0xf2>
 80040c0:	0669      	lsls	r1, r5, #25
 80040c2:	d5fb      	bpl.n	80040bc <_printf_i+0xe8>
 80040c4:	881d      	ldrh	r5, [r3, #0]
 80040c6:	4854      	ldr	r0, [pc, #336]	; (8004218 <_printf_i+0x244>)
 80040c8:	2f6f      	cmp	r7, #111	; 0x6f
 80040ca:	bf0c      	ite	eq
 80040cc:	2308      	moveq	r3, #8
 80040ce:	230a      	movne	r3, #10
 80040d0:	2100      	movs	r1, #0
 80040d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040d6:	6866      	ldr	r6, [r4, #4]
 80040d8:	60a6      	str	r6, [r4, #8]
 80040da:	2e00      	cmp	r6, #0
 80040dc:	bfa2      	ittt	ge
 80040de:	6821      	ldrge	r1, [r4, #0]
 80040e0:	f021 0104 	bicge.w	r1, r1, #4
 80040e4:	6021      	strge	r1, [r4, #0]
 80040e6:	b90d      	cbnz	r5, 80040ec <_printf_i+0x118>
 80040e8:	2e00      	cmp	r6, #0
 80040ea:	d04d      	beq.n	8004188 <_printf_i+0x1b4>
 80040ec:	4616      	mov	r6, r2
 80040ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80040f2:	fb03 5711 	mls	r7, r3, r1, r5
 80040f6:	5dc7      	ldrb	r7, [r0, r7]
 80040f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040fc:	462f      	mov	r7, r5
 80040fe:	42bb      	cmp	r3, r7
 8004100:	460d      	mov	r5, r1
 8004102:	d9f4      	bls.n	80040ee <_printf_i+0x11a>
 8004104:	2b08      	cmp	r3, #8
 8004106:	d10b      	bne.n	8004120 <_printf_i+0x14c>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	07df      	lsls	r7, r3, #31
 800410c:	d508      	bpl.n	8004120 <_printf_i+0x14c>
 800410e:	6923      	ldr	r3, [r4, #16]
 8004110:	6861      	ldr	r1, [r4, #4]
 8004112:	4299      	cmp	r1, r3
 8004114:	bfde      	ittt	le
 8004116:	2330      	movle	r3, #48	; 0x30
 8004118:	f806 3c01 	strble.w	r3, [r6, #-1]
 800411c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004120:	1b92      	subs	r2, r2, r6
 8004122:	6122      	str	r2, [r4, #16]
 8004124:	f8cd a000 	str.w	sl, [sp]
 8004128:	464b      	mov	r3, r9
 800412a:	aa03      	add	r2, sp, #12
 800412c:	4621      	mov	r1, r4
 800412e:	4640      	mov	r0, r8
 8004130:	f7ff fee2 	bl	8003ef8 <_printf_common>
 8004134:	3001      	adds	r0, #1
 8004136:	d14c      	bne.n	80041d2 <_printf_i+0x1fe>
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	b004      	add	sp, #16
 800413e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004142:	4835      	ldr	r0, [pc, #212]	; (8004218 <_printf_i+0x244>)
 8004144:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	680e      	ldr	r6, [r1, #0]
 800414c:	061f      	lsls	r7, r3, #24
 800414e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004152:	600e      	str	r6, [r1, #0]
 8004154:	d514      	bpl.n	8004180 <_printf_i+0x1ac>
 8004156:	07d9      	lsls	r1, r3, #31
 8004158:	bf44      	itt	mi
 800415a:	f043 0320 	orrmi.w	r3, r3, #32
 800415e:	6023      	strmi	r3, [r4, #0]
 8004160:	b91d      	cbnz	r5, 800416a <_printf_i+0x196>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	f023 0320 	bic.w	r3, r3, #32
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	2310      	movs	r3, #16
 800416c:	e7b0      	b.n	80040d0 <_printf_i+0xfc>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	f043 0320 	orr.w	r3, r3, #32
 8004174:	6023      	str	r3, [r4, #0]
 8004176:	2378      	movs	r3, #120	; 0x78
 8004178:	4828      	ldr	r0, [pc, #160]	; (800421c <_printf_i+0x248>)
 800417a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800417e:	e7e3      	b.n	8004148 <_printf_i+0x174>
 8004180:	065e      	lsls	r6, r3, #25
 8004182:	bf48      	it	mi
 8004184:	b2ad      	uxthmi	r5, r5
 8004186:	e7e6      	b.n	8004156 <_printf_i+0x182>
 8004188:	4616      	mov	r6, r2
 800418a:	e7bb      	b.n	8004104 <_printf_i+0x130>
 800418c:	680b      	ldr	r3, [r1, #0]
 800418e:	6826      	ldr	r6, [r4, #0]
 8004190:	6960      	ldr	r0, [r4, #20]
 8004192:	1d1d      	adds	r5, r3, #4
 8004194:	600d      	str	r5, [r1, #0]
 8004196:	0635      	lsls	r5, r6, #24
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	d501      	bpl.n	80041a0 <_printf_i+0x1cc>
 800419c:	6018      	str	r0, [r3, #0]
 800419e:	e002      	b.n	80041a6 <_printf_i+0x1d2>
 80041a0:	0671      	lsls	r1, r6, #25
 80041a2:	d5fb      	bpl.n	800419c <_printf_i+0x1c8>
 80041a4:	8018      	strh	r0, [r3, #0]
 80041a6:	2300      	movs	r3, #0
 80041a8:	6123      	str	r3, [r4, #16]
 80041aa:	4616      	mov	r6, r2
 80041ac:	e7ba      	b.n	8004124 <_printf_i+0x150>
 80041ae:	680b      	ldr	r3, [r1, #0]
 80041b0:	1d1a      	adds	r2, r3, #4
 80041b2:	600a      	str	r2, [r1, #0]
 80041b4:	681e      	ldr	r6, [r3, #0]
 80041b6:	6862      	ldr	r2, [r4, #4]
 80041b8:	2100      	movs	r1, #0
 80041ba:	4630      	mov	r0, r6
 80041bc:	f7fc f810 	bl	80001e0 <memchr>
 80041c0:	b108      	cbz	r0, 80041c6 <_printf_i+0x1f2>
 80041c2:	1b80      	subs	r0, r0, r6
 80041c4:	6060      	str	r0, [r4, #4]
 80041c6:	6863      	ldr	r3, [r4, #4]
 80041c8:	6123      	str	r3, [r4, #16]
 80041ca:	2300      	movs	r3, #0
 80041cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d0:	e7a8      	b.n	8004124 <_printf_i+0x150>
 80041d2:	6923      	ldr	r3, [r4, #16]
 80041d4:	4632      	mov	r2, r6
 80041d6:	4649      	mov	r1, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	47d0      	blx	sl
 80041dc:	3001      	adds	r0, #1
 80041de:	d0ab      	beq.n	8004138 <_printf_i+0x164>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	079b      	lsls	r3, r3, #30
 80041e4:	d413      	bmi.n	800420e <_printf_i+0x23a>
 80041e6:	68e0      	ldr	r0, [r4, #12]
 80041e8:	9b03      	ldr	r3, [sp, #12]
 80041ea:	4298      	cmp	r0, r3
 80041ec:	bfb8      	it	lt
 80041ee:	4618      	movlt	r0, r3
 80041f0:	e7a4      	b.n	800413c <_printf_i+0x168>
 80041f2:	2301      	movs	r3, #1
 80041f4:	4632      	mov	r2, r6
 80041f6:	4649      	mov	r1, r9
 80041f8:	4640      	mov	r0, r8
 80041fa:	47d0      	blx	sl
 80041fc:	3001      	adds	r0, #1
 80041fe:	d09b      	beq.n	8004138 <_printf_i+0x164>
 8004200:	3501      	adds	r5, #1
 8004202:	68e3      	ldr	r3, [r4, #12]
 8004204:	9903      	ldr	r1, [sp, #12]
 8004206:	1a5b      	subs	r3, r3, r1
 8004208:	42ab      	cmp	r3, r5
 800420a:	dcf2      	bgt.n	80041f2 <_printf_i+0x21e>
 800420c:	e7eb      	b.n	80041e6 <_printf_i+0x212>
 800420e:	2500      	movs	r5, #0
 8004210:	f104 0619 	add.w	r6, r4, #25
 8004214:	e7f5      	b.n	8004202 <_printf_i+0x22e>
 8004216:	bf00      	nop
 8004218:	0800686e 	.word	0x0800686e
 800421c:	0800687f 	.word	0x0800687f

08004220 <siprintf>:
 8004220:	b40e      	push	{r1, r2, r3}
 8004222:	b500      	push	{lr}
 8004224:	b09c      	sub	sp, #112	; 0x70
 8004226:	ab1d      	add	r3, sp, #116	; 0x74
 8004228:	9002      	str	r0, [sp, #8]
 800422a:	9006      	str	r0, [sp, #24]
 800422c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004230:	4809      	ldr	r0, [pc, #36]	; (8004258 <siprintf+0x38>)
 8004232:	9107      	str	r1, [sp, #28]
 8004234:	9104      	str	r1, [sp, #16]
 8004236:	4909      	ldr	r1, [pc, #36]	; (800425c <siprintf+0x3c>)
 8004238:	f853 2b04 	ldr.w	r2, [r3], #4
 800423c:	9105      	str	r1, [sp, #20]
 800423e:	6800      	ldr	r0, [r0, #0]
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	a902      	add	r1, sp, #8
 8004244:	f001 fb34 	bl	80058b0 <_svfiprintf_r>
 8004248:	9b02      	ldr	r3, [sp, #8]
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	b01c      	add	sp, #112	; 0x70
 8004250:	f85d eb04 	ldr.w	lr, [sp], #4
 8004254:	b003      	add	sp, #12
 8004256:	4770      	bx	lr
 8004258:	20000018 	.word	0x20000018
 800425c:	ffff0208 	.word	0xffff0208

08004260 <strcat>:
 8004260:	b510      	push	{r4, lr}
 8004262:	4602      	mov	r2, r0
 8004264:	7814      	ldrb	r4, [r2, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	3201      	adds	r2, #1
 800426a:	2c00      	cmp	r4, #0
 800426c:	d1fa      	bne.n	8004264 <strcat+0x4>
 800426e:	3b01      	subs	r3, #1
 8004270:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004274:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004278:	2a00      	cmp	r2, #0
 800427a:	d1f9      	bne.n	8004270 <strcat+0x10>
 800427c:	bd10      	pop	{r4, pc}

0800427e <quorem>:
 800427e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004282:	6903      	ldr	r3, [r0, #16]
 8004284:	690c      	ldr	r4, [r1, #16]
 8004286:	42a3      	cmp	r3, r4
 8004288:	4607      	mov	r7, r0
 800428a:	f2c0 8081 	blt.w	8004390 <quorem+0x112>
 800428e:	3c01      	subs	r4, #1
 8004290:	f101 0814 	add.w	r8, r1, #20
 8004294:	f100 0514 	add.w	r5, r0, #20
 8004298:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042a6:	3301      	adds	r3, #1
 80042a8:	429a      	cmp	r2, r3
 80042aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80042ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80042b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80042b6:	d331      	bcc.n	800431c <quorem+0x9e>
 80042b8:	f04f 0e00 	mov.w	lr, #0
 80042bc:	4640      	mov	r0, r8
 80042be:	46ac      	mov	ip, r5
 80042c0:	46f2      	mov	sl, lr
 80042c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80042c6:	b293      	uxth	r3, r2
 80042c8:	fb06 e303 	mla	r3, r6, r3, lr
 80042cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	ebaa 0303 	sub.w	r3, sl, r3
 80042d6:	0c12      	lsrs	r2, r2, #16
 80042d8:	f8dc a000 	ldr.w	sl, [ip]
 80042dc:	fb06 e202 	mla	r2, r6, r2, lr
 80042e0:	fa13 f38a 	uxtah	r3, r3, sl
 80042e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042e8:	fa1f fa82 	uxth.w	sl, r2
 80042ec:	f8dc 2000 	ldr.w	r2, [ip]
 80042f0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80042f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042fe:	4581      	cmp	r9, r0
 8004300:	f84c 3b04 	str.w	r3, [ip], #4
 8004304:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004308:	d2db      	bcs.n	80042c2 <quorem+0x44>
 800430a:	f855 300b 	ldr.w	r3, [r5, fp]
 800430e:	b92b      	cbnz	r3, 800431c <quorem+0x9e>
 8004310:	9b01      	ldr	r3, [sp, #4]
 8004312:	3b04      	subs	r3, #4
 8004314:	429d      	cmp	r5, r3
 8004316:	461a      	mov	r2, r3
 8004318:	d32e      	bcc.n	8004378 <quorem+0xfa>
 800431a:	613c      	str	r4, [r7, #16]
 800431c:	4638      	mov	r0, r7
 800431e:	f001 f8b1 	bl	8005484 <__mcmp>
 8004322:	2800      	cmp	r0, #0
 8004324:	db24      	blt.n	8004370 <quorem+0xf2>
 8004326:	3601      	adds	r6, #1
 8004328:	4628      	mov	r0, r5
 800432a:	f04f 0c00 	mov.w	ip, #0
 800432e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004332:	f8d0 e000 	ldr.w	lr, [r0]
 8004336:	b293      	uxth	r3, r2
 8004338:	ebac 0303 	sub.w	r3, ip, r3
 800433c:	0c12      	lsrs	r2, r2, #16
 800433e:	fa13 f38e 	uxtah	r3, r3, lr
 8004342:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004346:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800434a:	b29b      	uxth	r3, r3
 800434c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004350:	45c1      	cmp	r9, r8
 8004352:	f840 3b04 	str.w	r3, [r0], #4
 8004356:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800435a:	d2e8      	bcs.n	800432e <quorem+0xb0>
 800435c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004360:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004364:	b922      	cbnz	r2, 8004370 <quorem+0xf2>
 8004366:	3b04      	subs	r3, #4
 8004368:	429d      	cmp	r5, r3
 800436a:	461a      	mov	r2, r3
 800436c:	d30a      	bcc.n	8004384 <quorem+0x106>
 800436e:	613c      	str	r4, [r7, #16]
 8004370:	4630      	mov	r0, r6
 8004372:	b003      	add	sp, #12
 8004374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	3b04      	subs	r3, #4
 800437c:	2a00      	cmp	r2, #0
 800437e:	d1cc      	bne.n	800431a <quorem+0x9c>
 8004380:	3c01      	subs	r4, #1
 8004382:	e7c7      	b.n	8004314 <quorem+0x96>
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	3b04      	subs	r3, #4
 8004388:	2a00      	cmp	r2, #0
 800438a:	d1f0      	bne.n	800436e <quorem+0xf0>
 800438c:	3c01      	subs	r4, #1
 800438e:	e7eb      	b.n	8004368 <quorem+0xea>
 8004390:	2000      	movs	r0, #0
 8004392:	e7ee      	b.n	8004372 <quorem+0xf4>
 8004394:	0000      	movs	r0, r0
	...

08004398 <_dtoa_r>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	ed2d 8b02 	vpush	{d8}
 80043a0:	ec57 6b10 	vmov	r6, r7, d0
 80043a4:	b095      	sub	sp, #84	; 0x54
 80043a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80043a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80043ac:	9105      	str	r1, [sp, #20]
 80043ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80043b2:	4604      	mov	r4, r0
 80043b4:	9209      	str	r2, [sp, #36]	; 0x24
 80043b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80043b8:	b975      	cbnz	r5, 80043d8 <_dtoa_r+0x40>
 80043ba:	2010      	movs	r0, #16
 80043bc:	f000 fddc 	bl	8004f78 <malloc>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6260      	str	r0, [r4, #36]	; 0x24
 80043c4:	b920      	cbnz	r0, 80043d0 <_dtoa_r+0x38>
 80043c6:	4bb2      	ldr	r3, [pc, #712]	; (8004690 <_dtoa_r+0x2f8>)
 80043c8:	21ea      	movs	r1, #234	; 0xea
 80043ca:	48b2      	ldr	r0, [pc, #712]	; (8004694 <_dtoa_r+0x2fc>)
 80043cc:	f001 fb80 	bl	8005ad0 <__assert_func>
 80043d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80043d4:	6005      	str	r5, [r0, #0]
 80043d6:	60c5      	str	r5, [r0, #12]
 80043d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	b151      	cbz	r1, 80043f4 <_dtoa_r+0x5c>
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	604a      	str	r2, [r1, #4]
 80043e2:	2301      	movs	r3, #1
 80043e4:	4093      	lsls	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]
 80043e8:	4620      	mov	r0, r4
 80043ea:	f000 fe0d 	bl	8005008 <_Bfree>
 80043ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	1e3b      	subs	r3, r7, #0
 80043f6:	bfb9      	ittee	lt
 80043f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043fc:	9303      	strlt	r3, [sp, #12]
 80043fe:	2300      	movge	r3, #0
 8004400:	f8c8 3000 	strge.w	r3, [r8]
 8004404:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004408:	4ba3      	ldr	r3, [pc, #652]	; (8004698 <_dtoa_r+0x300>)
 800440a:	bfbc      	itt	lt
 800440c:	2201      	movlt	r2, #1
 800440e:	f8c8 2000 	strlt.w	r2, [r8]
 8004412:	ea33 0309 	bics.w	r3, r3, r9
 8004416:	d11b      	bne.n	8004450 <_dtoa_r+0xb8>
 8004418:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800441a:	f242 730f 	movw	r3, #9999	; 0x270f
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004424:	4333      	orrs	r3, r6
 8004426:	f000 857a 	beq.w	8004f1e <_dtoa_r+0xb86>
 800442a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800442c:	b963      	cbnz	r3, 8004448 <_dtoa_r+0xb0>
 800442e:	4b9b      	ldr	r3, [pc, #620]	; (800469c <_dtoa_r+0x304>)
 8004430:	e024      	b.n	800447c <_dtoa_r+0xe4>
 8004432:	4b9b      	ldr	r3, [pc, #620]	; (80046a0 <_dtoa_r+0x308>)
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	3308      	adds	r3, #8
 8004438:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	9800      	ldr	r0, [sp, #0]
 800443e:	b015      	add	sp, #84	; 0x54
 8004440:	ecbd 8b02 	vpop	{d8}
 8004444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004448:	4b94      	ldr	r3, [pc, #592]	; (800469c <_dtoa_r+0x304>)
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	3303      	adds	r3, #3
 800444e:	e7f3      	b.n	8004438 <_dtoa_r+0xa0>
 8004450:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	ec51 0b17 	vmov	r0, r1, d7
 800445a:	2300      	movs	r3, #0
 800445c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004460:	f7fc fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 8004464:	4680      	mov	r8, r0
 8004466:	b158      	cbz	r0, 8004480 <_dtoa_r+0xe8>
 8004468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800446a:	2301      	movs	r3, #1
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8551 	beq.w	8004f18 <_dtoa_r+0xb80>
 8004476:	488b      	ldr	r0, [pc, #556]	; (80046a4 <_dtoa_r+0x30c>)
 8004478:	6018      	str	r0, [r3, #0]
 800447a:	1e43      	subs	r3, r0, #1
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	e7dd      	b.n	800443c <_dtoa_r+0xa4>
 8004480:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004484:	aa12      	add	r2, sp, #72	; 0x48
 8004486:	a913      	add	r1, sp, #76	; 0x4c
 8004488:	4620      	mov	r0, r4
 800448a:	f001 f89f 	bl	80055cc <__d2b>
 800448e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004492:	4683      	mov	fp, r0
 8004494:	2d00      	cmp	r5, #0
 8004496:	d07c      	beq.n	8004592 <_dtoa_r+0x1fa>
 8004498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800449a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800449e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80044a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80044aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80044ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80044b2:	4b7d      	ldr	r3, [pc, #500]	; (80046a8 <_dtoa_r+0x310>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	4630      	mov	r0, r6
 80044b8:	4639      	mov	r1, r7
 80044ba:	f7fb fee5 	bl	8000288 <__aeabi_dsub>
 80044be:	a36e      	add	r3, pc, #440	; (adr r3, 8004678 <_dtoa_r+0x2e0>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fc f898 	bl	80005f8 <__aeabi_dmul>
 80044c8:	a36d      	add	r3, pc, #436	; (adr r3, 8004680 <_dtoa_r+0x2e8>)
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f7fb fedd 	bl	800028c <__adddf3>
 80044d2:	4606      	mov	r6, r0
 80044d4:	4628      	mov	r0, r5
 80044d6:	460f      	mov	r7, r1
 80044d8:	f7fc f824 	bl	8000524 <__aeabi_i2d>
 80044dc:	a36a      	add	r3, pc, #424	; (adr r3, 8004688 <_dtoa_r+0x2f0>)
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f7fc f889 	bl	80005f8 <__aeabi_dmul>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4630      	mov	r0, r6
 80044ec:	4639      	mov	r1, r7
 80044ee:	f7fb fecd 	bl	800028c <__adddf3>
 80044f2:	4606      	mov	r6, r0
 80044f4:	460f      	mov	r7, r1
 80044f6:	f7fc fb2f 	bl	8000b58 <__aeabi_d2iz>
 80044fa:	2200      	movs	r2, #0
 80044fc:	4682      	mov	sl, r0
 80044fe:	2300      	movs	r3, #0
 8004500:	4630      	mov	r0, r6
 8004502:	4639      	mov	r1, r7
 8004504:	f7fc faea 	bl	8000adc <__aeabi_dcmplt>
 8004508:	b148      	cbz	r0, 800451e <_dtoa_r+0x186>
 800450a:	4650      	mov	r0, sl
 800450c:	f7fc f80a 	bl	8000524 <__aeabi_i2d>
 8004510:	4632      	mov	r2, r6
 8004512:	463b      	mov	r3, r7
 8004514:	f7fc fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004518:	b908      	cbnz	r0, 800451e <_dtoa_r+0x186>
 800451a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800451e:	f1ba 0f16 	cmp.w	sl, #22
 8004522:	d854      	bhi.n	80045ce <_dtoa_r+0x236>
 8004524:	4b61      	ldr	r3, [pc, #388]	; (80046ac <_dtoa_r+0x314>)
 8004526:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004532:	f7fc fad3 	bl	8000adc <__aeabi_dcmplt>
 8004536:	2800      	cmp	r0, #0
 8004538:	d04b      	beq.n	80045d2 <_dtoa_r+0x23a>
 800453a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800453e:	2300      	movs	r3, #0
 8004540:	930e      	str	r3, [sp, #56]	; 0x38
 8004542:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004544:	1b5d      	subs	r5, r3, r5
 8004546:	1e6b      	subs	r3, r5, #1
 8004548:	9304      	str	r3, [sp, #16]
 800454a:	bf43      	ittte	mi
 800454c:	2300      	movmi	r3, #0
 800454e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004552:	9304      	strmi	r3, [sp, #16]
 8004554:	f04f 0800 	movpl.w	r8, #0
 8004558:	f1ba 0f00 	cmp.w	sl, #0
 800455c:	db3b      	blt.n	80045d6 <_dtoa_r+0x23e>
 800455e:	9b04      	ldr	r3, [sp, #16]
 8004560:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004564:	4453      	add	r3, sl
 8004566:	9304      	str	r3, [sp, #16]
 8004568:	2300      	movs	r3, #0
 800456a:	9306      	str	r3, [sp, #24]
 800456c:	9b05      	ldr	r3, [sp, #20]
 800456e:	2b09      	cmp	r3, #9
 8004570:	d869      	bhi.n	8004646 <_dtoa_r+0x2ae>
 8004572:	2b05      	cmp	r3, #5
 8004574:	bfc4      	itt	gt
 8004576:	3b04      	subgt	r3, #4
 8004578:	9305      	strgt	r3, [sp, #20]
 800457a:	9b05      	ldr	r3, [sp, #20]
 800457c:	f1a3 0302 	sub.w	r3, r3, #2
 8004580:	bfcc      	ite	gt
 8004582:	2500      	movgt	r5, #0
 8004584:	2501      	movle	r5, #1
 8004586:	2b03      	cmp	r3, #3
 8004588:	d869      	bhi.n	800465e <_dtoa_r+0x2c6>
 800458a:	e8df f003 	tbb	[pc, r3]
 800458e:	4e2c      	.short	0x4e2c
 8004590:	5a4c      	.short	0x5a4c
 8004592:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004596:	441d      	add	r5, r3
 8004598:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800459c:	2b20      	cmp	r3, #32
 800459e:	bfc1      	itttt	gt
 80045a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80045a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80045a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80045ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80045b0:	bfda      	itte	le
 80045b2:	f1c3 0320 	rsble	r3, r3, #32
 80045b6:	fa06 f003 	lslle.w	r0, r6, r3
 80045ba:	4318      	orrgt	r0, r3
 80045bc:	f7fb ffa2 	bl	8000504 <__aeabi_ui2d>
 80045c0:	2301      	movs	r3, #1
 80045c2:	4606      	mov	r6, r0
 80045c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80045c8:	3d01      	subs	r5, #1
 80045ca:	9310      	str	r3, [sp, #64]	; 0x40
 80045cc:	e771      	b.n	80044b2 <_dtoa_r+0x11a>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e7b6      	b.n	8004540 <_dtoa_r+0x1a8>
 80045d2:	900e      	str	r0, [sp, #56]	; 0x38
 80045d4:	e7b5      	b.n	8004542 <_dtoa_r+0x1aa>
 80045d6:	f1ca 0300 	rsb	r3, sl, #0
 80045da:	9306      	str	r3, [sp, #24]
 80045dc:	2300      	movs	r3, #0
 80045de:	eba8 080a 	sub.w	r8, r8, sl
 80045e2:	930d      	str	r3, [sp, #52]	; 0x34
 80045e4:	e7c2      	b.n	800456c <_dtoa_r+0x1d4>
 80045e6:	2300      	movs	r3, #0
 80045e8:	9308      	str	r3, [sp, #32]
 80045ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dc39      	bgt.n	8004664 <_dtoa_r+0x2cc>
 80045f0:	f04f 0901 	mov.w	r9, #1
 80045f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80045f8:	464b      	mov	r3, r9
 80045fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80045fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004600:	2200      	movs	r2, #0
 8004602:	6042      	str	r2, [r0, #4]
 8004604:	2204      	movs	r2, #4
 8004606:	f102 0614 	add.w	r6, r2, #20
 800460a:	429e      	cmp	r6, r3
 800460c:	6841      	ldr	r1, [r0, #4]
 800460e:	d92f      	bls.n	8004670 <_dtoa_r+0x2d8>
 8004610:	4620      	mov	r0, r4
 8004612:	f000 fcb9 	bl	8004f88 <_Balloc>
 8004616:	9000      	str	r0, [sp, #0]
 8004618:	2800      	cmp	r0, #0
 800461a:	d14b      	bne.n	80046b4 <_dtoa_r+0x31c>
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <_dtoa_r+0x318>)
 800461e:	4602      	mov	r2, r0
 8004620:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004624:	e6d1      	b.n	80043ca <_dtoa_r+0x32>
 8004626:	2301      	movs	r3, #1
 8004628:	e7de      	b.n	80045e8 <_dtoa_r+0x250>
 800462a:	2300      	movs	r3, #0
 800462c:	9308      	str	r3, [sp, #32]
 800462e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004630:	eb0a 0903 	add.w	r9, sl, r3
 8004634:	f109 0301 	add.w	r3, r9, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	bfb8      	it	lt
 800463e:	2301      	movlt	r3, #1
 8004640:	e7dd      	b.n	80045fe <_dtoa_r+0x266>
 8004642:	2301      	movs	r3, #1
 8004644:	e7f2      	b.n	800462c <_dtoa_r+0x294>
 8004646:	2501      	movs	r5, #1
 8004648:	2300      	movs	r3, #0
 800464a:	9305      	str	r3, [sp, #20]
 800464c:	9508      	str	r5, [sp, #32]
 800464e:	f04f 39ff 	mov.w	r9, #4294967295
 8004652:	2200      	movs	r2, #0
 8004654:	f8cd 9004 	str.w	r9, [sp, #4]
 8004658:	2312      	movs	r3, #18
 800465a:	9209      	str	r2, [sp, #36]	; 0x24
 800465c:	e7cf      	b.n	80045fe <_dtoa_r+0x266>
 800465e:	2301      	movs	r3, #1
 8004660:	9308      	str	r3, [sp, #32]
 8004662:	e7f4      	b.n	800464e <_dtoa_r+0x2b6>
 8004664:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004668:	f8cd 9004 	str.w	r9, [sp, #4]
 800466c:	464b      	mov	r3, r9
 800466e:	e7c6      	b.n	80045fe <_dtoa_r+0x266>
 8004670:	3101      	adds	r1, #1
 8004672:	6041      	str	r1, [r0, #4]
 8004674:	0052      	lsls	r2, r2, #1
 8004676:	e7c6      	b.n	8004606 <_dtoa_r+0x26e>
 8004678:	636f4361 	.word	0x636f4361
 800467c:	3fd287a7 	.word	0x3fd287a7
 8004680:	8b60c8b3 	.word	0x8b60c8b3
 8004684:	3fc68a28 	.word	0x3fc68a28
 8004688:	509f79fb 	.word	0x509f79fb
 800468c:	3fd34413 	.word	0x3fd34413
 8004690:	0800689d 	.word	0x0800689d
 8004694:	080068b4 	.word	0x080068b4
 8004698:	7ff00000 	.word	0x7ff00000
 800469c:	08006899 	.word	0x08006899
 80046a0:	08006890 	.word	0x08006890
 80046a4:	0800686d 	.word	0x0800686d
 80046a8:	3ff80000 	.word	0x3ff80000
 80046ac:	080069b0 	.word	0x080069b0
 80046b0:	08006913 	.word	0x08006913
 80046b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b6:	9a00      	ldr	r2, [sp, #0]
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	2b0e      	cmp	r3, #14
 80046be:	f200 80ad 	bhi.w	800481c <_dtoa_r+0x484>
 80046c2:	2d00      	cmp	r5, #0
 80046c4:	f000 80aa 	beq.w	800481c <_dtoa_r+0x484>
 80046c8:	f1ba 0f00 	cmp.w	sl, #0
 80046cc:	dd36      	ble.n	800473c <_dtoa_r+0x3a4>
 80046ce:	4ac3      	ldr	r2, [pc, #780]	; (80049dc <_dtoa_r+0x644>)
 80046d0:	f00a 030f 	and.w	r3, sl, #15
 80046d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046d8:	ed93 7b00 	vldr	d7, [r3]
 80046dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80046e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80046e4:	eeb0 8a47 	vmov.f32	s16, s14
 80046e8:	eef0 8a67 	vmov.f32	s17, s15
 80046ec:	d016      	beq.n	800471c <_dtoa_r+0x384>
 80046ee:	4bbc      	ldr	r3, [pc, #752]	; (80049e0 <_dtoa_r+0x648>)
 80046f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80046f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046f8:	f7fc f8a8 	bl	800084c <__aeabi_ddiv>
 80046fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004700:	f007 070f 	and.w	r7, r7, #15
 8004704:	2503      	movs	r5, #3
 8004706:	4eb6      	ldr	r6, [pc, #728]	; (80049e0 <_dtoa_r+0x648>)
 8004708:	b957      	cbnz	r7, 8004720 <_dtoa_r+0x388>
 800470a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800470e:	ec53 2b18 	vmov	r2, r3, d8
 8004712:	f7fc f89b 	bl	800084c <__aeabi_ddiv>
 8004716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800471a:	e029      	b.n	8004770 <_dtoa_r+0x3d8>
 800471c:	2502      	movs	r5, #2
 800471e:	e7f2      	b.n	8004706 <_dtoa_r+0x36e>
 8004720:	07f9      	lsls	r1, r7, #31
 8004722:	d508      	bpl.n	8004736 <_dtoa_r+0x39e>
 8004724:	ec51 0b18 	vmov	r0, r1, d8
 8004728:	e9d6 2300 	ldrd	r2, r3, [r6]
 800472c:	f7fb ff64 	bl	80005f8 <__aeabi_dmul>
 8004730:	ec41 0b18 	vmov	d8, r0, r1
 8004734:	3501      	adds	r5, #1
 8004736:	107f      	asrs	r7, r7, #1
 8004738:	3608      	adds	r6, #8
 800473a:	e7e5      	b.n	8004708 <_dtoa_r+0x370>
 800473c:	f000 80a6 	beq.w	800488c <_dtoa_r+0x4f4>
 8004740:	f1ca 0600 	rsb	r6, sl, #0
 8004744:	4ba5      	ldr	r3, [pc, #660]	; (80049dc <_dtoa_r+0x644>)
 8004746:	4fa6      	ldr	r7, [pc, #664]	; (80049e0 <_dtoa_r+0x648>)
 8004748:	f006 020f 	and.w	r2, r6, #15
 800474c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004758:	f7fb ff4e 	bl	80005f8 <__aeabi_dmul>
 800475c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004760:	1136      	asrs	r6, r6, #4
 8004762:	2300      	movs	r3, #0
 8004764:	2502      	movs	r5, #2
 8004766:	2e00      	cmp	r6, #0
 8004768:	f040 8085 	bne.w	8004876 <_dtoa_r+0x4de>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1d2      	bne.n	8004716 <_dtoa_r+0x37e>
 8004770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 808c 	beq.w	8004890 <_dtoa_r+0x4f8>
 8004778:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800477c:	4b99      	ldr	r3, [pc, #612]	; (80049e4 <_dtoa_r+0x64c>)
 800477e:	2200      	movs	r2, #0
 8004780:	4630      	mov	r0, r6
 8004782:	4639      	mov	r1, r7
 8004784:	f7fc f9aa 	bl	8000adc <__aeabi_dcmplt>
 8004788:	2800      	cmp	r0, #0
 800478a:	f000 8081 	beq.w	8004890 <_dtoa_r+0x4f8>
 800478e:	9b01      	ldr	r3, [sp, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d07d      	beq.n	8004890 <_dtoa_r+0x4f8>
 8004794:	f1b9 0f00 	cmp.w	r9, #0
 8004798:	dd3c      	ble.n	8004814 <_dtoa_r+0x47c>
 800479a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800479e:	9307      	str	r3, [sp, #28]
 80047a0:	2200      	movs	r2, #0
 80047a2:	4b91      	ldr	r3, [pc, #580]	; (80049e8 <_dtoa_r+0x650>)
 80047a4:	4630      	mov	r0, r6
 80047a6:	4639      	mov	r1, r7
 80047a8:	f7fb ff26 	bl	80005f8 <__aeabi_dmul>
 80047ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047b0:	3501      	adds	r5, #1
 80047b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80047b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80047ba:	4628      	mov	r0, r5
 80047bc:	f7fb feb2 	bl	8000524 <__aeabi_i2d>
 80047c0:	4632      	mov	r2, r6
 80047c2:	463b      	mov	r3, r7
 80047c4:	f7fb ff18 	bl	80005f8 <__aeabi_dmul>
 80047c8:	4b88      	ldr	r3, [pc, #544]	; (80049ec <_dtoa_r+0x654>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	f7fb fd5e 	bl	800028c <__adddf3>
 80047d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80047d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047d8:	9303      	str	r3, [sp, #12]
 80047da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d15c      	bne.n	800489a <_dtoa_r+0x502>
 80047e0:	4b83      	ldr	r3, [pc, #524]	; (80049f0 <_dtoa_r+0x658>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	4630      	mov	r0, r6
 80047e6:	4639      	mov	r1, r7
 80047e8:	f7fb fd4e 	bl	8000288 <__aeabi_dsub>
 80047ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047f0:	4606      	mov	r6, r0
 80047f2:	460f      	mov	r7, r1
 80047f4:	f7fc f990 	bl	8000b18 <__aeabi_dcmpgt>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f040 8296 	bne.w	8004d2a <_dtoa_r+0x992>
 80047fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004802:	4630      	mov	r0, r6
 8004804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004808:	4639      	mov	r1, r7
 800480a:	f7fc f967 	bl	8000adc <__aeabi_dcmplt>
 800480e:	2800      	cmp	r0, #0
 8004810:	f040 8288 	bne.w	8004d24 <_dtoa_r+0x98c>
 8004814:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004818:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800481c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800481e:	2b00      	cmp	r3, #0
 8004820:	f2c0 8158 	blt.w	8004ad4 <_dtoa_r+0x73c>
 8004824:	f1ba 0f0e 	cmp.w	sl, #14
 8004828:	f300 8154 	bgt.w	8004ad4 <_dtoa_r+0x73c>
 800482c:	4b6b      	ldr	r3, [pc, #428]	; (80049dc <_dtoa_r+0x644>)
 800482e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004832:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004838:	2b00      	cmp	r3, #0
 800483a:	f280 80e3 	bge.w	8004a04 <_dtoa_r+0x66c>
 800483e:	9b01      	ldr	r3, [sp, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f300 80df 	bgt.w	8004a04 <_dtoa_r+0x66c>
 8004846:	f040 826d 	bne.w	8004d24 <_dtoa_r+0x98c>
 800484a:	4b69      	ldr	r3, [pc, #420]	; (80049f0 <_dtoa_r+0x658>)
 800484c:	2200      	movs	r2, #0
 800484e:	4640      	mov	r0, r8
 8004850:	4649      	mov	r1, r9
 8004852:	f7fb fed1 	bl	80005f8 <__aeabi_dmul>
 8004856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800485a:	f7fc f953 	bl	8000b04 <__aeabi_dcmpge>
 800485e:	9e01      	ldr	r6, [sp, #4]
 8004860:	4637      	mov	r7, r6
 8004862:	2800      	cmp	r0, #0
 8004864:	f040 8243 	bne.w	8004cee <_dtoa_r+0x956>
 8004868:	9d00      	ldr	r5, [sp, #0]
 800486a:	2331      	movs	r3, #49	; 0x31
 800486c:	f805 3b01 	strb.w	r3, [r5], #1
 8004870:	f10a 0a01 	add.w	sl, sl, #1
 8004874:	e23f      	b.n	8004cf6 <_dtoa_r+0x95e>
 8004876:	07f2      	lsls	r2, r6, #31
 8004878:	d505      	bpl.n	8004886 <_dtoa_r+0x4ee>
 800487a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800487e:	f7fb febb 	bl	80005f8 <__aeabi_dmul>
 8004882:	3501      	adds	r5, #1
 8004884:	2301      	movs	r3, #1
 8004886:	1076      	asrs	r6, r6, #1
 8004888:	3708      	adds	r7, #8
 800488a:	e76c      	b.n	8004766 <_dtoa_r+0x3ce>
 800488c:	2502      	movs	r5, #2
 800488e:	e76f      	b.n	8004770 <_dtoa_r+0x3d8>
 8004890:	9b01      	ldr	r3, [sp, #4]
 8004892:	f8cd a01c 	str.w	sl, [sp, #28]
 8004896:	930c      	str	r3, [sp, #48]	; 0x30
 8004898:	e78d      	b.n	80047b6 <_dtoa_r+0x41e>
 800489a:	9900      	ldr	r1, [sp, #0]
 800489c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800489e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048a0:	4b4e      	ldr	r3, [pc, #312]	; (80049dc <_dtoa_r+0x644>)
 80048a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048a6:	4401      	add	r1, r0
 80048a8:	9102      	str	r1, [sp, #8]
 80048aa:	9908      	ldr	r1, [sp, #32]
 80048ac:	eeb0 8a47 	vmov.f32	s16, s14
 80048b0:	eef0 8a67 	vmov.f32	s17, s15
 80048b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048bc:	2900      	cmp	r1, #0
 80048be:	d045      	beq.n	800494c <_dtoa_r+0x5b4>
 80048c0:	494c      	ldr	r1, [pc, #304]	; (80049f4 <_dtoa_r+0x65c>)
 80048c2:	2000      	movs	r0, #0
 80048c4:	f7fb ffc2 	bl	800084c <__aeabi_ddiv>
 80048c8:	ec53 2b18 	vmov	r2, r3, d8
 80048cc:	f7fb fcdc 	bl	8000288 <__aeabi_dsub>
 80048d0:	9d00      	ldr	r5, [sp, #0]
 80048d2:	ec41 0b18 	vmov	d8, r0, r1
 80048d6:	4639      	mov	r1, r7
 80048d8:	4630      	mov	r0, r6
 80048da:	f7fc f93d 	bl	8000b58 <__aeabi_d2iz>
 80048de:	900c      	str	r0, [sp, #48]	; 0x30
 80048e0:	f7fb fe20 	bl	8000524 <__aeabi_i2d>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4630      	mov	r0, r6
 80048ea:	4639      	mov	r1, r7
 80048ec:	f7fb fccc 	bl	8000288 <__aeabi_dsub>
 80048f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048f2:	3330      	adds	r3, #48	; 0x30
 80048f4:	f805 3b01 	strb.w	r3, [r5], #1
 80048f8:	ec53 2b18 	vmov	r2, r3, d8
 80048fc:	4606      	mov	r6, r0
 80048fe:	460f      	mov	r7, r1
 8004900:	f7fc f8ec 	bl	8000adc <__aeabi_dcmplt>
 8004904:	2800      	cmp	r0, #0
 8004906:	d165      	bne.n	80049d4 <_dtoa_r+0x63c>
 8004908:	4632      	mov	r2, r6
 800490a:	463b      	mov	r3, r7
 800490c:	4935      	ldr	r1, [pc, #212]	; (80049e4 <_dtoa_r+0x64c>)
 800490e:	2000      	movs	r0, #0
 8004910:	f7fb fcba 	bl	8000288 <__aeabi_dsub>
 8004914:	ec53 2b18 	vmov	r2, r3, d8
 8004918:	f7fc f8e0 	bl	8000adc <__aeabi_dcmplt>
 800491c:	2800      	cmp	r0, #0
 800491e:	f040 80b9 	bne.w	8004a94 <_dtoa_r+0x6fc>
 8004922:	9b02      	ldr	r3, [sp, #8]
 8004924:	429d      	cmp	r5, r3
 8004926:	f43f af75 	beq.w	8004814 <_dtoa_r+0x47c>
 800492a:	4b2f      	ldr	r3, [pc, #188]	; (80049e8 <_dtoa_r+0x650>)
 800492c:	ec51 0b18 	vmov	r0, r1, d8
 8004930:	2200      	movs	r2, #0
 8004932:	f7fb fe61 	bl	80005f8 <__aeabi_dmul>
 8004936:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <_dtoa_r+0x650>)
 8004938:	ec41 0b18 	vmov	d8, r0, r1
 800493c:	2200      	movs	r2, #0
 800493e:	4630      	mov	r0, r6
 8004940:	4639      	mov	r1, r7
 8004942:	f7fb fe59 	bl	80005f8 <__aeabi_dmul>
 8004946:	4606      	mov	r6, r0
 8004948:	460f      	mov	r7, r1
 800494a:	e7c4      	b.n	80048d6 <_dtoa_r+0x53e>
 800494c:	ec51 0b17 	vmov	r0, r1, d7
 8004950:	f7fb fe52 	bl	80005f8 <__aeabi_dmul>
 8004954:	9b02      	ldr	r3, [sp, #8]
 8004956:	9d00      	ldr	r5, [sp, #0]
 8004958:	930c      	str	r3, [sp, #48]	; 0x30
 800495a:	ec41 0b18 	vmov	d8, r0, r1
 800495e:	4639      	mov	r1, r7
 8004960:	4630      	mov	r0, r6
 8004962:	f7fc f8f9 	bl	8000b58 <__aeabi_d2iz>
 8004966:	9011      	str	r0, [sp, #68]	; 0x44
 8004968:	f7fb fddc 	bl	8000524 <__aeabi_i2d>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4630      	mov	r0, r6
 8004972:	4639      	mov	r1, r7
 8004974:	f7fb fc88 	bl	8000288 <__aeabi_dsub>
 8004978:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800497a:	3330      	adds	r3, #48	; 0x30
 800497c:	f805 3b01 	strb.w	r3, [r5], #1
 8004980:	9b02      	ldr	r3, [sp, #8]
 8004982:	429d      	cmp	r5, r3
 8004984:	4606      	mov	r6, r0
 8004986:	460f      	mov	r7, r1
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	d134      	bne.n	80049f8 <_dtoa_r+0x660>
 800498e:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <_dtoa_r+0x65c>)
 8004990:	ec51 0b18 	vmov	r0, r1, d8
 8004994:	f7fb fc7a 	bl	800028c <__adddf3>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4630      	mov	r0, r6
 800499e:	4639      	mov	r1, r7
 80049a0:	f7fc f8ba 	bl	8000b18 <__aeabi_dcmpgt>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d175      	bne.n	8004a94 <_dtoa_r+0x6fc>
 80049a8:	ec53 2b18 	vmov	r2, r3, d8
 80049ac:	4911      	ldr	r1, [pc, #68]	; (80049f4 <_dtoa_r+0x65c>)
 80049ae:	2000      	movs	r0, #0
 80049b0:	f7fb fc6a 	bl	8000288 <__aeabi_dsub>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4630      	mov	r0, r6
 80049ba:	4639      	mov	r1, r7
 80049bc:	f7fc f88e 	bl	8000adc <__aeabi_dcmplt>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	f43f af27 	beq.w	8004814 <_dtoa_r+0x47c>
 80049c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049c8:	1e6b      	subs	r3, r5, #1
 80049ca:	930c      	str	r3, [sp, #48]	; 0x30
 80049cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d0f8      	beq.n	80049c6 <_dtoa_r+0x62e>
 80049d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80049d8:	e04a      	b.n	8004a70 <_dtoa_r+0x6d8>
 80049da:	bf00      	nop
 80049dc:	080069b0 	.word	0x080069b0
 80049e0:	08006988 	.word	0x08006988
 80049e4:	3ff00000 	.word	0x3ff00000
 80049e8:	40240000 	.word	0x40240000
 80049ec:	401c0000 	.word	0x401c0000
 80049f0:	40140000 	.word	0x40140000
 80049f4:	3fe00000 	.word	0x3fe00000
 80049f8:	4baf      	ldr	r3, [pc, #700]	; (8004cb8 <_dtoa_r+0x920>)
 80049fa:	f7fb fdfd 	bl	80005f8 <__aeabi_dmul>
 80049fe:	4606      	mov	r6, r0
 8004a00:	460f      	mov	r7, r1
 8004a02:	e7ac      	b.n	800495e <_dtoa_r+0x5c6>
 8004a04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a08:	9d00      	ldr	r5, [sp, #0]
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	4630      	mov	r0, r6
 8004a10:	4639      	mov	r1, r7
 8004a12:	f7fb ff1b 	bl	800084c <__aeabi_ddiv>
 8004a16:	f7fc f89f 	bl	8000b58 <__aeabi_d2iz>
 8004a1a:	9002      	str	r0, [sp, #8]
 8004a1c:	f7fb fd82 	bl	8000524 <__aeabi_i2d>
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	f7fb fde8 	bl	80005f8 <__aeabi_dmul>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4639      	mov	r1, r7
 8004a30:	f7fb fc2a 	bl	8000288 <__aeabi_dsub>
 8004a34:	9e02      	ldr	r6, [sp, #8]
 8004a36:	9f01      	ldr	r7, [sp, #4]
 8004a38:	3630      	adds	r6, #48	; 0x30
 8004a3a:	f805 6b01 	strb.w	r6, [r5], #1
 8004a3e:	9e00      	ldr	r6, [sp, #0]
 8004a40:	1bae      	subs	r6, r5, r6
 8004a42:	42b7      	cmp	r7, r6
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	d137      	bne.n	8004aba <_dtoa_r+0x722>
 8004a4a:	f7fb fc1f 	bl	800028c <__adddf3>
 8004a4e:	4642      	mov	r2, r8
 8004a50:	464b      	mov	r3, r9
 8004a52:	4606      	mov	r6, r0
 8004a54:	460f      	mov	r7, r1
 8004a56:	f7fc f85f 	bl	8000b18 <__aeabi_dcmpgt>
 8004a5a:	b9c8      	cbnz	r0, 8004a90 <_dtoa_r+0x6f8>
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	4630      	mov	r0, r6
 8004a62:	4639      	mov	r1, r7
 8004a64:	f7fc f830 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a68:	b110      	cbz	r0, 8004a70 <_dtoa_r+0x6d8>
 8004a6a:	9b02      	ldr	r3, [sp, #8]
 8004a6c:	07d9      	lsls	r1, r3, #31
 8004a6e:	d40f      	bmi.n	8004a90 <_dtoa_r+0x6f8>
 8004a70:	4620      	mov	r0, r4
 8004a72:	4659      	mov	r1, fp
 8004a74:	f000 fac8 	bl	8005008 <_Bfree>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	702b      	strb	r3, [r5, #0]
 8004a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a7e:	f10a 0001 	add.w	r0, sl, #1
 8004a82:	6018      	str	r0, [r3, #0]
 8004a84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f43f acd8 	beq.w	800443c <_dtoa_r+0xa4>
 8004a8c:	601d      	str	r5, [r3, #0]
 8004a8e:	e4d5      	b.n	800443c <_dtoa_r+0xa4>
 8004a90:	f8cd a01c 	str.w	sl, [sp, #28]
 8004a94:	462b      	mov	r3, r5
 8004a96:	461d      	mov	r5, r3
 8004a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a9c:	2a39      	cmp	r2, #57	; 0x39
 8004a9e:	d108      	bne.n	8004ab2 <_dtoa_r+0x71a>
 8004aa0:	9a00      	ldr	r2, [sp, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d1f7      	bne.n	8004a96 <_dtoa_r+0x6fe>
 8004aa6:	9a07      	ldr	r2, [sp, #28]
 8004aa8:	9900      	ldr	r1, [sp, #0]
 8004aaa:	3201      	adds	r2, #1
 8004aac:	9207      	str	r2, [sp, #28]
 8004aae:	2230      	movs	r2, #48	; 0x30
 8004ab0:	700a      	strb	r2, [r1, #0]
 8004ab2:	781a      	ldrb	r2, [r3, #0]
 8004ab4:	3201      	adds	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e78c      	b.n	80049d4 <_dtoa_r+0x63c>
 8004aba:	4b7f      	ldr	r3, [pc, #508]	; (8004cb8 <_dtoa_r+0x920>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	f7fb fd9b 	bl	80005f8 <__aeabi_dmul>
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	460f      	mov	r7, r1
 8004aca:	f7fb fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d09b      	beq.n	8004a0a <_dtoa_r+0x672>
 8004ad2:	e7cd      	b.n	8004a70 <_dtoa_r+0x6d8>
 8004ad4:	9a08      	ldr	r2, [sp, #32]
 8004ad6:	2a00      	cmp	r2, #0
 8004ad8:	f000 80c4 	beq.w	8004c64 <_dtoa_r+0x8cc>
 8004adc:	9a05      	ldr	r2, [sp, #20]
 8004ade:	2a01      	cmp	r2, #1
 8004ae0:	f300 80a8 	bgt.w	8004c34 <_dtoa_r+0x89c>
 8004ae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ae6:	2a00      	cmp	r2, #0
 8004ae8:	f000 80a0 	beq.w	8004c2c <_dtoa_r+0x894>
 8004aec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004af0:	9e06      	ldr	r6, [sp, #24]
 8004af2:	4645      	mov	r5, r8
 8004af4:	9a04      	ldr	r2, [sp, #16]
 8004af6:	2101      	movs	r1, #1
 8004af8:	441a      	add	r2, r3
 8004afa:	4620      	mov	r0, r4
 8004afc:	4498      	add	r8, r3
 8004afe:	9204      	str	r2, [sp, #16]
 8004b00:	f000 fb3e 	bl	8005180 <__i2b>
 8004b04:	4607      	mov	r7, r0
 8004b06:	2d00      	cmp	r5, #0
 8004b08:	dd0b      	ble.n	8004b22 <_dtoa_r+0x78a>
 8004b0a:	9b04      	ldr	r3, [sp, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dd08      	ble.n	8004b22 <_dtoa_r+0x78a>
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	9a04      	ldr	r2, [sp, #16]
 8004b14:	bfa8      	it	ge
 8004b16:	462b      	movge	r3, r5
 8004b18:	eba8 0803 	sub.w	r8, r8, r3
 8004b1c:	1aed      	subs	r5, r5, r3
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	9304      	str	r3, [sp, #16]
 8004b22:	9b06      	ldr	r3, [sp, #24]
 8004b24:	b1fb      	cbz	r3, 8004b66 <_dtoa_r+0x7ce>
 8004b26:	9b08      	ldr	r3, [sp, #32]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 809f 	beq.w	8004c6c <_dtoa_r+0x8d4>
 8004b2e:	2e00      	cmp	r6, #0
 8004b30:	dd11      	ble.n	8004b56 <_dtoa_r+0x7be>
 8004b32:	4639      	mov	r1, r7
 8004b34:	4632      	mov	r2, r6
 8004b36:	4620      	mov	r0, r4
 8004b38:	f000 fbde 	bl	80052f8 <__pow5mult>
 8004b3c:	465a      	mov	r2, fp
 8004b3e:	4601      	mov	r1, r0
 8004b40:	4607      	mov	r7, r0
 8004b42:	4620      	mov	r0, r4
 8004b44:	f000 fb32 	bl	80051ac <__multiply>
 8004b48:	4659      	mov	r1, fp
 8004b4a:	9007      	str	r0, [sp, #28]
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f000 fa5b 	bl	8005008 <_Bfree>
 8004b52:	9b07      	ldr	r3, [sp, #28]
 8004b54:	469b      	mov	fp, r3
 8004b56:	9b06      	ldr	r3, [sp, #24]
 8004b58:	1b9a      	subs	r2, r3, r6
 8004b5a:	d004      	beq.n	8004b66 <_dtoa_r+0x7ce>
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f000 fbca 	bl	80052f8 <__pow5mult>
 8004b64:	4683      	mov	fp, r0
 8004b66:	2101      	movs	r1, #1
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f000 fb09 	bl	8005180 <__i2b>
 8004b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	4606      	mov	r6, r0
 8004b74:	dd7c      	ble.n	8004c70 <_dtoa_r+0x8d8>
 8004b76:	461a      	mov	r2, r3
 8004b78:	4601      	mov	r1, r0
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f000 fbbc 	bl	80052f8 <__pow5mult>
 8004b80:	9b05      	ldr	r3, [sp, #20]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	4606      	mov	r6, r0
 8004b86:	dd76      	ble.n	8004c76 <_dtoa_r+0x8de>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9306      	str	r3, [sp, #24]
 8004b8c:	6933      	ldr	r3, [r6, #16]
 8004b8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004b92:	6918      	ldr	r0, [r3, #16]
 8004b94:	f000 faa4 	bl	80050e0 <__hi0bits>
 8004b98:	f1c0 0020 	rsb	r0, r0, #32
 8004b9c:	9b04      	ldr	r3, [sp, #16]
 8004b9e:	4418      	add	r0, r3
 8004ba0:	f010 001f 	ands.w	r0, r0, #31
 8004ba4:	f000 8086 	beq.w	8004cb4 <_dtoa_r+0x91c>
 8004ba8:	f1c0 0320 	rsb	r3, r0, #32
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	dd7f      	ble.n	8004cb0 <_dtoa_r+0x918>
 8004bb0:	f1c0 001c 	rsb	r0, r0, #28
 8004bb4:	9b04      	ldr	r3, [sp, #16]
 8004bb6:	4403      	add	r3, r0
 8004bb8:	4480      	add	r8, r0
 8004bba:	4405      	add	r5, r0
 8004bbc:	9304      	str	r3, [sp, #16]
 8004bbe:	f1b8 0f00 	cmp.w	r8, #0
 8004bc2:	dd05      	ble.n	8004bd0 <_dtoa_r+0x838>
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f000 fbef 	bl	80053ac <__lshift>
 8004bce:	4683      	mov	fp, r0
 8004bd0:	9b04      	ldr	r3, [sp, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	dd05      	ble.n	8004be2 <_dtoa_r+0x84a>
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f000 fbe6 	bl	80053ac <__lshift>
 8004be0:	4606      	mov	r6, r0
 8004be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d069      	beq.n	8004cbc <_dtoa_r+0x924>
 8004be8:	4631      	mov	r1, r6
 8004bea:	4658      	mov	r0, fp
 8004bec:	f000 fc4a 	bl	8005484 <__mcmp>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	da63      	bge.n	8004cbc <_dtoa_r+0x924>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4659      	mov	r1, fp
 8004bf8:	220a      	movs	r2, #10
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 fa26 	bl	800504c <__multadd>
 8004c00:	9b08      	ldr	r3, [sp, #32]
 8004c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c06:	4683      	mov	fp, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 818f 	beq.w	8004f2c <_dtoa_r+0xb94>
 8004c0e:	4639      	mov	r1, r7
 8004c10:	2300      	movs	r3, #0
 8004c12:	220a      	movs	r2, #10
 8004c14:	4620      	mov	r0, r4
 8004c16:	f000 fa19 	bl	800504c <__multadd>
 8004c1a:	f1b9 0f00 	cmp.w	r9, #0
 8004c1e:	4607      	mov	r7, r0
 8004c20:	f300 808e 	bgt.w	8004d40 <_dtoa_r+0x9a8>
 8004c24:	9b05      	ldr	r3, [sp, #20]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	dc50      	bgt.n	8004ccc <_dtoa_r+0x934>
 8004c2a:	e089      	b.n	8004d40 <_dtoa_r+0x9a8>
 8004c2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c32:	e75d      	b.n	8004af0 <_dtoa_r+0x758>
 8004c34:	9b01      	ldr	r3, [sp, #4]
 8004c36:	1e5e      	subs	r6, r3, #1
 8004c38:	9b06      	ldr	r3, [sp, #24]
 8004c3a:	42b3      	cmp	r3, r6
 8004c3c:	bfbf      	itttt	lt
 8004c3e:	9b06      	ldrlt	r3, [sp, #24]
 8004c40:	9606      	strlt	r6, [sp, #24]
 8004c42:	1af2      	sublt	r2, r6, r3
 8004c44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004c46:	bfb6      	itet	lt
 8004c48:	189b      	addlt	r3, r3, r2
 8004c4a:	1b9e      	subge	r6, r3, r6
 8004c4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004c4e:	9b01      	ldr	r3, [sp, #4]
 8004c50:	bfb8      	it	lt
 8004c52:	2600      	movlt	r6, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bfb5      	itete	lt
 8004c58:	eba8 0503 	sublt.w	r5, r8, r3
 8004c5c:	9b01      	ldrge	r3, [sp, #4]
 8004c5e:	2300      	movlt	r3, #0
 8004c60:	4645      	movge	r5, r8
 8004c62:	e747      	b.n	8004af4 <_dtoa_r+0x75c>
 8004c64:	9e06      	ldr	r6, [sp, #24]
 8004c66:	9f08      	ldr	r7, [sp, #32]
 8004c68:	4645      	mov	r5, r8
 8004c6a:	e74c      	b.n	8004b06 <_dtoa_r+0x76e>
 8004c6c:	9a06      	ldr	r2, [sp, #24]
 8004c6e:	e775      	b.n	8004b5c <_dtoa_r+0x7c4>
 8004c70:	9b05      	ldr	r3, [sp, #20]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	dc18      	bgt.n	8004ca8 <_dtoa_r+0x910>
 8004c76:	9b02      	ldr	r3, [sp, #8]
 8004c78:	b9b3      	cbnz	r3, 8004ca8 <_dtoa_r+0x910>
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c80:	b9a3      	cbnz	r3, 8004cac <_dtoa_r+0x914>
 8004c82:	9b03      	ldr	r3, [sp, #12]
 8004c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	0d1b      	lsrs	r3, r3, #20
 8004c8a:	051b      	lsls	r3, r3, #20
 8004c8c:	b12b      	cbz	r3, 8004c9a <_dtoa_r+0x902>
 8004c8e:	9b04      	ldr	r3, [sp, #16]
 8004c90:	3301      	adds	r3, #1
 8004c92:	9304      	str	r3, [sp, #16]
 8004c94:	f108 0801 	add.w	r8, r8, #1
 8004c98:	2301      	movs	r3, #1
 8004c9a:	9306      	str	r3, [sp, #24]
 8004c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f47f af74 	bne.w	8004b8c <_dtoa_r+0x7f4>
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	e779      	b.n	8004b9c <_dtoa_r+0x804>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	e7f6      	b.n	8004c9a <_dtoa_r+0x902>
 8004cac:	9b02      	ldr	r3, [sp, #8]
 8004cae:	e7f4      	b.n	8004c9a <_dtoa_r+0x902>
 8004cb0:	d085      	beq.n	8004bbe <_dtoa_r+0x826>
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	301c      	adds	r0, #28
 8004cb6:	e77d      	b.n	8004bb4 <_dtoa_r+0x81c>
 8004cb8:	40240000 	.word	0x40240000
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dc38      	bgt.n	8004d34 <_dtoa_r+0x99c>
 8004cc2:	9b05      	ldr	r3, [sp, #20]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	dd35      	ble.n	8004d34 <_dtoa_r+0x99c>
 8004cc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004ccc:	f1b9 0f00 	cmp.w	r9, #0
 8004cd0:	d10d      	bne.n	8004cee <_dtoa_r+0x956>
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	464b      	mov	r3, r9
 8004cd6:	2205      	movs	r2, #5
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f000 f9b7 	bl	800504c <__multadd>
 8004cde:	4601      	mov	r1, r0
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	4658      	mov	r0, fp
 8004ce4:	f000 fbce 	bl	8005484 <__mcmp>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f73f adbd 	bgt.w	8004868 <_dtoa_r+0x4d0>
 8004cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf0:	9d00      	ldr	r5, [sp, #0]
 8004cf2:	ea6f 0a03 	mvn.w	sl, r3
 8004cf6:	f04f 0800 	mov.w	r8, #0
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f000 f983 	bl	8005008 <_Bfree>
 8004d02:	2f00      	cmp	r7, #0
 8004d04:	f43f aeb4 	beq.w	8004a70 <_dtoa_r+0x6d8>
 8004d08:	f1b8 0f00 	cmp.w	r8, #0
 8004d0c:	d005      	beq.n	8004d1a <_dtoa_r+0x982>
 8004d0e:	45b8      	cmp	r8, r7
 8004d10:	d003      	beq.n	8004d1a <_dtoa_r+0x982>
 8004d12:	4641      	mov	r1, r8
 8004d14:	4620      	mov	r0, r4
 8004d16:	f000 f977 	bl	8005008 <_Bfree>
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 f973 	bl	8005008 <_Bfree>
 8004d22:	e6a5      	b.n	8004a70 <_dtoa_r+0x6d8>
 8004d24:	2600      	movs	r6, #0
 8004d26:	4637      	mov	r7, r6
 8004d28:	e7e1      	b.n	8004cee <_dtoa_r+0x956>
 8004d2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004d2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004d30:	4637      	mov	r7, r6
 8004d32:	e599      	b.n	8004868 <_dtoa_r+0x4d0>
 8004d34:	9b08      	ldr	r3, [sp, #32]
 8004d36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80fd 	beq.w	8004f3a <_dtoa_r+0xba2>
 8004d40:	2d00      	cmp	r5, #0
 8004d42:	dd05      	ble.n	8004d50 <_dtoa_r+0x9b8>
 8004d44:	4639      	mov	r1, r7
 8004d46:	462a      	mov	r2, r5
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f000 fb2f 	bl	80053ac <__lshift>
 8004d4e:	4607      	mov	r7, r0
 8004d50:	9b06      	ldr	r3, [sp, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d05c      	beq.n	8004e10 <_dtoa_r+0xa78>
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f000 f915 	bl	8004f88 <_Balloc>
 8004d5e:	4605      	mov	r5, r0
 8004d60:	b928      	cbnz	r0, 8004d6e <_dtoa_r+0x9d6>
 8004d62:	4b80      	ldr	r3, [pc, #512]	; (8004f64 <_dtoa_r+0xbcc>)
 8004d64:	4602      	mov	r2, r0
 8004d66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004d6a:	f7ff bb2e 	b.w	80043ca <_dtoa_r+0x32>
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	3202      	adds	r2, #2
 8004d72:	0092      	lsls	r2, r2, #2
 8004d74:	f107 010c 	add.w	r1, r7, #12
 8004d78:	300c      	adds	r0, #12
 8004d7a:	f7fe fdd1 	bl	8003920 <memcpy>
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4629      	mov	r1, r5
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 fb12 	bl	80053ac <__lshift>
 8004d88:	9b00      	ldr	r3, [sp, #0]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	9b00      	ldr	r3, [sp, #0]
 8004d90:	444b      	add	r3, r9
 8004d92:	9307      	str	r3, [sp, #28]
 8004d94:	9b02      	ldr	r3, [sp, #8]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	46b8      	mov	r8, r7
 8004d9c:	9306      	str	r3, [sp, #24]
 8004d9e:	4607      	mov	r7, r0
 8004da0:	9b01      	ldr	r3, [sp, #4]
 8004da2:	4631      	mov	r1, r6
 8004da4:	3b01      	subs	r3, #1
 8004da6:	4658      	mov	r0, fp
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	f7ff fa68 	bl	800427e <quorem>
 8004dae:	4603      	mov	r3, r0
 8004db0:	3330      	adds	r3, #48	; 0x30
 8004db2:	9004      	str	r0, [sp, #16]
 8004db4:	4641      	mov	r1, r8
 8004db6:	4658      	mov	r0, fp
 8004db8:	9308      	str	r3, [sp, #32]
 8004dba:	f000 fb63 	bl	8005484 <__mcmp>
 8004dbe:	463a      	mov	r2, r7
 8004dc0:	4681      	mov	r9, r0
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f000 fb79 	bl	80054bc <__mdiff>
 8004dca:	68c2      	ldr	r2, [r0, #12]
 8004dcc:	9b08      	ldr	r3, [sp, #32]
 8004dce:	4605      	mov	r5, r0
 8004dd0:	bb02      	cbnz	r2, 8004e14 <_dtoa_r+0xa7c>
 8004dd2:	4601      	mov	r1, r0
 8004dd4:	4658      	mov	r0, fp
 8004dd6:	f000 fb55 	bl	8005484 <__mcmp>
 8004dda:	9b08      	ldr	r3, [sp, #32]
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4629      	mov	r1, r5
 8004de0:	4620      	mov	r0, r4
 8004de2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004de6:	f000 f90f 	bl	8005008 <_Bfree>
 8004dea:	9b05      	ldr	r3, [sp, #20]
 8004dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dee:	9d01      	ldr	r5, [sp, #4]
 8004df0:	ea43 0102 	orr.w	r1, r3, r2
 8004df4:	9b06      	ldr	r3, [sp, #24]
 8004df6:	430b      	orrs	r3, r1
 8004df8:	9b08      	ldr	r3, [sp, #32]
 8004dfa:	d10d      	bne.n	8004e18 <_dtoa_r+0xa80>
 8004dfc:	2b39      	cmp	r3, #57	; 0x39
 8004dfe:	d029      	beq.n	8004e54 <_dtoa_r+0xabc>
 8004e00:	f1b9 0f00 	cmp.w	r9, #0
 8004e04:	dd01      	ble.n	8004e0a <_dtoa_r+0xa72>
 8004e06:	9b04      	ldr	r3, [sp, #16]
 8004e08:	3331      	adds	r3, #49	; 0x31
 8004e0a:	9a02      	ldr	r2, [sp, #8]
 8004e0c:	7013      	strb	r3, [r2, #0]
 8004e0e:	e774      	b.n	8004cfa <_dtoa_r+0x962>
 8004e10:	4638      	mov	r0, r7
 8004e12:	e7b9      	b.n	8004d88 <_dtoa_r+0x9f0>
 8004e14:	2201      	movs	r2, #1
 8004e16:	e7e2      	b.n	8004dde <_dtoa_r+0xa46>
 8004e18:	f1b9 0f00 	cmp.w	r9, #0
 8004e1c:	db06      	blt.n	8004e2c <_dtoa_r+0xa94>
 8004e1e:	9905      	ldr	r1, [sp, #20]
 8004e20:	ea41 0909 	orr.w	r9, r1, r9
 8004e24:	9906      	ldr	r1, [sp, #24]
 8004e26:	ea59 0101 	orrs.w	r1, r9, r1
 8004e2a:	d120      	bne.n	8004e6e <_dtoa_r+0xad6>
 8004e2c:	2a00      	cmp	r2, #0
 8004e2e:	ddec      	ble.n	8004e0a <_dtoa_r+0xa72>
 8004e30:	4659      	mov	r1, fp
 8004e32:	2201      	movs	r2, #1
 8004e34:	4620      	mov	r0, r4
 8004e36:	9301      	str	r3, [sp, #4]
 8004e38:	f000 fab8 	bl	80053ac <__lshift>
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	4683      	mov	fp, r0
 8004e40:	f000 fb20 	bl	8005484 <__mcmp>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	dc02      	bgt.n	8004e50 <_dtoa_r+0xab8>
 8004e4a:	d1de      	bne.n	8004e0a <_dtoa_r+0xa72>
 8004e4c:	07da      	lsls	r2, r3, #31
 8004e4e:	d5dc      	bpl.n	8004e0a <_dtoa_r+0xa72>
 8004e50:	2b39      	cmp	r3, #57	; 0x39
 8004e52:	d1d8      	bne.n	8004e06 <_dtoa_r+0xa6e>
 8004e54:	9a02      	ldr	r2, [sp, #8]
 8004e56:	2339      	movs	r3, #57	; 0x39
 8004e58:	7013      	strb	r3, [r2, #0]
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	461d      	mov	r5, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e64:	2a39      	cmp	r2, #57	; 0x39
 8004e66:	d050      	beq.n	8004f0a <_dtoa_r+0xb72>
 8004e68:	3201      	adds	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	e745      	b.n	8004cfa <_dtoa_r+0x962>
 8004e6e:	2a00      	cmp	r2, #0
 8004e70:	dd03      	ble.n	8004e7a <_dtoa_r+0xae2>
 8004e72:	2b39      	cmp	r3, #57	; 0x39
 8004e74:	d0ee      	beq.n	8004e54 <_dtoa_r+0xabc>
 8004e76:	3301      	adds	r3, #1
 8004e78:	e7c7      	b.n	8004e0a <_dtoa_r+0xa72>
 8004e7a:	9a01      	ldr	r2, [sp, #4]
 8004e7c:	9907      	ldr	r1, [sp, #28]
 8004e7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e82:	428a      	cmp	r2, r1
 8004e84:	d02a      	beq.n	8004edc <_dtoa_r+0xb44>
 8004e86:	4659      	mov	r1, fp
 8004e88:	2300      	movs	r3, #0
 8004e8a:	220a      	movs	r2, #10
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 f8dd 	bl	800504c <__multadd>
 8004e92:	45b8      	cmp	r8, r7
 8004e94:	4683      	mov	fp, r0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	f04f 020a 	mov.w	r2, #10
 8004e9e:	4641      	mov	r1, r8
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	d107      	bne.n	8004eb4 <_dtoa_r+0xb1c>
 8004ea4:	f000 f8d2 	bl	800504c <__multadd>
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	4607      	mov	r7, r0
 8004eac:	9b01      	ldr	r3, [sp, #4]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	e775      	b.n	8004da0 <_dtoa_r+0xa08>
 8004eb4:	f000 f8ca 	bl	800504c <__multadd>
 8004eb8:	4639      	mov	r1, r7
 8004eba:	4680      	mov	r8, r0
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	220a      	movs	r2, #10
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 f8c3 	bl	800504c <__multadd>
 8004ec6:	4607      	mov	r7, r0
 8004ec8:	e7f0      	b.n	8004eac <_dtoa_r+0xb14>
 8004eca:	f1b9 0f00 	cmp.w	r9, #0
 8004ece:	9a00      	ldr	r2, [sp, #0]
 8004ed0:	bfcc      	ite	gt
 8004ed2:	464d      	movgt	r5, r9
 8004ed4:	2501      	movle	r5, #1
 8004ed6:	4415      	add	r5, r2
 8004ed8:	f04f 0800 	mov.w	r8, #0
 8004edc:	4659      	mov	r1, fp
 8004ede:	2201      	movs	r2, #1
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	f000 fa62 	bl	80053ac <__lshift>
 8004ee8:	4631      	mov	r1, r6
 8004eea:	4683      	mov	fp, r0
 8004eec:	f000 faca 	bl	8005484 <__mcmp>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	dcb2      	bgt.n	8004e5a <_dtoa_r+0xac2>
 8004ef4:	d102      	bne.n	8004efc <_dtoa_r+0xb64>
 8004ef6:	9b01      	ldr	r3, [sp, #4]
 8004ef8:	07db      	lsls	r3, r3, #31
 8004efa:	d4ae      	bmi.n	8004e5a <_dtoa_r+0xac2>
 8004efc:	462b      	mov	r3, r5
 8004efe:	461d      	mov	r5, r3
 8004f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f04:	2a30      	cmp	r2, #48	; 0x30
 8004f06:	d0fa      	beq.n	8004efe <_dtoa_r+0xb66>
 8004f08:	e6f7      	b.n	8004cfa <_dtoa_r+0x962>
 8004f0a:	9a00      	ldr	r2, [sp, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d1a5      	bne.n	8004e5c <_dtoa_r+0xac4>
 8004f10:	f10a 0a01 	add.w	sl, sl, #1
 8004f14:	2331      	movs	r3, #49	; 0x31
 8004f16:	e779      	b.n	8004e0c <_dtoa_r+0xa74>
 8004f18:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <_dtoa_r+0xbd0>)
 8004f1a:	f7ff baaf 	b.w	800447c <_dtoa_r+0xe4>
 8004f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f47f aa86 	bne.w	8004432 <_dtoa_r+0x9a>
 8004f26:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <_dtoa_r+0xbd4>)
 8004f28:	f7ff baa8 	b.w	800447c <_dtoa_r+0xe4>
 8004f2c:	f1b9 0f00 	cmp.w	r9, #0
 8004f30:	dc03      	bgt.n	8004f3a <_dtoa_r+0xba2>
 8004f32:	9b05      	ldr	r3, [sp, #20]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	f73f aec9 	bgt.w	8004ccc <_dtoa_r+0x934>
 8004f3a:	9d00      	ldr	r5, [sp, #0]
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4658      	mov	r0, fp
 8004f40:	f7ff f99d 	bl	800427e <quorem>
 8004f44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004f48:	f805 3b01 	strb.w	r3, [r5], #1
 8004f4c:	9a00      	ldr	r2, [sp, #0]
 8004f4e:	1aaa      	subs	r2, r5, r2
 8004f50:	4591      	cmp	r9, r2
 8004f52:	ddba      	ble.n	8004eca <_dtoa_r+0xb32>
 8004f54:	4659      	mov	r1, fp
 8004f56:	2300      	movs	r3, #0
 8004f58:	220a      	movs	r2, #10
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f000 f876 	bl	800504c <__multadd>
 8004f60:	4683      	mov	fp, r0
 8004f62:	e7eb      	b.n	8004f3c <_dtoa_r+0xba4>
 8004f64:	08006913 	.word	0x08006913
 8004f68:	0800686c 	.word	0x0800686c
 8004f6c:	08006890 	.word	0x08006890

08004f70 <_localeconv_r>:
 8004f70:	4800      	ldr	r0, [pc, #0]	; (8004f74 <_localeconv_r+0x4>)
 8004f72:	4770      	bx	lr
 8004f74:	2000016c 	.word	0x2000016c

08004f78 <malloc>:
 8004f78:	4b02      	ldr	r3, [pc, #8]	; (8004f84 <malloc+0xc>)
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	f000 bbe1 	b.w	8005744 <_malloc_r>
 8004f82:	bf00      	nop
 8004f84:	20000018 	.word	0x20000018

08004f88 <_Balloc>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	460d      	mov	r5, r1
 8004f90:	b976      	cbnz	r6, 8004fb0 <_Balloc+0x28>
 8004f92:	2010      	movs	r0, #16
 8004f94:	f7ff fff0 	bl	8004f78 <malloc>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6260      	str	r0, [r4, #36]	; 0x24
 8004f9c:	b920      	cbnz	r0, 8004fa8 <_Balloc+0x20>
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <_Balloc+0x78>)
 8004fa0:	4818      	ldr	r0, [pc, #96]	; (8005004 <_Balloc+0x7c>)
 8004fa2:	2166      	movs	r1, #102	; 0x66
 8004fa4:	f000 fd94 	bl	8005ad0 <__assert_func>
 8004fa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fac:	6006      	str	r6, [r0, #0]
 8004fae:	60c6      	str	r6, [r0, #12]
 8004fb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004fb2:	68f3      	ldr	r3, [r6, #12]
 8004fb4:	b183      	cbz	r3, 8004fd8 <_Balloc+0x50>
 8004fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004fbe:	b9b8      	cbnz	r0, 8004ff0 <_Balloc+0x68>
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	fa01 f605 	lsl.w	r6, r1, r5
 8004fc6:	1d72      	adds	r2, r6, #5
 8004fc8:	0092      	lsls	r2, r2, #2
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f000 fb5a 	bl	8005684 <_calloc_r>
 8004fd0:	b160      	cbz	r0, 8004fec <_Balloc+0x64>
 8004fd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004fd6:	e00e      	b.n	8004ff6 <_Balloc+0x6e>
 8004fd8:	2221      	movs	r2, #33	; 0x21
 8004fda:	2104      	movs	r1, #4
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f000 fb51 	bl	8005684 <_calloc_r>
 8004fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fe4:	60f0      	str	r0, [r6, #12]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e4      	bne.n	8004fb6 <_Balloc+0x2e>
 8004fec:	2000      	movs	r0, #0
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	6802      	ldr	r2, [r0, #0]
 8004ff2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ffc:	e7f7      	b.n	8004fee <_Balloc+0x66>
 8004ffe:	bf00      	nop
 8005000:	0800689d 	.word	0x0800689d
 8005004:	08006924 	.word	0x08006924

08005008 <_Bfree>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800500c:	4605      	mov	r5, r0
 800500e:	460c      	mov	r4, r1
 8005010:	b976      	cbnz	r6, 8005030 <_Bfree+0x28>
 8005012:	2010      	movs	r0, #16
 8005014:	f7ff ffb0 	bl	8004f78 <malloc>
 8005018:	4602      	mov	r2, r0
 800501a:	6268      	str	r0, [r5, #36]	; 0x24
 800501c:	b920      	cbnz	r0, 8005028 <_Bfree+0x20>
 800501e:	4b09      	ldr	r3, [pc, #36]	; (8005044 <_Bfree+0x3c>)
 8005020:	4809      	ldr	r0, [pc, #36]	; (8005048 <_Bfree+0x40>)
 8005022:	218a      	movs	r1, #138	; 0x8a
 8005024:	f000 fd54 	bl	8005ad0 <__assert_func>
 8005028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800502c:	6006      	str	r6, [r0, #0]
 800502e:	60c6      	str	r6, [r0, #12]
 8005030:	b13c      	cbz	r4, 8005042 <_Bfree+0x3a>
 8005032:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005034:	6862      	ldr	r2, [r4, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800503c:	6021      	str	r1, [r4, #0]
 800503e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	0800689d 	.word	0x0800689d
 8005048:	08006924 	.word	0x08006924

0800504c <__multadd>:
 800504c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005050:	690e      	ldr	r6, [r1, #16]
 8005052:	4607      	mov	r7, r0
 8005054:	4698      	mov	r8, r3
 8005056:	460c      	mov	r4, r1
 8005058:	f101 0014 	add.w	r0, r1, #20
 800505c:	2300      	movs	r3, #0
 800505e:	6805      	ldr	r5, [r0, #0]
 8005060:	b2a9      	uxth	r1, r5
 8005062:	fb02 8101 	mla	r1, r2, r1, r8
 8005066:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800506a:	0c2d      	lsrs	r5, r5, #16
 800506c:	fb02 c505 	mla	r5, r2, r5, ip
 8005070:	b289      	uxth	r1, r1
 8005072:	3301      	adds	r3, #1
 8005074:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005078:	429e      	cmp	r6, r3
 800507a:	f840 1b04 	str.w	r1, [r0], #4
 800507e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005082:	dcec      	bgt.n	800505e <__multadd+0x12>
 8005084:	f1b8 0f00 	cmp.w	r8, #0
 8005088:	d022      	beq.n	80050d0 <__multadd+0x84>
 800508a:	68a3      	ldr	r3, [r4, #8]
 800508c:	42b3      	cmp	r3, r6
 800508e:	dc19      	bgt.n	80050c4 <__multadd+0x78>
 8005090:	6861      	ldr	r1, [r4, #4]
 8005092:	4638      	mov	r0, r7
 8005094:	3101      	adds	r1, #1
 8005096:	f7ff ff77 	bl	8004f88 <_Balloc>
 800509a:	4605      	mov	r5, r0
 800509c:	b928      	cbnz	r0, 80050aa <__multadd+0x5e>
 800509e:	4602      	mov	r2, r0
 80050a0:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <__multadd+0x8c>)
 80050a2:	480e      	ldr	r0, [pc, #56]	; (80050dc <__multadd+0x90>)
 80050a4:	21b5      	movs	r1, #181	; 0xb5
 80050a6:	f000 fd13 	bl	8005ad0 <__assert_func>
 80050aa:	6922      	ldr	r2, [r4, #16]
 80050ac:	3202      	adds	r2, #2
 80050ae:	f104 010c 	add.w	r1, r4, #12
 80050b2:	0092      	lsls	r2, r2, #2
 80050b4:	300c      	adds	r0, #12
 80050b6:	f7fe fc33 	bl	8003920 <memcpy>
 80050ba:	4621      	mov	r1, r4
 80050bc:	4638      	mov	r0, r7
 80050be:	f7ff ffa3 	bl	8005008 <_Bfree>
 80050c2:	462c      	mov	r4, r5
 80050c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80050c8:	3601      	adds	r6, #1
 80050ca:	f8c3 8014 	str.w	r8, [r3, #20]
 80050ce:	6126      	str	r6, [r4, #16]
 80050d0:	4620      	mov	r0, r4
 80050d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d6:	bf00      	nop
 80050d8:	08006913 	.word	0x08006913
 80050dc:	08006924 	.word	0x08006924

080050e0 <__hi0bits>:
 80050e0:	0c03      	lsrs	r3, r0, #16
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	b9d3      	cbnz	r3, 800511c <__hi0bits+0x3c>
 80050e6:	0400      	lsls	r0, r0, #16
 80050e8:	2310      	movs	r3, #16
 80050ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80050ee:	bf04      	itt	eq
 80050f0:	0200      	lsleq	r0, r0, #8
 80050f2:	3308      	addeq	r3, #8
 80050f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80050f8:	bf04      	itt	eq
 80050fa:	0100      	lsleq	r0, r0, #4
 80050fc:	3304      	addeq	r3, #4
 80050fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005102:	bf04      	itt	eq
 8005104:	0080      	lsleq	r0, r0, #2
 8005106:	3302      	addeq	r3, #2
 8005108:	2800      	cmp	r0, #0
 800510a:	db05      	blt.n	8005118 <__hi0bits+0x38>
 800510c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005110:	f103 0301 	add.w	r3, r3, #1
 8005114:	bf08      	it	eq
 8005116:	2320      	moveq	r3, #32
 8005118:	4618      	mov	r0, r3
 800511a:	4770      	bx	lr
 800511c:	2300      	movs	r3, #0
 800511e:	e7e4      	b.n	80050ea <__hi0bits+0xa>

08005120 <__lo0bits>:
 8005120:	6803      	ldr	r3, [r0, #0]
 8005122:	f013 0207 	ands.w	r2, r3, #7
 8005126:	4601      	mov	r1, r0
 8005128:	d00b      	beq.n	8005142 <__lo0bits+0x22>
 800512a:	07da      	lsls	r2, r3, #31
 800512c:	d424      	bmi.n	8005178 <__lo0bits+0x58>
 800512e:	0798      	lsls	r0, r3, #30
 8005130:	bf49      	itett	mi
 8005132:	085b      	lsrmi	r3, r3, #1
 8005134:	089b      	lsrpl	r3, r3, #2
 8005136:	2001      	movmi	r0, #1
 8005138:	600b      	strmi	r3, [r1, #0]
 800513a:	bf5c      	itt	pl
 800513c:	600b      	strpl	r3, [r1, #0]
 800513e:	2002      	movpl	r0, #2
 8005140:	4770      	bx	lr
 8005142:	b298      	uxth	r0, r3
 8005144:	b9b0      	cbnz	r0, 8005174 <__lo0bits+0x54>
 8005146:	0c1b      	lsrs	r3, r3, #16
 8005148:	2010      	movs	r0, #16
 800514a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800514e:	bf04      	itt	eq
 8005150:	0a1b      	lsreq	r3, r3, #8
 8005152:	3008      	addeq	r0, #8
 8005154:	071a      	lsls	r2, r3, #28
 8005156:	bf04      	itt	eq
 8005158:	091b      	lsreq	r3, r3, #4
 800515a:	3004      	addeq	r0, #4
 800515c:	079a      	lsls	r2, r3, #30
 800515e:	bf04      	itt	eq
 8005160:	089b      	lsreq	r3, r3, #2
 8005162:	3002      	addeq	r0, #2
 8005164:	07da      	lsls	r2, r3, #31
 8005166:	d403      	bmi.n	8005170 <__lo0bits+0x50>
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	f100 0001 	add.w	r0, r0, #1
 800516e:	d005      	beq.n	800517c <__lo0bits+0x5c>
 8005170:	600b      	str	r3, [r1, #0]
 8005172:	4770      	bx	lr
 8005174:	4610      	mov	r0, r2
 8005176:	e7e8      	b.n	800514a <__lo0bits+0x2a>
 8005178:	2000      	movs	r0, #0
 800517a:	4770      	bx	lr
 800517c:	2020      	movs	r0, #32
 800517e:	4770      	bx	lr

08005180 <__i2b>:
 8005180:	b510      	push	{r4, lr}
 8005182:	460c      	mov	r4, r1
 8005184:	2101      	movs	r1, #1
 8005186:	f7ff feff 	bl	8004f88 <_Balloc>
 800518a:	4602      	mov	r2, r0
 800518c:	b928      	cbnz	r0, 800519a <__i2b+0x1a>
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <__i2b+0x24>)
 8005190:	4805      	ldr	r0, [pc, #20]	; (80051a8 <__i2b+0x28>)
 8005192:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005196:	f000 fc9b 	bl	8005ad0 <__assert_func>
 800519a:	2301      	movs	r3, #1
 800519c:	6144      	str	r4, [r0, #20]
 800519e:	6103      	str	r3, [r0, #16]
 80051a0:	bd10      	pop	{r4, pc}
 80051a2:	bf00      	nop
 80051a4:	08006913 	.word	0x08006913
 80051a8:	08006924 	.word	0x08006924

080051ac <__multiply>:
 80051ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	4614      	mov	r4, r2
 80051b2:	690a      	ldr	r2, [r1, #16]
 80051b4:	6923      	ldr	r3, [r4, #16]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	bfb8      	it	lt
 80051ba:	460b      	movlt	r3, r1
 80051bc:	460d      	mov	r5, r1
 80051be:	bfbc      	itt	lt
 80051c0:	4625      	movlt	r5, r4
 80051c2:	461c      	movlt	r4, r3
 80051c4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80051c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80051cc:	68ab      	ldr	r3, [r5, #8]
 80051ce:	6869      	ldr	r1, [r5, #4]
 80051d0:	eb0a 0709 	add.w	r7, sl, r9
 80051d4:	42bb      	cmp	r3, r7
 80051d6:	b085      	sub	sp, #20
 80051d8:	bfb8      	it	lt
 80051da:	3101      	addlt	r1, #1
 80051dc:	f7ff fed4 	bl	8004f88 <_Balloc>
 80051e0:	b930      	cbnz	r0, 80051f0 <__multiply+0x44>
 80051e2:	4602      	mov	r2, r0
 80051e4:	4b42      	ldr	r3, [pc, #264]	; (80052f0 <__multiply+0x144>)
 80051e6:	4843      	ldr	r0, [pc, #268]	; (80052f4 <__multiply+0x148>)
 80051e8:	f240 115d 	movw	r1, #349	; 0x15d
 80051ec:	f000 fc70 	bl	8005ad0 <__assert_func>
 80051f0:	f100 0614 	add.w	r6, r0, #20
 80051f4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80051f8:	4633      	mov	r3, r6
 80051fa:	2200      	movs	r2, #0
 80051fc:	4543      	cmp	r3, r8
 80051fe:	d31e      	bcc.n	800523e <__multiply+0x92>
 8005200:	f105 0c14 	add.w	ip, r5, #20
 8005204:	f104 0314 	add.w	r3, r4, #20
 8005208:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800520c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005210:	9202      	str	r2, [sp, #8]
 8005212:	ebac 0205 	sub.w	r2, ip, r5
 8005216:	3a15      	subs	r2, #21
 8005218:	f022 0203 	bic.w	r2, r2, #3
 800521c:	3204      	adds	r2, #4
 800521e:	f105 0115 	add.w	r1, r5, #21
 8005222:	458c      	cmp	ip, r1
 8005224:	bf38      	it	cc
 8005226:	2204      	movcc	r2, #4
 8005228:	9201      	str	r2, [sp, #4]
 800522a:	9a02      	ldr	r2, [sp, #8]
 800522c:	9303      	str	r3, [sp, #12]
 800522e:	429a      	cmp	r2, r3
 8005230:	d808      	bhi.n	8005244 <__multiply+0x98>
 8005232:	2f00      	cmp	r7, #0
 8005234:	dc55      	bgt.n	80052e2 <__multiply+0x136>
 8005236:	6107      	str	r7, [r0, #16]
 8005238:	b005      	add	sp, #20
 800523a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800523e:	f843 2b04 	str.w	r2, [r3], #4
 8005242:	e7db      	b.n	80051fc <__multiply+0x50>
 8005244:	f8b3 a000 	ldrh.w	sl, [r3]
 8005248:	f1ba 0f00 	cmp.w	sl, #0
 800524c:	d020      	beq.n	8005290 <__multiply+0xe4>
 800524e:	f105 0e14 	add.w	lr, r5, #20
 8005252:	46b1      	mov	r9, r6
 8005254:	2200      	movs	r2, #0
 8005256:	f85e 4b04 	ldr.w	r4, [lr], #4
 800525a:	f8d9 b000 	ldr.w	fp, [r9]
 800525e:	b2a1      	uxth	r1, r4
 8005260:	fa1f fb8b 	uxth.w	fp, fp
 8005264:	fb0a b101 	mla	r1, sl, r1, fp
 8005268:	4411      	add	r1, r2
 800526a:	f8d9 2000 	ldr.w	r2, [r9]
 800526e:	0c24      	lsrs	r4, r4, #16
 8005270:	0c12      	lsrs	r2, r2, #16
 8005272:	fb0a 2404 	mla	r4, sl, r4, r2
 8005276:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800527a:	b289      	uxth	r1, r1
 800527c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005280:	45f4      	cmp	ip, lr
 8005282:	f849 1b04 	str.w	r1, [r9], #4
 8005286:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800528a:	d8e4      	bhi.n	8005256 <__multiply+0xaa>
 800528c:	9901      	ldr	r1, [sp, #4]
 800528e:	5072      	str	r2, [r6, r1]
 8005290:	9a03      	ldr	r2, [sp, #12]
 8005292:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005296:	3304      	adds	r3, #4
 8005298:	f1b9 0f00 	cmp.w	r9, #0
 800529c:	d01f      	beq.n	80052de <__multiply+0x132>
 800529e:	6834      	ldr	r4, [r6, #0]
 80052a0:	f105 0114 	add.w	r1, r5, #20
 80052a4:	46b6      	mov	lr, r6
 80052a6:	f04f 0a00 	mov.w	sl, #0
 80052aa:	880a      	ldrh	r2, [r1, #0]
 80052ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 80052b0:	fb09 b202 	mla	r2, r9, r2, fp
 80052b4:	4492      	add	sl, r2
 80052b6:	b2a4      	uxth	r4, r4
 80052b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80052bc:	f84e 4b04 	str.w	r4, [lr], #4
 80052c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80052c4:	f8be 2000 	ldrh.w	r2, [lr]
 80052c8:	0c24      	lsrs	r4, r4, #16
 80052ca:	fb09 2404 	mla	r4, r9, r4, r2
 80052ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80052d2:	458c      	cmp	ip, r1
 80052d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80052d8:	d8e7      	bhi.n	80052aa <__multiply+0xfe>
 80052da:	9a01      	ldr	r2, [sp, #4]
 80052dc:	50b4      	str	r4, [r6, r2]
 80052de:	3604      	adds	r6, #4
 80052e0:	e7a3      	b.n	800522a <__multiply+0x7e>
 80052e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1a5      	bne.n	8005236 <__multiply+0x8a>
 80052ea:	3f01      	subs	r7, #1
 80052ec:	e7a1      	b.n	8005232 <__multiply+0x86>
 80052ee:	bf00      	nop
 80052f0:	08006913 	.word	0x08006913
 80052f4:	08006924 	.word	0x08006924

080052f8 <__pow5mult>:
 80052f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	4615      	mov	r5, r2
 80052fe:	f012 0203 	ands.w	r2, r2, #3
 8005302:	4606      	mov	r6, r0
 8005304:	460f      	mov	r7, r1
 8005306:	d007      	beq.n	8005318 <__pow5mult+0x20>
 8005308:	4c25      	ldr	r4, [pc, #148]	; (80053a0 <__pow5mult+0xa8>)
 800530a:	3a01      	subs	r2, #1
 800530c:	2300      	movs	r3, #0
 800530e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005312:	f7ff fe9b 	bl	800504c <__multadd>
 8005316:	4607      	mov	r7, r0
 8005318:	10ad      	asrs	r5, r5, #2
 800531a:	d03d      	beq.n	8005398 <__pow5mult+0xa0>
 800531c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800531e:	b97c      	cbnz	r4, 8005340 <__pow5mult+0x48>
 8005320:	2010      	movs	r0, #16
 8005322:	f7ff fe29 	bl	8004f78 <malloc>
 8005326:	4602      	mov	r2, r0
 8005328:	6270      	str	r0, [r6, #36]	; 0x24
 800532a:	b928      	cbnz	r0, 8005338 <__pow5mult+0x40>
 800532c:	4b1d      	ldr	r3, [pc, #116]	; (80053a4 <__pow5mult+0xac>)
 800532e:	481e      	ldr	r0, [pc, #120]	; (80053a8 <__pow5mult+0xb0>)
 8005330:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005334:	f000 fbcc 	bl	8005ad0 <__assert_func>
 8005338:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800533c:	6004      	str	r4, [r0, #0]
 800533e:	60c4      	str	r4, [r0, #12]
 8005340:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005344:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005348:	b94c      	cbnz	r4, 800535e <__pow5mult+0x66>
 800534a:	f240 2171 	movw	r1, #625	; 0x271
 800534e:	4630      	mov	r0, r6
 8005350:	f7ff ff16 	bl	8005180 <__i2b>
 8005354:	2300      	movs	r3, #0
 8005356:	f8c8 0008 	str.w	r0, [r8, #8]
 800535a:	4604      	mov	r4, r0
 800535c:	6003      	str	r3, [r0, #0]
 800535e:	f04f 0900 	mov.w	r9, #0
 8005362:	07eb      	lsls	r3, r5, #31
 8005364:	d50a      	bpl.n	800537c <__pow5mult+0x84>
 8005366:	4639      	mov	r1, r7
 8005368:	4622      	mov	r2, r4
 800536a:	4630      	mov	r0, r6
 800536c:	f7ff ff1e 	bl	80051ac <__multiply>
 8005370:	4639      	mov	r1, r7
 8005372:	4680      	mov	r8, r0
 8005374:	4630      	mov	r0, r6
 8005376:	f7ff fe47 	bl	8005008 <_Bfree>
 800537a:	4647      	mov	r7, r8
 800537c:	106d      	asrs	r5, r5, #1
 800537e:	d00b      	beq.n	8005398 <__pow5mult+0xa0>
 8005380:	6820      	ldr	r0, [r4, #0]
 8005382:	b938      	cbnz	r0, 8005394 <__pow5mult+0x9c>
 8005384:	4622      	mov	r2, r4
 8005386:	4621      	mov	r1, r4
 8005388:	4630      	mov	r0, r6
 800538a:	f7ff ff0f 	bl	80051ac <__multiply>
 800538e:	6020      	str	r0, [r4, #0]
 8005390:	f8c0 9000 	str.w	r9, [r0]
 8005394:	4604      	mov	r4, r0
 8005396:	e7e4      	b.n	8005362 <__pow5mult+0x6a>
 8005398:	4638      	mov	r0, r7
 800539a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800539e:	bf00      	nop
 80053a0:	08006a78 	.word	0x08006a78
 80053a4:	0800689d 	.word	0x0800689d
 80053a8:	08006924 	.word	0x08006924

080053ac <__lshift>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	460c      	mov	r4, r1
 80053b2:	6849      	ldr	r1, [r1, #4]
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80053ba:	68a3      	ldr	r3, [r4, #8]
 80053bc:	4607      	mov	r7, r0
 80053be:	4691      	mov	r9, r2
 80053c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053c4:	f108 0601 	add.w	r6, r8, #1
 80053c8:	42b3      	cmp	r3, r6
 80053ca:	db0b      	blt.n	80053e4 <__lshift+0x38>
 80053cc:	4638      	mov	r0, r7
 80053ce:	f7ff fddb 	bl	8004f88 <_Balloc>
 80053d2:	4605      	mov	r5, r0
 80053d4:	b948      	cbnz	r0, 80053ea <__lshift+0x3e>
 80053d6:	4602      	mov	r2, r0
 80053d8:	4b28      	ldr	r3, [pc, #160]	; (800547c <__lshift+0xd0>)
 80053da:	4829      	ldr	r0, [pc, #164]	; (8005480 <__lshift+0xd4>)
 80053dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80053e0:	f000 fb76 	bl	8005ad0 <__assert_func>
 80053e4:	3101      	adds	r1, #1
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	e7ee      	b.n	80053c8 <__lshift+0x1c>
 80053ea:	2300      	movs	r3, #0
 80053ec:	f100 0114 	add.w	r1, r0, #20
 80053f0:	f100 0210 	add.w	r2, r0, #16
 80053f4:	4618      	mov	r0, r3
 80053f6:	4553      	cmp	r3, sl
 80053f8:	db33      	blt.n	8005462 <__lshift+0xb6>
 80053fa:	6920      	ldr	r0, [r4, #16]
 80053fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005400:	f104 0314 	add.w	r3, r4, #20
 8005404:	f019 091f 	ands.w	r9, r9, #31
 8005408:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800540c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005410:	d02b      	beq.n	800546a <__lshift+0xbe>
 8005412:	f1c9 0e20 	rsb	lr, r9, #32
 8005416:	468a      	mov	sl, r1
 8005418:	2200      	movs	r2, #0
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	fa00 f009 	lsl.w	r0, r0, r9
 8005420:	4302      	orrs	r2, r0
 8005422:	f84a 2b04 	str.w	r2, [sl], #4
 8005426:	f853 2b04 	ldr.w	r2, [r3], #4
 800542a:	459c      	cmp	ip, r3
 800542c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005430:	d8f3      	bhi.n	800541a <__lshift+0x6e>
 8005432:	ebac 0304 	sub.w	r3, ip, r4
 8005436:	3b15      	subs	r3, #21
 8005438:	f023 0303 	bic.w	r3, r3, #3
 800543c:	3304      	adds	r3, #4
 800543e:	f104 0015 	add.w	r0, r4, #21
 8005442:	4584      	cmp	ip, r0
 8005444:	bf38      	it	cc
 8005446:	2304      	movcc	r3, #4
 8005448:	50ca      	str	r2, [r1, r3]
 800544a:	b10a      	cbz	r2, 8005450 <__lshift+0xa4>
 800544c:	f108 0602 	add.w	r6, r8, #2
 8005450:	3e01      	subs	r6, #1
 8005452:	4638      	mov	r0, r7
 8005454:	612e      	str	r6, [r5, #16]
 8005456:	4621      	mov	r1, r4
 8005458:	f7ff fdd6 	bl	8005008 <_Bfree>
 800545c:	4628      	mov	r0, r5
 800545e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005462:	f842 0f04 	str.w	r0, [r2, #4]!
 8005466:	3301      	adds	r3, #1
 8005468:	e7c5      	b.n	80053f6 <__lshift+0x4a>
 800546a:	3904      	subs	r1, #4
 800546c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005470:	f841 2f04 	str.w	r2, [r1, #4]!
 8005474:	459c      	cmp	ip, r3
 8005476:	d8f9      	bhi.n	800546c <__lshift+0xc0>
 8005478:	e7ea      	b.n	8005450 <__lshift+0xa4>
 800547a:	bf00      	nop
 800547c:	08006913 	.word	0x08006913
 8005480:	08006924 	.word	0x08006924

08005484 <__mcmp>:
 8005484:	b530      	push	{r4, r5, lr}
 8005486:	6902      	ldr	r2, [r0, #16]
 8005488:	690c      	ldr	r4, [r1, #16]
 800548a:	1b12      	subs	r2, r2, r4
 800548c:	d10e      	bne.n	80054ac <__mcmp+0x28>
 800548e:	f100 0314 	add.w	r3, r0, #20
 8005492:	3114      	adds	r1, #20
 8005494:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005498:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800549c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80054a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80054a4:	42a5      	cmp	r5, r4
 80054a6:	d003      	beq.n	80054b0 <__mcmp+0x2c>
 80054a8:	d305      	bcc.n	80054b6 <__mcmp+0x32>
 80054aa:	2201      	movs	r2, #1
 80054ac:	4610      	mov	r0, r2
 80054ae:	bd30      	pop	{r4, r5, pc}
 80054b0:	4283      	cmp	r3, r0
 80054b2:	d3f3      	bcc.n	800549c <__mcmp+0x18>
 80054b4:	e7fa      	b.n	80054ac <__mcmp+0x28>
 80054b6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ba:	e7f7      	b.n	80054ac <__mcmp+0x28>

080054bc <__mdiff>:
 80054bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	460c      	mov	r4, r1
 80054c2:	4606      	mov	r6, r0
 80054c4:	4611      	mov	r1, r2
 80054c6:	4620      	mov	r0, r4
 80054c8:	4617      	mov	r7, r2
 80054ca:	f7ff ffdb 	bl	8005484 <__mcmp>
 80054ce:	1e05      	subs	r5, r0, #0
 80054d0:	d110      	bne.n	80054f4 <__mdiff+0x38>
 80054d2:	4629      	mov	r1, r5
 80054d4:	4630      	mov	r0, r6
 80054d6:	f7ff fd57 	bl	8004f88 <_Balloc>
 80054da:	b930      	cbnz	r0, 80054ea <__mdiff+0x2e>
 80054dc:	4b39      	ldr	r3, [pc, #228]	; (80055c4 <__mdiff+0x108>)
 80054de:	4602      	mov	r2, r0
 80054e0:	f240 2132 	movw	r1, #562	; 0x232
 80054e4:	4838      	ldr	r0, [pc, #224]	; (80055c8 <__mdiff+0x10c>)
 80054e6:	f000 faf3 	bl	8005ad0 <__assert_func>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80054f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f4:	bfa4      	itt	ge
 80054f6:	463b      	movge	r3, r7
 80054f8:	4627      	movge	r7, r4
 80054fa:	4630      	mov	r0, r6
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	bfa6      	itte	ge
 8005500:	461c      	movge	r4, r3
 8005502:	2500      	movge	r5, #0
 8005504:	2501      	movlt	r5, #1
 8005506:	f7ff fd3f 	bl	8004f88 <_Balloc>
 800550a:	b920      	cbnz	r0, 8005516 <__mdiff+0x5a>
 800550c:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <__mdiff+0x108>)
 800550e:	4602      	mov	r2, r0
 8005510:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005514:	e7e6      	b.n	80054e4 <__mdiff+0x28>
 8005516:	693e      	ldr	r6, [r7, #16]
 8005518:	60c5      	str	r5, [r0, #12]
 800551a:	6925      	ldr	r5, [r4, #16]
 800551c:	f107 0114 	add.w	r1, r7, #20
 8005520:	f104 0914 	add.w	r9, r4, #20
 8005524:	f100 0e14 	add.w	lr, r0, #20
 8005528:	f107 0210 	add.w	r2, r7, #16
 800552c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005530:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005534:	46f2      	mov	sl, lr
 8005536:	2700      	movs	r7, #0
 8005538:	f859 3b04 	ldr.w	r3, [r9], #4
 800553c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005540:	fa1f f883 	uxth.w	r8, r3
 8005544:	fa17 f78b 	uxtah	r7, r7, fp
 8005548:	0c1b      	lsrs	r3, r3, #16
 800554a:	eba7 0808 	sub.w	r8, r7, r8
 800554e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005552:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005556:	fa1f f888 	uxth.w	r8, r8
 800555a:	141f      	asrs	r7, r3, #16
 800555c:	454d      	cmp	r5, r9
 800555e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005562:	f84a 3b04 	str.w	r3, [sl], #4
 8005566:	d8e7      	bhi.n	8005538 <__mdiff+0x7c>
 8005568:	1b2b      	subs	r3, r5, r4
 800556a:	3b15      	subs	r3, #21
 800556c:	f023 0303 	bic.w	r3, r3, #3
 8005570:	3304      	adds	r3, #4
 8005572:	3415      	adds	r4, #21
 8005574:	42a5      	cmp	r5, r4
 8005576:	bf38      	it	cc
 8005578:	2304      	movcc	r3, #4
 800557a:	4419      	add	r1, r3
 800557c:	4473      	add	r3, lr
 800557e:	469e      	mov	lr, r3
 8005580:	460d      	mov	r5, r1
 8005582:	4565      	cmp	r5, ip
 8005584:	d30e      	bcc.n	80055a4 <__mdiff+0xe8>
 8005586:	f10c 0203 	add.w	r2, ip, #3
 800558a:	1a52      	subs	r2, r2, r1
 800558c:	f022 0203 	bic.w	r2, r2, #3
 8005590:	3903      	subs	r1, #3
 8005592:	458c      	cmp	ip, r1
 8005594:	bf38      	it	cc
 8005596:	2200      	movcc	r2, #0
 8005598:	441a      	add	r2, r3
 800559a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800559e:	b17b      	cbz	r3, 80055c0 <__mdiff+0x104>
 80055a0:	6106      	str	r6, [r0, #16]
 80055a2:	e7a5      	b.n	80054f0 <__mdiff+0x34>
 80055a4:	f855 8b04 	ldr.w	r8, [r5], #4
 80055a8:	fa17 f488 	uxtah	r4, r7, r8
 80055ac:	1422      	asrs	r2, r4, #16
 80055ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80055b2:	b2a4      	uxth	r4, r4
 80055b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80055b8:	f84e 4b04 	str.w	r4, [lr], #4
 80055bc:	1417      	asrs	r7, r2, #16
 80055be:	e7e0      	b.n	8005582 <__mdiff+0xc6>
 80055c0:	3e01      	subs	r6, #1
 80055c2:	e7ea      	b.n	800559a <__mdiff+0xde>
 80055c4:	08006913 	.word	0x08006913
 80055c8:	08006924 	.word	0x08006924

080055cc <__d2b>:
 80055cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055d0:	4689      	mov	r9, r1
 80055d2:	2101      	movs	r1, #1
 80055d4:	ec57 6b10 	vmov	r6, r7, d0
 80055d8:	4690      	mov	r8, r2
 80055da:	f7ff fcd5 	bl	8004f88 <_Balloc>
 80055de:	4604      	mov	r4, r0
 80055e0:	b930      	cbnz	r0, 80055f0 <__d2b+0x24>
 80055e2:	4602      	mov	r2, r0
 80055e4:	4b25      	ldr	r3, [pc, #148]	; (800567c <__d2b+0xb0>)
 80055e6:	4826      	ldr	r0, [pc, #152]	; (8005680 <__d2b+0xb4>)
 80055e8:	f240 310a 	movw	r1, #778	; 0x30a
 80055ec:	f000 fa70 	bl	8005ad0 <__assert_func>
 80055f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80055f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80055f8:	bb35      	cbnz	r5, 8005648 <__d2b+0x7c>
 80055fa:	2e00      	cmp	r6, #0
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	d028      	beq.n	8005652 <__d2b+0x86>
 8005600:	4668      	mov	r0, sp
 8005602:	9600      	str	r6, [sp, #0]
 8005604:	f7ff fd8c 	bl	8005120 <__lo0bits>
 8005608:	9900      	ldr	r1, [sp, #0]
 800560a:	b300      	cbz	r0, 800564e <__d2b+0x82>
 800560c:	9a01      	ldr	r2, [sp, #4]
 800560e:	f1c0 0320 	rsb	r3, r0, #32
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	430b      	orrs	r3, r1
 8005618:	40c2      	lsrs	r2, r0
 800561a:	6163      	str	r3, [r4, #20]
 800561c:	9201      	str	r2, [sp, #4]
 800561e:	9b01      	ldr	r3, [sp, #4]
 8005620:	61a3      	str	r3, [r4, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2202      	movne	r2, #2
 8005628:	2201      	moveq	r2, #1
 800562a:	6122      	str	r2, [r4, #16]
 800562c:	b1d5      	cbz	r5, 8005664 <__d2b+0x98>
 800562e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005632:	4405      	add	r5, r0
 8005634:	f8c9 5000 	str.w	r5, [r9]
 8005638:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800563c:	f8c8 0000 	str.w	r0, [r8]
 8005640:	4620      	mov	r0, r4
 8005642:	b003      	add	sp, #12
 8005644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800564c:	e7d5      	b.n	80055fa <__d2b+0x2e>
 800564e:	6161      	str	r1, [r4, #20]
 8005650:	e7e5      	b.n	800561e <__d2b+0x52>
 8005652:	a801      	add	r0, sp, #4
 8005654:	f7ff fd64 	bl	8005120 <__lo0bits>
 8005658:	9b01      	ldr	r3, [sp, #4]
 800565a:	6163      	str	r3, [r4, #20]
 800565c:	2201      	movs	r2, #1
 800565e:	6122      	str	r2, [r4, #16]
 8005660:	3020      	adds	r0, #32
 8005662:	e7e3      	b.n	800562c <__d2b+0x60>
 8005664:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005668:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800566c:	f8c9 0000 	str.w	r0, [r9]
 8005670:	6918      	ldr	r0, [r3, #16]
 8005672:	f7ff fd35 	bl	80050e0 <__hi0bits>
 8005676:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800567a:	e7df      	b.n	800563c <__d2b+0x70>
 800567c:	08006913 	.word	0x08006913
 8005680:	08006924 	.word	0x08006924

08005684 <_calloc_r>:
 8005684:	b513      	push	{r0, r1, r4, lr}
 8005686:	434a      	muls	r2, r1
 8005688:	4611      	mov	r1, r2
 800568a:	9201      	str	r2, [sp, #4]
 800568c:	f000 f85a 	bl	8005744 <_malloc_r>
 8005690:	4604      	mov	r4, r0
 8005692:	b118      	cbz	r0, 800569c <_calloc_r+0x18>
 8005694:	9a01      	ldr	r2, [sp, #4]
 8005696:	2100      	movs	r1, #0
 8005698:	f7fe f950 	bl	800393c <memset>
 800569c:	4620      	mov	r0, r4
 800569e:	b002      	add	sp, #8
 80056a0:	bd10      	pop	{r4, pc}
	...

080056a4 <_free_r>:
 80056a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056a6:	2900      	cmp	r1, #0
 80056a8:	d048      	beq.n	800573c <_free_r+0x98>
 80056aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ae:	9001      	str	r0, [sp, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f1a1 0404 	sub.w	r4, r1, #4
 80056b6:	bfb8      	it	lt
 80056b8:	18e4      	addlt	r4, r4, r3
 80056ba:	f000 fa65 	bl	8005b88 <__malloc_lock>
 80056be:	4a20      	ldr	r2, [pc, #128]	; (8005740 <_free_r+0x9c>)
 80056c0:	9801      	ldr	r0, [sp, #4]
 80056c2:	6813      	ldr	r3, [r2, #0]
 80056c4:	4615      	mov	r5, r2
 80056c6:	b933      	cbnz	r3, 80056d6 <_free_r+0x32>
 80056c8:	6063      	str	r3, [r4, #4]
 80056ca:	6014      	str	r4, [r2, #0]
 80056cc:	b003      	add	sp, #12
 80056ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056d2:	f000 ba5f 	b.w	8005b94 <__malloc_unlock>
 80056d6:	42a3      	cmp	r3, r4
 80056d8:	d90b      	bls.n	80056f2 <_free_r+0x4e>
 80056da:	6821      	ldr	r1, [r4, #0]
 80056dc:	1862      	adds	r2, r4, r1
 80056de:	4293      	cmp	r3, r2
 80056e0:	bf04      	itt	eq
 80056e2:	681a      	ldreq	r2, [r3, #0]
 80056e4:	685b      	ldreq	r3, [r3, #4]
 80056e6:	6063      	str	r3, [r4, #4]
 80056e8:	bf04      	itt	eq
 80056ea:	1852      	addeq	r2, r2, r1
 80056ec:	6022      	streq	r2, [r4, #0]
 80056ee:	602c      	str	r4, [r5, #0]
 80056f0:	e7ec      	b.n	80056cc <_free_r+0x28>
 80056f2:	461a      	mov	r2, r3
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	b10b      	cbz	r3, 80056fc <_free_r+0x58>
 80056f8:	42a3      	cmp	r3, r4
 80056fa:	d9fa      	bls.n	80056f2 <_free_r+0x4e>
 80056fc:	6811      	ldr	r1, [r2, #0]
 80056fe:	1855      	adds	r5, r2, r1
 8005700:	42a5      	cmp	r5, r4
 8005702:	d10b      	bne.n	800571c <_free_r+0x78>
 8005704:	6824      	ldr	r4, [r4, #0]
 8005706:	4421      	add	r1, r4
 8005708:	1854      	adds	r4, r2, r1
 800570a:	42a3      	cmp	r3, r4
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	d1dd      	bne.n	80056cc <_free_r+0x28>
 8005710:	681c      	ldr	r4, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	6053      	str	r3, [r2, #4]
 8005716:	4421      	add	r1, r4
 8005718:	6011      	str	r1, [r2, #0]
 800571a:	e7d7      	b.n	80056cc <_free_r+0x28>
 800571c:	d902      	bls.n	8005724 <_free_r+0x80>
 800571e:	230c      	movs	r3, #12
 8005720:	6003      	str	r3, [r0, #0]
 8005722:	e7d3      	b.n	80056cc <_free_r+0x28>
 8005724:	6825      	ldr	r5, [r4, #0]
 8005726:	1961      	adds	r1, r4, r5
 8005728:	428b      	cmp	r3, r1
 800572a:	bf04      	itt	eq
 800572c:	6819      	ldreq	r1, [r3, #0]
 800572e:	685b      	ldreq	r3, [r3, #4]
 8005730:	6063      	str	r3, [r4, #4]
 8005732:	bf04      	itt	eq
 8005734:	1949      	addeq	r1, r1, r5
 8005736:	6021      	streq	r1, [r4, #0]
 8005738:	6054      	str	r4, [r2, #4]
 800573a:	e7c7      	b.n	80056cc <_free_r+0x28>
 800573c:	b003      	add	sp, #12
 800573e:	bd30      	pop	{r4, r5, pc}
 8005740:	2000022c 	.word	0x2000022c

08005744 <_malloc_r>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	1ccd      	adds	r5, r1, #3
 8005748:	f025 0503 	bic.w	r5, r5, #3
 800574c:	3508      	adds	r5, #8
 800574e:	2d0c      	cmp	r5, #12
 8005750:	bf38      	it	cc
 8005752:	250c      	movcc	r5, #12
 8005754:	2d00      	cmp	r5, #0
 8005756:	4606      	mov	r6, r0
 8005758:	db01      	blt.n	800575e <_malloc_r+0x1a>
 800575a:	42a9      	cmp	r1, r5
 800575c:	d903      	bls.n	8005766 <_malloc_r+0x22>
 800575e:	230c      	movs	r3, #12
 8005760:	6033      	str	r3, [r6, #0]
 8005762:	2000      	movs	r0, #0
 8005764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005766:	f000 fa0f 	bl	8005b88 <__malloc_lock>
 800576a:	4921      	ldr	r1, [pc, #132]	; (80057f0 <_malloc_r+0xac>)
 800576c:	680a      	ldr	r2, [r1, #0]
 800576e:	4614      	mov	r4, r2
 8005770:	b99c      	cbnz	r4, 800579a <_malloc_r+0x56>
 8005772:	4f20      	ldr	r7, [pc, #128]	; (80057f4 <_malloc_r+0xb0>)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	b923      	cbnz	r3, 8005782 <_malloc_r+0x3e>
 8005778:	4621      	mov	r1, r4
 800577a:	4630      	mov	r0, r6
 800577c:	f000 f998 	bl	8005ab0 <_sbrk_r>
 8005780:	6038      	str	r0, [r7, #0]
 8005782:	4629      	mov	r1, r5
 8005784:	4630      	mov	r0, r6
 8005786:	f000 f993 	bl	8005ab0 <_sbrk_r>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	d123      	bne.n	80057d6 <_malloc_r+0x92>
 800578e:	230c      	movs	r3, #12
 8005790:	6033      	str	r3, [r6, #0]
 8005792:	4630      	mov	r0, r6
 8005794:	f000 f9fe 	bl	8005b94 <__malloc_unlock>
 8005798:	e7e3      	b.n	8005762 <_malloc_r+0x1e>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	1b5b      	subs	r3, r3, r5
 800579e:	d417      	bmi.n	80057d0 <_malloc_r+0x8c>
 80057a0:	2b0b      	cmp	r3, #11
 80057a2:	d903      	bls.n	80057ac <_malloc_r+0x68>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	441c      	add	r4, r3
 80057a8:	6025      	str	r5, [r4, #0]
 80057aa:	e004      	b.n	80057b6 <_malloc_r+0x72>
 80057ac:	6863      	ldr	r3, [r4, #4]
 80057ae:	42a2      	cmp	r2, r4
 80057b0:	bf0c      	ite	eq
 80057b2:	600b      	streq	r3, [r1, #0]
 80057b4:	6053      	strne	r3, [r2, #4]
 80057b6:	4630      	mov	r0, r6
 80057b8:	f000 f9ec 	bl	8005b94 <__malloc_unlock>
 80057bc:	f104 000b 	add.w	r0, r4, #11
 80057c0:	1d23      	adds	r3, r4, #4
 80057c2:	f020 0007 	bic.w	r0, r0, #7
 80057c6:	1ac2      	subs	r2, r0, r3
 80057c8:	d0cc      	beq.n	8005764 <_malloc_r+0x20>
 80057ca:	1a1b      	subs	r3, r3, r0
 80057cc:	50a3      	str	r3, [r4, r2]
 80057ce:	e7c9      	b.n	8005764 <_malloc_r+0x20>
 80057d0:	4622      	mov	r2, r4
 80057d2:	6864      	ldr	r4, [r4, #4]
 80057d4:	e7cc      	b.n	8005770 <_malloc_r+0x2c>
 80057d6:	1cc4      	adds	r4, r0, #3
 80057d8:	f024 0403 	bic.w	r4, r4, #3
 80057dc:	42a0      	cmp	r0, r4
 80057de:	d0e3      	beq.n	80057a8 <_malloc_r+0x64>
 80057e0:	1a21      	subs	r1, r4, r0
 80057e2:	4630      	mov	r0, r6
 80057e4:	f000 f964 	bl	8005ab0 <_sbrk_r>
 80057e8:	3001      	adds	r0, #1
 80057ea:	d1dd      	bne.n	80057a8 <_malloc_r+0x64>
 80057ec:	e7cf      	b.n	800578e <_malloc_r+0x4a>
 80057ee:	bf00      	nop
 80057f0:	2000022c 	.word	0x2000022c
 80057f4:	20000230 	.word	0x20000230

080057f8 <__ssputs_r>:
 80057f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057fc:	688e      	ldr	r6, [r1, #8]
 80057fe:	429e      	cmp	r6, r3
 8005800:	4682      	mov	sl, r0
 8005802:	460c      	mov	r4, r1
 8005804:	4690      	mov	r8, r2
 8005806:	461f      	mov	r7, r3
 8005808:	d838      	bhi.n	800587c <__ssputs_r+0x84>
 800580a:	898a      	ldrh	r2, [r1, #12]
 800580c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005810:	d032      	beq.n	8005878 <__ssputs_r+0x80>
 8005812:	6825      	ldr	r5, [r4, #0]
 8005814:	6909      	ldr	r1, [r1, #16]
 8005816:	eba5 0901 	sub.w	r9, r5, r1
 800581a:	6965      	ldr	r5, [r4, #20]
 800581c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005820:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005824:	3301      	adds	r3, #1
 8005826:	444b      	add	r3, r9
 8005828:	106d      	asrs	r5, r5, #1
 800582a:	429d      	cmp	r5, r3
 800582c:	bf38      	it	cc
 800582e:	461d      	movcc	r5, r3
 8005830:	0553      	lsls	r3, r2, #21
 8005832:	d531      	bpl.n	8005898 <__ssputs_r+0xa0>
 8005834:	4629      	mov	r1, r5
 8005836:	f7ff ff85 	bl	8005744 <_malloc_r>
 800583a:	4606      	mov	r6, r0
 800583c:	b950      	cbnz	r0, 8005854 <__ssputs_r+0x5c>
 800583e:	230c      	movs	r3, #12
 8005840:	f8ca 3000 	str.w	r3, [sl]
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800584a:	81a3      	strh	r3, [r4, #12]
 800584c:	f04f 30ff 	mov.w	r0, #4294967295
 8005850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005854:	6921      	ldr	r1, [r4, #16]
 8005856:	464a      	mov	r2, r9
 8005858:	f7fe f862 	bl	8003920 <memcpy>
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	6126      	str	r6, [r4, #16]
 800586a:	6165      	str	r5, [r4, #20]
 800586c:	444e      	add	r6, r9
 800586e:	eba5 0509 	sub.w	r5, r5, r9
 8005872:	6026      	str	r6, [r4, #0]
 8005874:	60a5      	str	r5, [r4, #8]
 8005876:	463e      	mov	r6, r7
 8005878:	42be      	cmp	r6, r7
 800587a:	d900      	bls.n	800587e <__ssputs_r+0x86>
 800587c:	463e      	mov	r6, r7
 800587e:	4632      	mov	r2, r6
 8005880:	6820      	ldr	r0, [r4, #0]
 8005882:	4641      	mov	r1, r8
 8005884:	f000 f966 	bl	8005b54 <memmove>
 8005888:	68a3      	ldr	r3, [r4, #8]
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	1b9b      	subs	r3, r3, r6
 800588e:	4432      	add	r2, r6
 8005890:	60a3      	str	r3, [r4, #8]
 8005892:	6022      	str	r2, [r4, #0]
 8005894:	2000      	movs	r0, #0
 8005896:	e7db      	b.n	8005850 <__ssputs_r+0x58>
 8005898:	462a      	mov	r2, r5
 800589a:	f000 f981 	bl	8005ba0 <_realloc_r>
 800589e:	4606      	mov	r6, r0
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d1e1      	bne.n	8005868 <__ssputs_r+0x70>
 80058a4:	6921      	ldr	r1, [r4, #16]
 80058a6:	4650      	mov	r0, sl
 80058a8:	f7ff fefc 	bl	80056a4 <_free_r>
 80058ac:	e7c7      	b.n	800583e <__ssputs_r+0x46>
	...

080058b0 <_svfiprintf_r>:
 80058b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	4698      	mov	r8, r3
 80058b6:	898b      	ldrh	r3, [r1, #12]
 80058b8:	061b      	lsls	r3, r3, #24
 80058ba:	b09d      	sub	sp, #116	; 0x74
 80058bc:	4607      	mov	r7, r0
 80058be:	460d      	mov	r5, r1
 80058c0:	4614      	mov	r4, r2
 80058c2:	d50e      	bpl.n	80058e2 <_svfiprintf_r+0x32>
 80058c4:	690b      	ldr	r3, [r1, #16]
 80058c6:	b963      	cbnz	r3, 80058e2 <_svfiprintf_r+0x32>
 80058c8:	2140      	movs	r1, #64	; 0x40
 80058ca:	f7ff ff3b 	bl	8005744 <_malloc_r>
 80058ce:	6028      	str	r0, [r5, #0]
 80058d0:	6128      	str	r0, [r5, #16]
 80058d2:	b920      	cbnz	r0, 80058de <_svfiprintf_r+0x2e>
 80058d4:	230c      	movs	r3, #12
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	e0d1      	b.n	8005a82 <_svfiprintf_r+0x1d2>
 80058de:	2340      	movs	r3, #64	; 0x40
 80058e0:	616b      	str	r3, [r5, #20]
 80058e2:	2300      	movs	r3, #0
 80058e4:	9309      	str	r3, [sp, #36]	; 0x24
 80058e6:	2320      	movs	r3, #32
 80058e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f0:	2330      	movs	r3, #48	; 0x30
 80058f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a9c <_svfiprintf_r+0x1ec>
 80058f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058fa:	f04f 0901 	mov.w	r9, #1
 80058fe:	4623      	mov	r3, r4
 8005900:	469a      	mov	sl, r3
 8005902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005906:	b10a      	cbz	r2, 800590c <_svfiprintf_r+0x5c>
 8005908:	2a25      	cmp	r2, #37	; 0x25
 800590a:	d1f9      	bne.n	8005900 <_svfiprintf_r+0x50>
 800590c:	ebba 0b04 	subs.w	fp, sl, r4
 8005910:	d00b      	beq.n	800592a <_svfiprintf_r+0x7a>
 8005912:	465b      	mov	r3, fp
 8005914:	4622      	mov	r2, r4
 8005916:	4629      	mov	r1, r5
 8005918:	4638      	mov	r0, r7
 800591a:	f7ff ff6d 	bl	80057f8 <__ssputs_r>
 800591e:	3001      	adds	r0, #1
 8005920:	f000 80aa 	beq.w	8005a78 <_svfiprintf_r+0x1c8>
 8005924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005926:	445a      	add	r2, fp
 8005928:	9209      	str	r2, [sp, #36]	; 0x24
 800592a:	f89a 3000 	ldrb.w	r3, [sl]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80a2 	beq.w	8005a78 <_svfiprintf_r+0x1c8>
 8005934:	2300      	movs	r3, #0
 8005936:	f04f 32ff 	mov.w	r2, #4294967295
 800593a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800593e:	f10a 0a01 	add.w	sl, sl, #1
 8005942:	9304      	str	r3, [sp, #16]
 8005944:	9307      	str	r3, [sp, #28]
 8005946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800594a:	931a      	str	r3, [sp, #104]	; 0x68
 800594c:	4654      	mov	r4, sl
 800594e:	2205      	movs	r2, #5
 8005950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005954:	4851      	ldr	r0, [pc, #324]	; (8005a9c <_svfiprintf_r+0x1ec>)
 8005956:	f7fa fc43 	bl	80001e0 <memchr>
 800595a:	9a04      	ldr	r2, [sp, #16]
 800595c:	b9d8      	cbnz	r0, 8005996 <_svfiprintf_r+0xe6>
 800595e:	06d0      	lsls	r0, r2, #27
 8005960:	bf44      	itt	mi
 8005962:	2320      	movmi	r3, #32
 8005964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005968:	0711      	lsls	r1, r2, #28
 800596a:	bf44      	itt	mi
 800596c:	232b      	movmi	r3, #43	; 0x2b
 800596e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005972:	f89a 3000 	ldrb.w	r3, [sl]
 8005976:	2b2a      	cmp	r3, #42	; 0x2a
 8005978:	d015      	beq.n	80059a6 <_svfiprintf_r+0xf6>
 800597a:	9a07      	ldr	r2, [sp, #28]
 800597c:	4654      	mov	r4, sl
 800597e:	2000      	movs	r0, #0
 8005980:	f04f 0c0a 	mov.w	ip, #10
 8005984:	4621      	mov	r1, r4
 8005986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800598a:	3b30      	subs	r3, #48	; 0x30
 800598c:	2b09      	cmp	r3, #9
 800598e:	d94e      	bls.n	8005a2e <_svfiprintf_r+0x17e>
 8005990:	b1b0      	cbz	r0, 80059c0 <_svfiprintf_r+0x110>
 8005992:	9207      	str	r2, [sp, #28]
 8005994:	e014      	b.n	80059c0 <_svfiprintf_r+0x110>
 8005996:	eba0 0308 	sub.w	r3, r0, r8
 800599a:	fa09 f303 	lsl.w	r3, r9, r3
 800599e:	4313      	orrs	r3, r2
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	46a2      	mov	sl, r4
 80059a4:	e7d2      	b.n	800594c <_svfiprintf_r+0x9c>
 80059a6:	9b03      	ldr	r3, [sp, #12]
 80059a8:	1d19      	adds	r1, r3, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	9103      	str	r1, [sp, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bfbb      	ittet	lt
 80059b2:	425b      	neglt	r3, r3
 80059b4:	f042 0202 	orrlt.w	r2, r2, #2
 80059b8:	9307      	strge	r3, [sp, #28]
 80059ba:	9307      	strlt	r3, [sp, #28]
 80059bc:	bfb8      	it	lt
 80059be:	9204      	strlt	r2, [sp, #16]
 80059c0:	7823      	ldrb	r3, [r4, #0]
 80059c2:	2b2e      	cmp	r3, #46	; 0x2e
 80059c4:	d10c      	bne.n	80059e0 <_svfiprintf_r+0x130>
 80059c6:	7863      	ldrb	r3, [r4, #1]
 80059c8:	2b2a      	cmp	r3, #42	; 0x2a
 80059ca:	d135      	bne.n	8005a38 <_svfiprintf_r+0x188>
 80059cc:	9b03      	ldr	r3, [sp, #12]
 80059ce:	1d1a      	adds	r2, r3, #4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	9203      	str	r2, [sp, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bfb8      	it	lt
 80059d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80059dc:	3402      	adds	r4, #2
 80059de:	9305      	str	r3, [sp, #20]
 80059e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005aac <_svfiprintf_r+0x1fc>
 80059e4:	7821      	ldrb	r1, [r4, #0]
 80059e6:	2203      	movs	r2, #3
 80059e8:	4650      	mov	r0, sl
 80059ea:	f7fa fbf9 	bl	80001e0 <memchr>
 80059ee:	b140      	cbz	r0, 8005a02 <_svfiprintf_r+0x152>
 80059f0:	2340      	movs	r3, #64	; 0x40
 80059f2:	eba0 000a 	sub.w	r0, r0, sl
 80059f6:	fa03 f000 	lsl.w	r0, r3, r0
 80059fa:	9b04      	ldr	r3, [sp, #16]
 80059fc:	4303      	orrs	r3, r0
 80059fe:	3401      	adds	r4, #1
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a06:	4826      	ldr	r0, [pc, #152]	; (8005aa0 <_svfiprintf_r+0x1f0>)
 8005a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a0c:	2206      	movs	r2, #6
 8005a0e:	f7fa fbe7 	bl	80001e0 <memchr>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d038      	beq.n	8005a88 <_svfiprintf_r+0x1d8>
 8005a16:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <_svfiprintf_r+0x1f4>)
 8005a18:	bb1b      	cbnz	r3, 8005a62 <_svfiprintf_r+0x1b2>
 8005a1a:	9b03      	ldr	r3, [sp, #12]
 8005a1c:	3307      	adds	r3, #7
 8005a1e:	f023 0307 	bic.w	r3, r3, #7
 8005a22:	3308      	adds	r3, #8
 8005a24:	9303      	str	r3, [sp, #12]
 8005a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a28:	4433      	add	r3, r6
 8005a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a2c:	e767      	b.n	80058fe <_svfiprintf_r+0x4e>
 8005a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a32:	460c      	mov	r4, r1
 8005a34:	2001      	movs	r0, #1
 8005a36:	e7a5      	b.n	8005984 <_svfiprintf_r+0xd4>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	3401      	adds	r4, #1
 8005a3c:	9305      	str	r3, [sp, #20]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	f04f 0c0a 	mov.w	ip, #10
 8005a44:	4620      	mov	r0, r4
 8005a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a4a:	3a30      	subs	r2, #48	; 0x30
 8005a4c:	2a09      	cmp	r2, #9
 8005a4e:	d903      	bls.n	8005a58 <_svfiprintf_r+0x1a8>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0c5      	beq.n	80059e0 <_svfiprintf_r+0x130>
 8005a54:	9105      	str	r1, [sp, #20]
 8005a56:	e7c3      	b.n	80059e0 <_svfiprintf_r+0x130>
 8005a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e7f0      	b.n	8005a44 <_svfiprintf_r+0x194>
 8005a62:	ab03      	add	r3, sp, #12
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	462a      	mov	r2, r5
 8005a68:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <_svfiprintf_r+0x1f8>)
 8005a6a:	a904      	add	r1, sp, #16
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f7fe f80d 	bl	8003a8c <_printf_float>
 8005a72:	1c42      	adds	r2, r0, #1
 8005a74:	4606      	mov	r6, r0
 8005a76:	d1d6      	bne.n	8005a26 <_svfiprintf_r+0x176>
 8005a78:	89ab      	ldrh	r3, [r5, #12]
 8005a7a:	065b      	lsls	r3, r3, #25
 8005a7c:	f53f af2c 	bmi.w	80058d8 <_svfiprintf_r+0x28>
 8005a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a82:	b01d      	add	sp, #116	; 0x74
 8005a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a88:	ab03      	add	r3, sp, #12
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	462a      	mov	r2, r5
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <_svfiprintf_r+0x1f8>)
 8005a90:	a904      	add	r1, sp, #16
 8005a92:	4638      	mov	r0, r7
 8005a94:	f7fe fa9e 	bl	8003fd4 <_printf_i>
 8005a98:	e7eb      	b.n	8005a72 <_svfiprintf_r+0x1c2>
 8005a9a:	bf00      	nop
 8005a9c:	08006a84 	.word	0x08006a84
 8005aa0:	08006a8e 	.word	0x08006a8e
 8005aa4:	08003a8d 	.word	0x08003a8d
 8005aa8:	080057f9 	.word	0x080057f9
 8005aac:	08006a8a 	.word	0x08006a8a

08005ab0 <_sbrk_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d06      	ldr	r5, [pc, #24]	; (8005acc <_sbrk_r+0x1c>)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	602b      	str	r3, [r5, #0]
 8005abc:	f7fb fb9e 	bl	80011fc <_sbrk>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_sbrk_r+0x1a>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_sbrk_r+0x1a>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	200010b0 	.word	0x200010b0

08005ad0 <__assert_func>:
 8005ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ad2:	4614      	mov	r4, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <__assert_func+0x2c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4605      	mov	r5, r0
 8005adc:	68d8      	ldr	r0, [r3, #12]
 8005ade:	b14c      	cbz	r4, 8005af4 <__assert_func+0x24>
 8005ae0:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <__assert_func+0x30>)
 8005ae2:	9100      	str	r1, [sp, #0]
 8005ae4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ae8:	4906      	ldr	r1, [pc, #24]	; (8005b04 <__assert_func+0x34>)
 8005aea:	462b      	mov	r3, r5
 8005aec:	f000 f80e 	bl	8005b0c <fiprintf>
 8005af0:	f000 faa4 	bl	800603c <abort>
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <__assert_func+0x38>)
 8005af6:	461c      	mov	r4, r3
 8005af8:	e7f3      	b.n	8005ae2 <__assert_func+0x12>
 8005afa:	bf00      	nop
 8005afc:	20000018 	.word	0x20000018
 8005b00:	08006a95 	.word	0x08006a95
 8005b04:	08006aa2 	.word	0x08006aa2
 8005b08:	08006ad0 	.word	0x08006ad0

08005b0c <fiprintf>:
 8005b0c:	b40e      	push	{r1, r2, r3}
 8005b0e:	b503      	push	{r0, r1, lr}
 8005b10:	4601      	mov	r1, r0
 8005b12:	ab03      	add	r3, sp, #12
 8005b14:	4805      	ldr	r0, [pc, #20]	; (8005b2c <fiprintf+0x20>)
 8005b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	f000 f88f 	bl	8005c40 <_vfiprintf_r>
 8005b22:	b002      	add	sp, #8
 8005b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b28:	b003      	add	sp, #12
 8005b2a:	4770      	bx	lr
 8005b2c:	20000018 	.word	0x20000018

08005b30 <__ascii_mbtowc>:
 8005b30:	b082      	sub	sp, #8
 8005b32:	b901      	cbnz	r1, 8005b36 <__ascii_mbtowc+0x6>
 8005b34:	a901      	add	r1, sp, #4
 8005b36:	b142      	cbz	r2, 8005b4a <__ascii_mbtowc+0x1a>
 8005b38:	b14b      	cbz	r3, 8005b4e <__ascii_mbtowc+0x1e>
 8005b3a:	7813      	ldrb	r3, [r2, #0]
 8005b3c:	600b      	str	r3, [r1, #0]
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	1e10      	subs	r0, r2, #0
 8005b42:	bf18      	it	ne
 8005b44:	2001      	movne	r0, #1
 8005b46:	b002      	add	sp, #8
 8005b48:	4770      	bx	lr
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	e7fb      	b.n	8005b46 <__ascii_mbtowc+0x16>
 8005b4e:	f06f 0001 	mvn.w	r0, #1
 8005b52:	e7f8      	b.n	8005b46 <__ascii_mbtowc+0x16>

08005b54 <memmove>:
 8005b54:	4288      	cmp	r0, r1
 8005b56:	b510      	push	{r4, lr}
 8005b58:	eb01 0402 	add.w	r4, r1, r2
 8005b5c:	d902      	bls.n	8005b64 <memmove+0x10>
 8005b5e:	4284      	cmp	r4, r0
 8005b60:	4623      	mov	r3, r4
 8005b62:	d807      	bhi.n	8005b74 <memmove+0x20>
 8005b64:	1e43      	subs	r3, r0, #1
 8005b66:	42a1      	cmp	r1, r4
 8005b68:	d008      	beq.n	8005b7c <memmove+0x28>
 8005b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b72:	e7f8      	b.n	8005b66 <memmove+0x12>
 8005b74:	4402      	add	r2, r0
 8005b76:	4601      	mov	r1, r0
 8005b78:	428a      	cmp	r2, r1
 8005b7a:	d100      	bne.n	8005b7e <memmove+0x2a>
 8005b7c:	bd10      	pop	{r4, pc}
 8005b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b86:	e7f7      	b.n	8005b78 <memmove+0x24>

08005b88 <__malloc_lock>:
 8005b88:	4801      	ldr	r0, [pc, #4]	; (8005b90 <__malloc_lock+0x8>)
 8005b8a:	f000 bc17 	b.w	80063bc <__retarget_lock_acquire_recursive>
 8005b8e:	bf00      	nop
 8005b90:	200010b8 	.word	0x200010b8

08005b94 <__malloc_unlock>:
 8005b94:	4801      	ldr	r0, [pc, #4]	; (8005b9c <__malloc_unlock+0x8>)
 8005b96:	f000 bc12 	b.w	80063be <__retarget_lock_release_recursive>
 8005b9a:	bf00      	nop
 8005b9c:	200010b8 	.word	0x200010b8

08005ba0 <_realloc_r>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	4607      	mov	r7, r0
 8005ba4:	4614      	mov	r4, r2
 8005ba6:	460e      	mov	r6, r1
 8005ba8:	b921      	cbnz	r1, 8005bb4 <_realloc_r+0x14>
 8005baa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bae:	4611      	mov	r1, r2
 8005bb0:	f7ff bdc8 	b.w	8005744 <_malloc_r>
 8005bb4:	b922      	cbnz	r2, 8005bc0 <_realloc_r+0x20>
 8005bb6:	f7ff fd75 	bl	80056a4 <_free_r>
 8005bba:	4625      	mov	r5, r4
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc0:	f000 fc62 	bl	8006488 <_malloc_usable_size_r>
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d20f      	bcs.n	8005be8 <_realloc_r+0x48>
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4638      	mov	r0, r7
 8005bcc:	f7ff fdba 	bl	8005744 <_malloc_r>
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d0f2      	beq.n	8005bbc <_realloc_r+0x1c>
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4622      	mov	r2, r4
 8005bda:	f7fd fea1 	bl	8003920 <memcpy>
 8005bde:	4631      	mov	r1, r6
 8005be0:	4638      	mov	r0, r7
 8005be2:	f7ff fd5f 	bl	80056a4 <_free_r>
 8005be6:	e7e9      	b.n	8005bbc <_realloc_r+0x1c>
 8005be8:	4635      	mov	r5, r6
 8005bea:	e7e7      	b.n	8005bbc <_realloc_r+0x1c>

08005bec <__sfputc_r>:
 8005bec:	6893      	ldr	r3, [r2, #8]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	b410      	push	{r4}
 8005bf4:	6093      	str	r3, [r2, #8]
 8005bf6:	da08      	bge.n	8005c0a <__sfputc_r+0x1e>
 8005bf8:	6994      	ldr	r4, [r2, #24]
 8005bfa:	42a3      	cmp	r3, r4
 8005bfc:	db01      	blt.n	8005c02 <__sfputc_r+0x16>
 8005bfe:	290a      	cmp	r1, #10
 8005c00:	d103      	bne.n	8005c0a <__sfputc_r+0x1e>
 8005c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c06:	f000 b94b 	b.w	8005ea0 <__swbuf_r>
 8005c0a:	6813      	ldr	r3, [r2, #0]
 8005c0c:	1c58      	adds	r0, r3, #1
 8005c0e:	6010      	str	r0, [r2, #0]
 8005c10:	7019      	strb	r1, [r3, #0]
 8005c12:	4608      	mov	r0, r1
 8005c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <__sfputs_r>:
 8005c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	460f      	mov	r7, r1
 8005c20:	4614      	mov	r4, r2
 8005c22:	18d5      	adds	r5, r2, r3
 8005c24:	42ac      	cmp	r4, r5
 8005c26:	d101      	bne.n	8005c2c <__sfputs_r+0x12>
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e007      	b.n	8005c3c <__sfputs_r+0x22>
 8005c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c30:	463a      	mov	r2, r7
 8005c32:	4630      	mov	r0, r6
 8005c34:	f7ff ffda 	bl	8005bec <__sfputc_r>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d1f3      	bne.n	8005c24 <__sfputs_r+0xa>
 8005c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c40 <_vfiprintf_r>:
 8005c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	460d      	mov	r5, r1
 8005c46:	b09d      	sub	sp, #116	; 0x74
 8005c48:	4614      	mov	r4, r2
 8005c4a:	4698      	mov	r8, r3
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	b118      	cbz	r0, 8005c58 <_vfiprintf_r+0x18>
 8005c50:	6983      	ldr	r3, [r0, #24]
 8005c52:	b90b      	cbnz	r3, 8005c58 <_vfiprintf_r+0x18>
 8005c54:	f000 fb14 	bl	8006280 <__sinit>
 8005c58:	4b89      	ldr	r3, [pc, #548]	; (8005e80 <_vfiprintf_r+0x240>)
 8005c5a:	429d      	cmp	r5, r3
 8005c5c:	d11b      	bne.n	8005c96 <_vfiprintf_r+0x56>
 8005c5e:	6875      	ldr	r5, [r6, #4]
 8005c60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c62:	07d9      	lsls	r1, r3, #31
 8005c64:	d405      	bmi.n	8005c72 <_vfiprintf_r+0x32>
 8005c66:	89ab      	ldrh	r3, [r5, #12]
 8005c68:	059a      	lsls	r2, r3, #22
 8005c6a:	d402      	bmi.n	8005c72 <_vfiprintf_r+0x32>
 8005c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c6e:	f000 fba5 	bl	80063bc <__retarget_lock_acquire_recursive>
 8005c72:	89ab      	ldrh	r3, [r5, #12]
 8005c74:	071b      	lsls	r3, r3, #28
 8005c76:	d501      	bpl.n	8005c7c <_vfiprintf_r+0x3c>
 8005c78:	692b      	ldr	r3, [r5, #16]
 8005c7a:	b9eb      	cbnz	r3, 8005cb8 <_vfiprintf_r+0x78>
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f000 f96e 	bl	8005f60 <__swsetup_r>
 8005c84:	b1c0      	cbz	r0, 8005cb8 <_vfiprintf_r+0x78>
 8005c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c88:	07dc      	lsls	r4, r3, #31
 8005c8a:	d50e      	bpl.n	8005caa <_vfiprintf_r+0x6a>
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	b01d      	add	sp, #116	; 0x74
 8005c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c96:	4b7b      	ldr	r3, [pc, #492]	; (8005e84 <_vfiprintf_r+0x244>)
 8005c98:	429d      	cmp	r5, r3
 8005c9a:	d101      	bne.n	8005ca0 <_vfiprintf_r+0x60>
 8005c9c:	68b5      	ldr	r5, [r6, #8]
 8005c9e:	e7df      	b.n	8005c60 <_vfiprintf_r+0x20>
 8005ca0:	4b79      	ldr	r3, [pc, #484]	; (8005e88 <_vfiprintf_r+0x248>)
 8005ca2:	429d      	cmp	r5, r3
 8005ca4:	bf08      	it	eq
 8005ca6:	68f5      	ldreq	r5, [r6, #12]
 8005ca8:	e7da      	b.n	8005c60 <_vfiprintf_r+0x20>
 8005caa:	89ab      	ldrh	r3, [r5, #12]
 8005cac:	0598      	lsls	r0, r3, #22
 8005cae:	d4ed      	bmi.n	8005c8c <_vfiprintf_r+0x4c>
 8005cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cb2:	f000 fb84 	bl	80063be <__retarget_lock_release_recursive>
 8005cb6:	e7e9      	b.n	8005c8c <_vfiprintf_r+0x4c>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbc:	2320      	movs	r3, #32
 8005cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cc6:	2330      	movs	r3, #48	; 0x30
 8005cc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e8c <_vfiprintf_r+0x24c>
 8005ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cd0:	f04f 0901 	mov.w	r9, #1
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	469a      	mov	sl, r3
 8005cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cdc:	b10a      	cbz	r2, 8005ce2 <_vfiprintf_r+0xa2>
 8005cde:	2a25      	cmp	r2, #37	; 0x25
 8005ce0:	d1f9      	bne.n	8005cd6 <_vfiprintf_r+0x96>
 8005ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ce6:	d00b      	beq.n	8005d00 <_vfiprintf_r+0xc0>
 8005ce8:	465b      	mov	r3, fp
 8005cea:	4622      	mov	r2, r4
 8005cec:	4629      	mov	r1, r5
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f7ff ff93 	bl	8005c1a <__sfputs_r>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f000 80aa 	beq.w	8005e4e <_vfiprintf_r+0x20e>
 8005cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cfc:	445a      	add	r2, fp
 8005cfe:	9209      	str	r2, [sp, #36]	; 0x24
 8005d00:	f89a 3000 	ldrb.w	r3, [sl]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 80a2 	beq.w	8005e4e <_vfiprintf_r+0x20e>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d14:	f10a 0a01 	add.w	sl, sl, #1
 8005d18:	9304      	str	r3, [sp, #16]
 8005d1a:	9307      	str	r3, [sp, #28]
 8005d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d20:	931a      	str	r3, [sp, #104]	; 0x68
 8005d22:	4654      	mov	r4, sl
 8005d24:	2205      	movs	r2, #5
 8005d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2a:	4858      	ldr	r0, [pc, #352]	; (8005e8c <_vfiprintf_r+0x24c>)
 8005d2c:	f7fa fa58 	bl	80001e0 <memchr>
 8005d30:	9a04      	ldr	r2, [sp, #16]
 8005d32:	b9d8      	cbnz	r0, 8005d6c <_vfiprintf_r+0x12c>
 8005d34:	06d1      	lsls	r1, r2, #27
 8005d36:	bf44      	itt	mi
 8005d38:	2320      	movmi	r3, #32
 8005d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d3e:	0713      	lsls	r3, r2, #28
 8005d40:	bf44      	itt	mi
 8005d42:	232b      	movmi	r3, #43	; 0x2b
 8005d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d48:	f89a 3000 	ldrb.w	r3, [sl]
 8005d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d4e:	d015      	beq.n	8005d7c <_vfiprintf_r+0x13c>
 8005d50:	9a07      	ldr	r2, [sp, #28]
 8005d52:	4654      	mov	r4, sl
 8005d54:	2000      	movs	r0, #0
 8005d56:	f04f 0c0a 	mov.w	ip, #10
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d60:	3b30      	subs	r3, #48	; 0x30
 8005d62:	2b09      	cmp	r3, #9
 8005d64:	d94e      	bls.n	8005e04 <_vfiprintf_r+0x1c4>
 8005d66:	b1b0      	cbz	r0, 8005d96 <_vfiprintf_r+0x156>
 8005d68:	9207      	str	r2, [sp, #28]
 8005d6a:	e014      	b.n	8005d96 <_vfiprintf_r+0x156>
 8005d6c:	eba0 0308 	sub.w	r3, r0, r8
 8005d70:	fa09 f303 	lsl.w	r3, r9, r3
 8005d74:	4313      	orrs	r3, r2
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	46a2      	mov	sl, r4
 8005d7a:	e7d2      	b.n	8005d22 <_vfiprintf_r+0xe2>
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	1d19      	adds	r1, r3, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	9103      	str	r1, [sp, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bfbb      	ittet	lt
 8005d88:	425b      	neglt	r3, r3
 8005d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d8e:	9307      	strge	r3, [sp, #28]
 8005d90:	9307      	strlt	r3, [sp, #28]
 8005d92:	bfb8      	it	lt
 8005d94:	9204      	strlt	r2, [sp, #16]
 8005d96:	7823      	ldrb	r3, [r4, #0]
 8005d98:	2b2e      	cmp	r3, #46	; 0x2e
 8005d9a:	d10c      	bne.n	8005db6 <_vfiprintf_r+0x176>
 8005d9c:	7863      	ldrb	r3, [r4, #1]
 8005d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005da0:	d135      	bne.n	8005e0e <_vfiprintf_r+0x1ce>
 8005da2:	9b03      	ldr	r3, [sp, #12]
 8005da4:	1d1a      	adds	r2, r3, #4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	9203      	str	r2, [sp, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	bfb8      	it	lt
 8005dae:	f04f 33ff 	movlt.w	r3, #4294967295
 8005db2:	3402      	adds	r4, #2
 8005db4:	9305      	str	r3, [sp, #20]
 8005db6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e9c <_vfiprintf_r+0x25c>
 8005dba:	7821      	ldrb	r1, [r4, #0]
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	4650      	mov	r0, sl
 8005dc0:	f7fa fa0e 	bl	80001e0 <memchr>
 8005dc4:	b140      	cbz	r0, 8005dd8 <_vfiprintf_r+0x198>
 8005dc6:	2340      	movs	r3, #64	; 0x40
 8005dc8:	eba0 000a 	sub.w	r0, r0, sl
 8005dcc:	fa03 f000 	lsl.w	r0, r3, r0
 8005dd0:	9b04      	ldr	r3, [sp, #16]
 8005dd2:	4303      	orrs	r3, r0
 8005dd4:	3401      	adds	r4, #1
 8005dd6:	9304      	str	r3, [sp, #16]
 8005dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ddc:	482c      	ldr	r0, [pc, #176]	; (8005e90 <_vfiprintf_r+0x250>)
 8005dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005de2:	2206      	movs	r2, #6
 8005de4:	f7fa f9fc 	bl	80001e0 <memchr>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d03f      	beq.n	8005e6c <_vfiprintf_r+0x22c>
 8005dec:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <_vfiprintf_r+0x254>)
 8005dee:	bb1b      	cbnz	r3, 8005e38 <_vfiprintf_r+0x1f8>
 8005df0:	9b03      	ldr	r3, [sp, #12]
 8005df2:	3307      	adds	r3, #7
 8005df4:	f023 0307 	bic.w	r3, r3, #7
 8005df8:	3308      	adds	r3, #8
 8005dfa:	9303      	str	r3, [sp, #12]
 8005dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dfe:	443b      	add	r3, r7
 8005e00:	9309      	str	r3, [sp, #36]	; 0x24
 8005e02:	e767      	b.n	8005cd4 <_vfiprintf_r+0x94>
 8005e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e08:	460c      	mov	r4, r1
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	e7a5      	b.n	8005d5a <_vfiprintf_r+0x11a>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	3401      	adds	r4, #1
 8005e12:	9305      	str	r3, [sp, #20]
 8005e14:	4619      	mov	r1, r3
 8005e16:	f04f 0c0a 	mov.w	ip, #10
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e20:	3a30      	subs	r2, #48	; 0x30
 8005e22:	2a09      	cmp	r2, #9
 8005e24:	d903      	bls.n	8005e2e <_vfiprintf_r+0x1ee>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0c5      	beq.n	8005db6 <_vfiprintf_r+0x176>
 8005e2a:	9105      	str	r1, [sp, #20]
 8005e2c:	e7c3      	b.n	8005db6 <_vfiprintf_r+0x176>
 8005e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e32:	4604      	mov	r4, r0
 8005e34:	2301      	movs	r3, #1
 8005e36:	e7f0      	b.n	8005e1a <_vfiprintf_r+0x1da>
 8005e38:	ab03      	add	r3, sp, #12
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	462a      	mov	r2, r5
 8005e3e:	4b16      	ldr	r3, [pc, #88]	; (8005e98 <_vfiprintf_r+0x258>)
 8005e40:	a904      	add	r1, sp, #16
 8005e42:	4630      	mov	r0, r6
 8005e44:	f7fd fe22 	bl	8003a8c <_printf_float>
 8005e48:	4607      	mov	r7, r0
 8005e4a:	1c78      	adds	r0, r7, #1
 8005e4c:	d1d6      	bne.n	8005dfc <_vfiprintf_r+0x1bc>
 8005e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e50:	07d9      	lsls	r1, r3, #31
 8005e52:	d405      	bmi.n	8005e60 <_vfiprintf_r+0x220>
 8005e54:	89ab      	ldrh	r3, [r5, #12]
 8005e56:	059a      	lsls	r2, r3, #22
 8005e58:	d402      	bmi.n	8005e60 <_vfiprintf_r+0x220>
 8005e5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e5c:	f000 faaf 	bl	80063be <__retarget_lock_release_recursive>
 8005e60:	89ab      	ldrh	r3, [r5, #12]
 8005e62:	065b      	lsls	r3, r3, #25
 8005e64:	f53f af12 	bmi.w	8005c8c <_vfiprintf_r+0x4c>
 8005e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e6a:	e711      	b.n	8005c90 <_vfiprintf_r+0x50>
 8005e6c:	ab03      	add	r3, sp, #12
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	462a      	mov	r2, r5
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <_vfiprintf_r+0x258>)
 8005e74:	a904      	add	r1, sp, #16
 8005e76:	4630      	mov	r0, r6
 8005e78:	f7fe f8ac 	bl	8003fd4 <_printf_i>
 8005e7c:	e7e4      	b.n	8005e48 <_vfiprintf_r+0x208>
 8005e7e:	bf00      	nop
 8005e80:	08006bfc 	.word	0x08006bfc
 8005e84:	08006c1c 	.word	0x08006c1c
 8005e88:	08006bdc 	.word	0x08006bdc
 8005e8c:	08006a84 	.word	0x08006a84
 8005e90:	08006a8e 	.word	0x08006a8e
 8005e94:	08003a8d 	.word	0x08003a8d
 8005e98:	08005c1b 	.word	0x08005c1b
 8005e9c:	08006a8a 	.word	0x08006a8a

08005ea0 <__swbuf_r>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	460e      	mov	r6, r1
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	b118      	cbz	r0, 8005eb2 <__swbuf_r+0x12>
 8005eaa:	6983      	ldr	r3, [r0, #24]
 8005eac:	b90b      	cbnz	r3, 8005eb2 <__swbuf_r+0x12>
 8005eae:	f000 f9e7 	bl	8006280 <__sinit>
 8005eb2:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <__swbuf_r+0x98>)
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	d12b      	bne.n	8005f10 <__swbuf_r+0x70>
 8005eb8:	686c      	ldr	r4, [r5, #4]
 8005eba:	69a3      	ldr	r3, [r4, #24]
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	071a      	lsls	r2, r3, #28
 8005ec2:	d52f      	bpl.n	8005f24 <__swbuf_r+0x84>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	b36b      	cbz	r3, 8005f24 <__swbuf_r+0x84>
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	6820      	ldr	r0, [r4, #0]
 8005ecc:	1ac0      	subs	r0, r0, r3
 8005ece:	6963      	ldr	r3, [r4, #20]
 8005ed0:	b2f6      	uxtb	r6, r6
 8005ed2:	4283      	cmp	r3, r0
 8005ed4:	4637      	mov	r7, r6
 8005ed6:	dc04      	bgt.n	8005ee2 <__swbuf_r+0x42>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	f000 f93c 	bl	8006158 <_fflush_r>
 8005ee0:	bb30      	cbnz	r0, 8005f30 <__swbuf_r+0x90>
 8005ee2:	68a3      	ldr	r3, [r4, #8]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	60a3      	str	r3, [r4, #8]
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	6022      	str	r2, [r4, #0]
 8005eee:	701e      	strb	r6, [r3, #0]
 8005ef0:	6963      	ldr	r3, [r4, #20]
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	4283      	cmp	r3, r0
 8005ef6:	d004      	beq.n	8005f02 <__swbuf_r+0x62>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	07db      	lsls	r3, r3, #31
 8005efc:	d506      	bpl.n	8005f0c <__swbuf_r+0x6c>
 8005efe:	2e0a      	cmp	r6, #10
 8005f00:	d104      	bne.n	8005f0c <__swbuf_r+0x6c>
 8005f02:	4621      	mov	r1, r4
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 f927 	bl	8006158 <_fflush_r>
 8005f0a:	b988      	cbnz	r0, 8005f30 <__swbuf_r+0x90>
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <__swbuf_r+0x9c>)
 8005f12:	429c      	cmp	r4, r3
 8005f14:	d101      	bne.n	8005f1a <__swbuf_r+0x7a>
 8005f16:	68ac      	ldr	r4, [r5, #8]
 8005f18:	e7cf      	b.n	8005eba <__swbuf_r+0x1a>
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <__swbuf_r+0xa0>)
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	bf08      	it	eq
 8005f20:	68ec      	ldreq	r4, [r5, #12]
 8005f22:	e7ca      	b.n	8005eba <__swbuf_r+0x1a>
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f81a 	bl	8005f60 <__swsetup_r>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d0cb      	beq.n	8005ec8 <__swbuf_r+0x28>
 8005f30:	f04f 37ff 	mov.w	r7, #4294967295
 8005f34:	e7ea      	b.n	8005f0c <__swbuf_r+0x6c>
 8005f36:	bf00      	nop
 8005f38:	08006bfc 	.word	0x08006bfc
 8005f3c:	08006c1c 	.word	0x08006c1c
 8005f40:	08006bdc 	.word	0x08006bdc

08005f44 <__ascii_wctomb>:
 8005f44:	b149      	cbz	r1, 8005f5a <__ascii_wctomb+0x16>
 8005f46:	2aff      	cmp	r2, #255	; 0xff
 8005f48:	bf85      	ittet	hi
 8005f4a:	238a      	movhi	r3, #138	; 0x8a
 8005f4c:	6003      	strhi	r3, [r0, #0]
 8005f4e:	700a      	strbls	r2, [r1, #0]
 8005f50:	f04f 30ff 	movhi.w	r0, #4294967295
 8005f54:	bf98      	it	ls
 8005f56:	2001      	movls	r0, #1
 8005f58:	4770      	bx	lr
 8005f5a:	4608      	mov	r0, r1
 8005f5c:	4770      	bx	lr
	...

08005f60 <__swsetup_r>:
 8005f60:	4b32      	ldr	r3, [pc, #200]	; (800602c <__swsetup_r+0xcc>)
 8005f62:	b570      	push	{r4, r5, r6, lr}
 8005f64:	681d      	ldr	r5, [r3, #0]
 8005f66:	4606      	mov	r6, r0
 8005f68:	460c      	mov	r4, r1
 8005f6a:	b125      	cbz	r5, 8005f76 <__swsetup_r+0x16>
 8005f6c:	69ab      	ldr	r3, [r5, #24]
 8005f6e:	b913      	cbnz	r3, 8005f76 <__swsetup_r+0x16>
 8005f70:	4628      	mov	r0, r5
 8005f72:	f000 f985 	bl	8006280 <__sinit>
 8005f76:	4b2e      	ldr	r3, [pc, #184]	; (8006030 <__swsetup_r+0xd0>)
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	d10f      	bne.n	8005f9c <__swsetup_r+0x3c>
 8005f7c:	686c      	ldr	r4, [r5, #4]
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f84:	0719      	lsls	r1, r3, #28
 8005f86:	d42c      	bmi.n	8005fe2 <__swsetup_r+0x82>
 8005f88:	06dd      	lsls	r5, r3, #27
 8005f8a:	d411      	bmi.n	8005fb0 <__swsetup_r+0x50>
 8005f8c:	2309      	movs	r3, #9
 8005f8e:	6033      	str	r3, [r6, #0]
 8005f90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f94:	81a3      	strh	r3, [r4, #12]
 8005f96:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9a:	e03e      	b.n	800601a <__swsetup_r+0xba>
 8005f9c:	4b25      	ldr	r3, [pc, #148]	; (8006034 <__swsetup_r+0xd4>)
 8005f9e:	429c      	cmp	r4, r3
 8005fa0:	d101      	bne.n	8005fa6 <__swsetup_r+0x46>
 8005fa2:	68ac      	ldr	r4, [r5, #8]
 8005fa4:	e7eb      	b.n	8005f7e <__swsetup_r+0x1e>
 8005fa6:	4b24      	ldr	r3, [pc, #144]	; (8006038 <__swsetup_r+0xd8>)
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	bf08      	it	eq
 8005fac:	68ec      	ldreq	r4, [r5, #12]
 8005fae:	e7e6      	b.n	8005f7e <__swsetup_r+0x1e>
 8005fb0:	0758      	lsls	r0, r3, #29
 8005fb2:	d512      	bpl.n	8005fda <__swsetup_r+0x7a>
 8005fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fb6:	b141      	cbz	r1, 8005fca <__swsetup_r+0x6a>
 8005fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fbc:	4299      	cmp	r1, r3
 8005fbe:	d002      	beq.n	8005fc6 <__swsetup_r+0x66>
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f7ff fb6f 	bl	80056a4 <_free_r>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6063      	str	r3, [r4, #4]
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f043 0308 	orr.w	r3, r3, #8
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	b94b      	cbnz	r3, 8005ffa <__swsetup_r+0x9a>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ff0:	d003      	beq.n	8005ffa <__swsetup_r+0x9a>
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f000 fa07 	bl	8006408 <__smakebuf_r>
 8005ffa:	89a0      	ldrh	r0, [r4, #12]
 8005ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006000:	f010 0301 	ands.w	r3, r0, #1
 8006004:	d00a      	beq.n	800601c <__swsetup_r+0xbc>
 8006006:	2300      	movs	r3, #0
 8006008:	60a3      	str	r3, [r4, #8]
 800600a:	6963      	ldr	r3, [r4, #20]
 800600c:	425b      	negs	r3, r3
 800600e:	61a3      	str	r3, [r4, #24]
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	b943      	cbnz	r3, 8006026 <__swsetup_r+0xc6>
 8006014:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006018:	d1ba      	bne.n	8005f90 <__swsetup_r+0x30>
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	0781      	lsls	r1, r0, #30
 800601e:	bf58      	it	pl
 8006020:	6963      	ldrpl	r3, [r4, #20]
 8006022:	60a3      	str	r3, [r4, #8]
 8006024:	e7f4      	b.n	8006010 <__swsetup_r+0xb0>
 8006026:	2000      	movs	r0, #0
 8006028:	e7f7      	b.n	800601a <__swsetup_r+0xba>
 800602a:	bf00      	nop
 800602c:	20000018 	.word	0x20000018
 8006030:	08006bfc 	.word	0x08006bfc
 8006034:	08006c1c 	.word	0x08006c1c
 8006038:	08006bdc 	.word	0x08006bdc

0800603c <abort>:
 800603c:	b508      	push	{r3, lr}
 800603e:	2006      	movs	r0, #6
 8006040:	f000 fa52 	bl	80064e8 <raise>
 8006044:	2001      	movs	r0, #1
 8006046:	f7fb f8b5 	bl	80011b4 <_exit>
	...

0800604c <__sflush_r>:
 800604c:	898a      	ldrh	r2, [r1, #12]
 800604e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006052:	4605      	mov	r5, r0
 8006054:	0710      	lsls	r0, r2, #28
 8006056:	460c      	mov	r4, r1
 8006058:	d458      	bmi.n	800610c <__sflush_r+0xc0>
 800605a:	684b      	ldr	r3, [r1, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	dc05      	bgt.n	800606c <__sflush_r+0x20>
 8006060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	dc02      	bgt.n	800606c <__sflush_r+0x20>
 8006066:	2000      	movs	r0, #0
 8006068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800606c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800606e:	2e00      	cmp	r6, #0
 8006070:	d0f9      	beq.n	8006066 <__sflush_r+0x1a>
 8006072:	2300      	movs	r3, #0
 8006074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006078:	682f      	ldr	r7, [r5, #0]
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	d032      	beq.n	80060e4 <__sflush_r+0x98>
 800607e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	075a      	lsls	r2, r3, #29
 8006084:	d505      	bpl.n	8006092 <__sflush_r+0x46>
 8006086:	6863      	ldr	r3, [r4, #4]
 8006088:	1ac0      	subs	r0, r0, r3
 800608a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800608c:	b10b      	cbz	r3, 8006092 <__sflush_r+0x46>
 800608e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006090:	1ac0      	subs	r0, r0, r3
 8006092:	2300      	movs	r3, #0
 8006094:	4602      	mov	r2, r0
 8006096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006098:	6a21      	ldr	r1, [r4, #32]
 800609a:	4628      	mov	r0, r5
 800609c:	47b0      	blx	r6
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	d106      	bne.n	80060b2 <__sflush_r+0x66>
 80060a4:	6829      	ldr	r1, [r5, #0]
 80060a6:	291d      	cmp	r1, #29
 80060a8:	d82c      	bhi.n	8006104 <__sflush_r+0xb8>
 80060aa:	4a2a      	ldr	r2, [pc, #168]	; (8006154 <__sflush_r+0x108>)
 80060ac:	40ca      	lsrs	r2, r1
 80060ae:	07d6      	lsls	r6, r2, #31
 80060b0:	d528      	bpl.n	8006104 <__sflush_r+0xb8>
 80060b2:	2200      	movs	r2, #0
 80060b4:	6062      	str	r2, [r4, #4]
 80060b6:	04d9      	lsls	r1, r3, #19
 80060b8:	6922      	ldr	r2, [r4, #16]
 80060ba:	6022      	str	r2, [r4, #0]
 80060bc:	d504      	bpl.n	80060c8 <__sflush_r+0x7c>
 80060be:	1c42      	adds	r2, r0, #1
 80060c0:	d101      	bne.n	80060c6 <__sflush_r+0x7a>
 80060c2:	682b      	ldr	r3, [r5, #0]
 80060c4:	b903      	cbnz	r3, 80060c8 <__sflush_r+0x7c>
 80060c6:	6560      	str	r0, [r4, #84]	; 0x54
 80060c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ca:	602f      	str	r7, [r5, #0]
 80060cc:	2900      	cmp	r1, #0
 80060ce:	d0ca      	beq.n	8006066 <__sflush_r+0x1a>
 80060d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060d4:	4299      	cmp	r1, r3
 80060d6:	d002      	beq.n	80060de <__sflush_r+0x92>
 80060d8:	4628      	mov	r0, r5
 80060da:	f7ff fae3 	bl	80056a4 <_free_r>
 80060de:	2000      	movs	r0, #0
 80060e0:	6360      	str	r0, [r4, #52]	; 0x34
 80060e2:	e7c1      	b.n	8006068 <__sflush_r+0x1c>
 80060e4:	6a21      	ldr	r1, [r4, #32]
 80060e6:	2301      	movs	r3, #1
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b0      	blx	r6
 80060ec:	1c41      	adds	r1, r0, #1
 80060ee:	d1c7      	bne.n	8006080 <__sflush_r+0x34>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0c4      	beq.n	8006080 <__sflush_r+0x34>
 80060f6:	2b1d      	cmp	r3, #29
 80060f8:	d001      	beq.n	80060fe <__sflush_r+0xb2>
 80060fa:	2b16      	cmp	r3, #22
 80060fc:	d101      	bne.n	8006102 <__sflush_r+0xb6>
 80060fe:	602f      	str	r7, [r5, #0]
 8006100:	e7b1      	b.n	8006066 <__sflush_r+0x1a>
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	e7ad      	b.n	8006068 <__sflush_r+0x1c>
 800610c:	690f      	ldr	r7, [r1, #16]
 800610e:	2f00      	cmp	r7, #0
 8006110:	d0a9      	beq.n	8006066 <__sflush_r+0x1a>
 8006112:	0793      	lsls	r3, r2, #30
 8006114:	680e      	ldr	r6, [r1, #0]
 8006116:	bf08      	it	eq
 8006118:	694b      	ldreq	r3, [r1, #20]
 800611a:	600f      	str	r7, [r1, #0]
 800611c:	bf18      	it	ne
 800611e:	2300      	movne	r3, #0
 8006120:	eba6 0807 	sub.w	r8, r6, r7
 8006124:	608b      	str	r3, [r1, #8]
 8006126:	f1b8 0f00 	cmp.w	r8, #0
 800612a:	dd9c      	ble.n	8006066 <__sflush_r+0x1a>
 800612c:	6a21      	ldr	r1, [r4, #32]
 800612e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006130:	4643      	mov	r3, r8
 8006132:	463a      	mov	r2, r7
 8006134:	4628      	mov	r0, r5
 8006136:	47b0      	blx	r6
 8006138:	2800      	cmp	r0, #0
 800613a:	dc06      	bgt.n	800614a <__sflush_r+0xfe>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006142:	81a3      	strh	r3, [r4, #12]
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	e78e      	b.n	8006068 <__sflush_r+0x1c>
 800614a:	4407      	add	r7, r0
 800614c:	eba8 0800 	sub.w	r8, r8, r0
 8006150:	e7e9      	b.n	8006126 <__sflush_r+0xda>
 8006152:	bf00      	nop
 8006154:	20400001 	.word	0x20400001

08006158 <_fflush_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	690b      	ldr	r3, [r1, #16]
 800615c:	4605      	mov	r5, r0
 800615e:	460c      	mov	r4, r1
 8006160:	b913      	cbnz	r3, 8006168 <_fflush_r+0x10>
 8006162:	2500      	movs	r5, #0
 8006164:	4628      	mov	r0, r5
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	b118      	cbz	r0, 8006172 <_fflush_r+0x1a>
 800616a:	6983      	ldr	r3, [r0, #24]
 800616c:	b90b      	cbnz	r3, 8006172 <_fflush_r+0x1a>
 800616e:	f000 f887 	bl	8006280 <__sinit>
 8006172:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <_fflush_r+0x6c>)
 8006174:	429c      	cmp	r4, r3
 8006176:	d11b      	bne.n	80061b0 <_fflush_r+0x58>
 8006178:	686c      	ldr	r4, [r5, #4]
 800617a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0ef      	beq.n	8006162 <_fflush_r+0xa>
 8006182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006184:	07d0      	lsls	r0, r2, #31
 8006186:	d404      	bmi.n	8006192 <_fflush_r+0x3a>
 8006188:	0599      	lsls	r1, r3, #22
 800618a:	d402      	bmi.n	8006192 <_fflush_r+0x3a>
 800618c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800618e:	f000 f915 	bl	80063bc <__retarget_lock_acquire_recursive>
 8006192:	4628      	mov	r0, r5
 8006194:	4621      	mov	r1, r4
 8006196:	f7ff ff59 	bl	800604c <__sflush_r>
 800619a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800619c:	07da      	lsls	r2, r3, #31
 800619e:	4605      	mov	r5, r0
 80061a0:	d4e0      	bmi.n	8006164 <_fflush_r+0xc>
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	059b      	lsls	r3, r3, #22
 80061a6:	d4dd      	bmi.n	8006164 <_fflush_r+0xc>
 80061a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061aa:	f000 f908 	bl	80063be <__retarget_lock_release_recursive>
 80061ae:	e7d9      	b.n	8006164 <_fflush_r+0xc>
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <_fflush_r+0x70>)
 80061b2:	429c      	cmp	r4, r3
 80061b4:	d101      	bne.n	80061ba <_fflush_r+0x62>
 80061b6:	68ac      	ldr	r4, [r5, #8]
 80061b8:	e7df      	b.n	800617a <_fflush_r+0x22>
 80061ba:	4b04      	ldr	r3, [pc, #16]	; (80061cc <_fflush_r+0x74>)
 80061bc:	429c      	cmp	r4, r3
 80061be:	bf08      	it	eq
 80061c0:	68ec      	ldreq	r4, [r5, #12]
 80061c2:	e7da      	b.n	800617a <_fflush_r+0x22>
 80061c4:	08006bfc 	.word	0x08006bfc
 80061c8:	08006c1c 	.word	0x08006c1c
 80061cc:	08006bdc 	.word	0x08006bdc

080061d0 <std>:
 80061d0:	2300      	movs	r3, #0
 80061d2:	b510      	push	{r4, lr}
 80061d4:	4604      	mov	r4, r0
 80061d6:	e9c0 3300 	strd	r3, r3, [r0]
 80061da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061de:	6083      	str	r3, [r0, #8]
 80061e0:	8181      	strh	r1, [r0, #12]
 80061e2:	6643      	str	r3, [r0, #100]	; 0x64
 80061e4:	81c2      	strh	r2, [r0, #14]
 80061e6:	6183      	str	r3, [r0, #24]
 80061e8:	4619      	mov	r1, r3
 80061ea:	2208      	movs	r2, #8
 80061ec:	305c      	adds	r0, #92	; 0x5c
 80061ee:	f7fd fba5 	bl	800393c <memset>
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <std+0x38>)
 80061f4:	6263      	str	r3, [r4, #36]	; 0x24
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <std+0x3c>)
 80061f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80061fa:	4b05      	ldr	r3, [pc, #20]	; (8006210 <std+0x40>)
 80061fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061fe:	4b05      	ldr	r3, [pc, #20]	; (8006214 <std+0x44>)
 8006200:	6224      	str	r4, [r4, #32]
 8006202:	6323      	str	r3, [r4, #48]	; 0x30
 8006204:	bd10      	pop	{r4, pc}
 8006206:	bf00      	nop
 8006208:	08006521 	.word	0x08006521
 800620c:	08006543 	.word	0x08006543
 8006210:	0800657b 	.word	0x0800657b
 8006214:	0800659f 	.word	0x0800659f

08006218 <_cleanup_r>:
 8006218:	4901      	ldr	r1, [pc, #4]	; (8006220 <_cleanup_r+0x8>)
 800621a:	f000 b8af 	b.w	800637c <_fwalk_reent>
 800621e:	bf00      	nop
 8006220:	08006159 	.word	0x08006159

08006224 <__sfmoreglue>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	1e4a      	subs	r2, r1, #1
 8006228:	2568      	movs	r5, #104	; 0x68
 800622a:	4355      	muls	r5, r2
 800622c:	460e      	mov	r6, r1
 800622e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006232:	f7ff fa87 	bl	8005744 <_malloc_r>
 8006236:	4604      	mov	r4, r0
 8006238:	b140      	cbz	r0, 800624c <__sfmoreglue+0x28>
 800623a:	2100      	movs	r1, #0
 800623c:	e9c0 1600 	strd	r1, r6, [r0]
 8006240:	300c      	adds	r0, #12
 8006242:	60a0      	str	r0, [r4, #8]
 8006244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006248:	f7fd fb78 	bl	800393c <memset>
 800624c:	4620      	mov	r0, r4
 800624e:	bd70      	pop	{r4, r5, r6, pc}

08006250 <__sfp_lock_acquire>:
 8006250:	4801      	ldr	r0, [pc, #4]	; (8006258 <__sfp_lock_acquire+0x8>)
 8006252:	f000 b8b3 	b.w	80063bc <__retarget_lock_acquire_recursive>
 8006256:	bf00      	nop
 8006258:	200010bc 	.word	0x200010bc

0800625c <__sfp_lock_release>:
 800625c:	4801      	ldr	r0, [pc, #4]	; (8006264 <__sfp_lock_release+0x8>)
 800625e:	f000 b8ae 	b.w	80063be <__retarget_lock_release_recursive>
 8006262:	bf00      	nop
 8006264:	200010bc 	.word	0x200010bc

08006268 <__sinit_lock_acquire>:
 8006268:	4801      	ldr	r0, [pc, #4]	; (8006270 <__sinit_lock_acquire+0x8>)
 800626a:	f000 b8a7 	b.w	80063bc <__retarget_lock_acquire_recursive>
 800626e:	bf00      	nop
 8006270:	200010b7 	.word	0x200010b7

08006274 <__sinit_lock_release>:
 8006274:	4801      	ldr	r0, [pc, #4]	; (800627c <__sinit_lock_release+0x8>)
 8006276:	f000 b8a2 	b.w	80063be <__retarget_lock_release_recursive>
 800627a:	bf00      	nop
 800627c:	200010b7 	.word	0x200010b7

08006280 <__sinit>:
 8006280:	b510      	push	{r4, lr}
 8006282:	4604      	mov	r4, r0
 8006284:	f7ff fff0 	bl	8006268 <__sinit_lock_acquire>
 8006288:	69a3      	ldr	r3, [r4, #24]
 800628a:	b11b      	cbz	r3, 8006294 <__sinit+0x14>
 800628c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006290:	f7ff bff0 	b.w	8006274 <__sinit_lock_release>
 8006294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006298:	6523      	str	r3, [r4, #80]	; 0x50
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <__sinit+0x68>)
 800629c:	4a13      	ldr	r2, [pc, #76]	; (80062ec <__sinit+0x6c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80062a2:	42a3      	cmp	r3, r4
 80062a4:	bf04      	itt	eq
 80062a6:	2301      	moveq	r3, #1
 80062a8:	61a3      	streq	r3, [r4, #24]
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 f820 	bl	80062f0 <__sfp>
 80062b0:	6060      	str	r0, [r4, #4]
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 f81c 	bl	80062f0 <__sfp>
 80062b8:	60a0      	str	r0, [r4, #8]
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 f818 	bl	80062f0 <__sfp>
 80062c0:	2200      	movs	r2, #0
 80062c2:	60e0      	str	r0, [r4, #12]
 80062c4:	2104      	movs	r1, #4
 80062c6:	6860      	ldr	r0, [r4, #4]
 80062c8:	f7ff ff82 	bl	80061d0 <std>
 80062cc:	68a0      	ldr	r0, [r4, #8]
 80062ce:	2201      	movs	r2, #1
 80062d0:	2109      	movs	r1, #9
 80062d2:	f7ff ff7d 	bl	80061d0 <std>
 80062d6:	68e0      	ldr	r0, [r4, #12]
 80062d8:	2202      	movs	r2, #2
 80062da:	2112      	movs	r1, #18
 80062dc:	f7ff ff78 	bl	80061d0 <std>
 80062e0:	2301      	movs	r3, #1
 80062e2:	61a3      	str	r3, [r4, #24]
 80062e4:	e7d2      	b.n	800628c <__sinit+0xc>
 80062e6:	bf00      	nop
 80062e8:	08006858 	.word	0x08006858
 80062ec:	08006219 	.word	0x08006219

080062f0 <__sfp>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	4607      	mov	r7, r0
 80062f4:	f7ff ffac 	bl	8006250 <__sfp_lock_acquire>
 80062f8:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <__sfp+0x84>)
 80062fa:	681e      	ldr	r6, [r3, #0]
 80062fc:	69b3      	ldr	r3, [r6, #24]
 80062fe:	b913      	cbnz	r3, 8006306 <__sfp+0x16>
 8006300:	4630      	mov	r0, r6
 8006302:	f7ff ffbd 	bl	8006280 <__sinit>
 8006306:	3648      	adds	r6, #72	; 0x48
 8006308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800630c:	3b01      	subs	r3, #1
 800630e:	d503      	bpl.n	8006318 <__sfp+0x28>
 8006310:	6833      	ldr	r3, [r6, #0]
 8006312:	b30b      	cbz	r3, 8006358 <__sfp+0x68>
 8006314:	6836      	ldr	r6, [r6, #0]
 8006316:	e7f7      	b.n	8006308 <__sfp+0x18>
 8006318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800631c:	b9d5      	cbnz	r5, 8006354 <__sfp+0x64>
 800631e:	4b16      	ldr	r3, [pc, #88]	; (8006378 <__sfp+0x88>)
 8006320:	60e3      	str	r3, [r4, #12]
 8006322:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006326:	6665      	str	r5, [r4, #100]	; 0x64
 8006328:	f000 f847 	bl	80063ba <__retarget_lock_init_recursive>
 800632c:	f7ff ff96 	bl	800625c <__sfp_lock_release>
 8006330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006338:	6025      	str	r5, [r4, #0]
 800633a:	61a5      	str	r5, [r4, #24]
 800633c:	2208      	movs	r2, #8
 800633e:	4629      	mov	r1, r5
 8006340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006344:	f7fd fafa 	bl	800393c <memset>
 8006348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800634c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006350:	4620      	mov	r0, r4
 8006352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006354:	3468      	adds	r4, #104	; 0x68
 8006356:	e7d9      	b.n	800630c <__sfp+0x1c>
 8006358:	2104      	movs	r1, #4
 800635a:	4638      	mov	r0, r7
 800635c:	f7ff ff62 	bl	8006224 <__sfmoreglue>
 8006360:	4604      	mov	r4, r0
 8006362:	6030      	str	r0, [r6, #0]
 8006364:	2800      	cmp	r0, #0
 8006366:	d1d5      	bne.n	8006314 <__sfp+0x24>
 8006368:	f7ff ff78 	bl	800625c <__sfp_lock_release>
 800636c:	230c      	movs	r3, #12
 800636e:	603b      	str	r3, [r7, #0]
 8006370:	e7ee      	b.n	8006350 <__sfp+0x60>
 8006372:	bf00      	nop
 8006374:	08006858 	.word	0x08006858
 8006378:	ffff0001 	.word	0xffff0001

0800637c <_fwalk_reent>:
 800637c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006380:	4606      	mov	r6, r0
 8006382:	4688      	mov	r8, r1
 8006384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006388:	2700      	movs	r7, #0
 800638a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800638e:	f1b9 0901 	subs.w	r9, r9, #1
 8006392:	d505      	bpl.n	80063a0 <_fwalk_reent+0x24>
 8006394:	6824      	ldr	r4, [r4, #0]
 8006396:	2c00      	cmp	r4, #0
 8006398:	d1f7      	bne.n	800638a <_fwalk_reent+0xe>
 800639a:	4638      	mov	r0, r7
 800639c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a0:	89ab      	ldrh	r3, [r5, #12]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d907      	bls.n	80063b6 <_fwalk_reent+0x3a>
 80063a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063aa:	3301      	adds	r3, #1
 80063ac:	d003      	beq.n	80063b6 <_fwalk_reent+0x3a>
 80063ae:	4629      	mov	r1, r5
 80063b0:	4630      	mov	r0, r6
 80063b2:	47c0      	blx	r8
 80063b4:	4307      	orrs	r7, r0
 80063b6:	3568      	adds	r5, #104	; 0x68
 80063b8:	e7e9      	b.n	800638e <_fwalk_reent+0x12>

080063ba <__retarget_lock_init_recursive>:
 80063ba:	4770      	bx	lr

080063bc <__retarget_lock_acquire_recursive>:
 80063bc:	4770      	bx	lr

080063be <__retarget_lock_release_recursive>:
 80063be:	4770      	bx	lr

080063c0 <__swhatbuf_r>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	460e      	mov	r6, r1
 80063c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c8:	2900      	cmp	r1, #0
 80063ca:	b096      	sub	sp, #88	; 0x58
 80063cc:	4614      	mov	r4, r2
 80063ce:	461d      	mov	r5, r3
 80063d0:	da07      	bge.n	80063e2 <__swhatbuf_r+0x22>
 80063d2:	2300      	movs	r3, #0
 80063d4:	602b      	str	r3, [r5, #0]
 80063d6:	89b3      	ldrh	r3, [r6, #12]
 80063d8:	061a      	lsls	r2, r3, #24
 80063da:	d410      	bmi.n	80063fe <__swhatbuf_r+0x3e>
 80063dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063e0:	e00e      	b.n	8006400 <__swhatbuf_r+0x40>
 80063e2:	466a      	mov	r2, sp
 80063e4:	f000 f902 	bl	80065ec <_fstat_r>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	dbf2      	blt.n	80063d2 <__swhatbuf_r+0x12>
 80063ec:	9a01      	ldr	r2, [sp, #4]
 80063ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063f6:	425a      	negs	r2, r3
 80063f8:	415a      	adcs	r2, r3
 80063fa:	602a      	str	r2, [r5, #0]
 80063fc:	e7ee      	b.n	80063dc <__swhatbuf_r+0x1c>
 80063fe:	2340      	movs	r3, #64	; 0x40
 8006400:	2000      	movs	r0, #0
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	b016      	add	sp, #88	; 0x58
 8006406:	bd70      	pop	{r4, r5, r6, pc}

08006408 <__smakebuf_r>:
 8006408:	898b      	ldrh	r3, [r1, #12]
 800640a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800640c:	079d      	lsls	r5, r3, #30
 800640e:	4606      	mov	r6, r0
 8006410:	460c      	mov	r4, r1
 8006412:	d507      	bpl.n	8006424 <__smakebuf_r+0x1c>
 8006414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	6123      	str	r3, [r4, #16]
 800641c:	2301      	movs	r3, #1
 800641e:	6163      	str	r3, [r4, #20]
 8006420:	b002      	add	sp, #8
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	ab01      	add	r3, sp, #4
 8006426:	466a      	mov	r2, sp
 8006428:	f7ff ffca 	bl	80063c0 <__swhatbuf_r>
 800642c:	9900      	ldr	r1, [sp, #0]
 800642e:	4605      	mov	r5, r0
 8006430:	4630      	mov	r0, r6
 8006432:	f7ff f987 	bl	8005744 <_malloc_r>
 8006436:	b948      	cbnz	r0, 800644c <__smakebuf_r+0x44>
 8006438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800643c:	059a      	lsls	r2, r3, #22
 800643e:	d4ef      	bmi.n	8006420 <__smakebuf_r+0x18>
 8006440:	f023 0303 	bic.w	r3, r3, #3
 8006444:	f043 0302 	orr.w	r3, r3, #2
 8006448:	81a3      	strh	r3, [r4, #12]
 800644a:	e7e3      	b.n	8006414 <__smakebuf_r+0xc>
 800644c:	4b0d      	ldr	r3, [pc, #52]	; (8006484 <__smakebuf_r+0x7c>)
 800644e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	6020      	str	r0, [r4, #0]
 8006454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	9b00      	ldr	r3, [sp, #0]
 800645c:	6163      	str	r3, [r4, #20]
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	6120      	str	r0, [r4, #16]
 8006462:	b15b      	cbz	r3, 800647c <__smakebuf_r+0x74>
 8006464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006468:	4630      	mov	r0, r6
 800646a:	f000 f8d1 	bl	8006610 <_isatty_r>
 800646e:	b128      	cbz	r0, 800647c <__smakebuf_r+0x74>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	89a0      	ldrh	r0, [r4, #12]
 800647e:	4305      	orrs	r5, r0
 8006480:	81a5      	strh	r5, [r4, #12]
 8006482:	e7cd      	b.n	8006420 <__smakebuf_r+0x18>
 8006484:	08006219 	.word	0x08006219

08006488 <_malloc_usable_size_r>:
 8006488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648c:	1f18      	subs	r0, r3, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfbc      	itt	lt
 8006492:	580b      	ldrlt	r3, [r1, r0]
 8006494:	18c0      	addlt	r0, r0, r3
 8006496:	4770      	bx	lr

08006498 <_raise_r>:
 8006498:	291f      	cmp	r1, #31
 800649a:	b538      	push	{r3, r4, r5, lr}
 800649c:	4604      	mov	r4, r0
 800649e:	460d      	mov	r5, r1
 80064a0:	d904      	bls.n	80064ac <_raise_r+0x14>
 80064a2:	2316      	movs	r3, #22
 80064a4:	6003      	str	r3, [r0, #0]
 80064a6:	f04f 30ff 	mov.w	r0, #4294967295
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064ae:	b112      	cbz	r2, 80064b6 <_raise_r+0x1e>
 80064b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064b4:	b94b      	cbnz	r3, 80064ca <_raise_r+0x32>
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 f830 	bl	800651c <_getpid_r>
 80064bc:	462a      	mov	r2, r5
 80064be:	4601      	mov	r1, r0
 80064c0:	4620      	mov	r0, r4
 80064c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064c6:	f000 b817 	b.w	80064f8 <_kill_r>
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d00a      	beq.n	80064e4 <_raise_r+0x4c>
 80064ce:	1c59      	adds	r1, r3, #1
 80064d0:	d103      	bne.n	80064da <_raise_r+0x42>
 80064d2:	2316      	movs	r3, #22
 80064d4:	6003      	str	r3, [r0, #0]
 80064d6:	2001      	movs	r0, #1
 80064d8:	e7e7      	b.n	80064aa <_raise_r+0x12>
 80064da:	2400      	movs	r4, #0
 80064dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064e0:	4628      	mov	r0, r5
 80064e2:	4798      	blx	r3
 80064e4:	2000      	movs	r0, #0
 80064e6:	e7e0      	b.n	80064aa <_raise_r+0x12>

080064e8 <raise>:
 80064e8:	4b02      	ldr	r3, [pc, #8]	; (80064f4 <raise+0xc>)
 80064ea:	4601      	mov	r1, r0
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	f7ff bfd3 	b.w	8006498 <_raise_r>
 80064f2:	bf00      	nop
 80064f4:	20000018 	.word	0x20000018

080064f8 <_kill_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d07      	ldr	r5, [pc, #28]	; (8006518 <_kill_r+0x20>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	4608      	mov	r0, r1
 8006502:	4611      	mov	r1, r2
 8006504:	602b      	str	r3, [r5, #0]
 8006506:	f7fa fe4d 	bl	80011a4 <_kill>
 800650a:	1c43      	adds	r3, r0, #1
 800650c:	d102      	bne.n	8006514 <_kill_r+0x1c>
 800650e:	682b      	ldr	r3, [r5, #0]
 8006510:	b103      	cbz	r3, 8006514 <_kill_r+0x1c>
 8006512:	6023      	str	r3, [r4, #0]
 8006514:	bd38      	pop	{r3, r4, r5, pc}
 8006516:	bf00      	nop
 8006518:	200010b0 	.word	0x200010b0

0800651c <_getpid_r>:
 800651c:	f7fa be40 	b.w	80011a0 <_getpid>

08006520 <__sread>:
 8006520:	b510      	push	{r4, lr}
 8006522:	460c      	mov	r4, r1
 8006524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006528:	f000 f894 	bl	8006654 <_read_r>
 800652c:	2800      	cmp	r0, #0
 800652e:	bfab      	itete	ge
 8006530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006532:	89a3      	ldrhlt	r3, [r4, #12]
 8006534:	181b      	addge	r3, r3, r0
 8006536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800653a:	bfac      	ite	ge
 800653c:	6563      	strge	r3, [r4, #84]	; 0x54
 800653e:	81a3      	strhlt	r3, [r4, #12]
 8006540:	bd10      	pop	{r4, pc}

08006542 <__swrite>:
 8006542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006546:	461f      	mov	r7, r3
 8006548:	898b      	ldrh	r3, [r1, #12]
 800654a:	05db      	lsls	r3, r3, #23
 800654c:	4605      	mov	r5, r0
 800654e:	460c      	mov	r4, r1
 8006550:	4616      	mov	r6, r2
 8006552:	d505      	bpl.n	8006560 <__swrite+0x1e>
 8006554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006558:	2302      	movs	r3, #2
 800655a:	2200      	movs	r2, #0
 800655c:	f000 f868 	bl	8006630 <_lseek_r>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	4632      	mov	r2, r6
 800656e:	463b      	mov	r3, r7
 8006570:	4628      	mov	r0, r5
 8006572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006576:	f000 b817 	b.w	80065a8 <_write_r>

0800657a <__sseek>:
 800657a:	b510      	push	{r4, lr}
 800657c:	460c      	mov	r4, r1
 800657e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006582:	f000 f855 	bl	8006630 <_lseek_r>
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	bf15      	itete	ne
 800658c:	6560      	strne	r0, [r4, #84]	; 0x54
 800658e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006596:	81a3      	strheq	r3, [r4, #12]
 8006598:	bf18      	it	ne
 800659a:	81a3      	strhne	r3, [r4, #12]
 800659c:	bd10      	pop	{r4, pc}

0800659e <__sclose>:
 800659e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a2:	f000 b813 	b.w	80065cc <_close_r>
	...

080065a8 <_write_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d07      	ldr	r5, [pc, #28]	; (80065c8 <_write_r+0x20>)
 80065ac:	4604      	mov	r4, r0
 80065ae:	4608      	mov	r0, r1
 80065b0:	4611      	mov	r1, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	602a      	str	r2, [r5, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fa fe12 	bl	80011e0 <_write>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_write_r+0x1e>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_write_r+0x1e>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	200010b0 	.word	0x200010b0

080065cc <_close_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d06      	ldr	r5, [pc, #24]	; (80065e8 <_close_r+0x1c>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fa fe2e 	bl	8001238 <_close>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_close_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_close_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	200010b0 	.word	0x200010b0

080065ec <_fstat_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4d07      	ldr	r5, [pc, #28]	; (800660c <_fstat_r+0x20>)
 80065f0:	2300      	movs	r3, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f7fa fe20 	bl	800123e <_fstat>
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	d102      	bne.n	8006608 <_fstat_r+0x1c>
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	b103      	cbz	r3, 8006608 <_fstat_r+0x1c>
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	bd38      	pop	{r3, r4, r5, pc}
 800660a:	bf00      	nop
 800660c:	200010b0 	.word	0x200010b0

08006610 <_isatty_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d06      	ldr	r5, [pc, #24]	; (800662c <_isatty_r+0x1c>)
 8006614:	2300      	movs	r3, #0
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	602b      	str	r3, [r5, #0]
 800661c:	f7fa fe14 	bl	8001248 <_isatty>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_isatty_r+0x1a>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_isatty_r+0x1a>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	200010b0 	.word	0x200010b0

08006630 <_lseek_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d07      	ldr	r5, [pc, #28]	; (8006650 <_lseek_r+0x20>)
 8006634:	4604      	mov	r4, r0
 8006636:	4608      	mov	r0, r1
 8006638:	4611      	mov	r1, r2
 800663a:	2200      	movs	r2, #0
 800663c:	602a      	str	r2, [r5, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fa fe04 	bl	800124c <_lseek>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_lseek_r+0x1e>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_lseek_r+0x1e>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	200010b0 	.word	0x200010b0

08006654 <_read_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d07      	ldr	r5, [pc, #28]	; (8006674 <_read_r+0x20>)
 8006658:	4604      	mov	r4, r0
 800665a:	4608      	mov	r0, r1
 800665c:	4611      	mov	r1, r2
 800665e:	2200      	movs	r2, #0
 8006660:	602a      	str	r2, [r5, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	f7fa fdac 	bl	80011c0 <_read>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d102      	bne.n	8006672 <_read_r+0x1e>
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	b103      	cbz	r3, 8006672 <_read_r+0x1e>
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	200010b0 	.word	0x200010b0

08006678 <_init>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	bf00      	nop
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr

08006684 <_fini>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr
